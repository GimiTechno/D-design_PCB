
STM32_Smart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c88  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08006d94  08006d94  00016d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e7c  08006e7c  0002018c  2**0
                  CONTENTS
  4 .ARM          00000000  08006e7c  08006e7c  0002018c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006e7c  08006e7c  0002018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e7c  08006e7c  00016e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e80  08006e80  00016e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000018c  20000000  08006e84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bf4  2000018c  08007010  0002018c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d80  08007010  00020d80  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000112e2  00000000  00000000  000201b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000029ac  00000000  00000000  00031497  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a70  00000000  00000000  00033e48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000928  00000000  00000000  000348b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000197ed  00000000  00000000  000351e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c162  00000000  00000000  0004e9cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00084834  00000000  00000000  0005ab2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000df363  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027e0  00000000  00000000  000df3e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000018c 	.word	0x2000018c
 8000128:	00000000 	.word	0x00000000
 800012c:	08006d7c 	.word	0x08006d7c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000190 	.word	0x20000190
 8000148:	08006d7c 	.word	0x08006d7c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b598      	push	{r3, r4, r7, lr}
 800015e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000160:	f000 f9c8 	bl	80004f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000164:	f000 f826 	bl	80001b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000168:	f000 f87e 	bl	8000268 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800016c:	f006 f938 	bl	80063e0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  // Wait H/W Init
  HAL_Delay(1000);
 8000170:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000174:	f000 fa20 	bl	80005b8 <HAL_Delay>
  // OP MSG
  opmsg_func();
 8000178:	f000 f8da 	bl	8000330 <opmsg_func>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(g_irq_f != FALSE)
 800017c:	4b0b      	ldr	r3, [pc, #44]	; (80001ac <main+0x50>)
 800017e:	781b      	ldrb	r3, [r3, #0]
 8000180:	2b00      	cmp	r3, #0
 8000182:	d0fb      	beq.n	800017c <main+0x20>
	{
	    CDC_Transmit_FS((uint8_t *)p_irq0_msg_buf, strlen(p_irq0_msg_buf));
 8000184:	4b0a      	ldr	r3, [pc, #40]	; (80001b0 <main+0x54>)
 8000186:	681c      	ldr	r4, [r3, #0]
 8000188:	4b09      	ldr	r3, [pc, #36]	; (80001b0 <main+0x54>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	4618      	mov	r0, r3
 800018e:	f7ff ffdd 	bl	800014c <strlen>
 8000192:	4603      	mov	r3, r0
 8000194:	b29b      	uxth	r3, r3
 8000196:	4619      	mov	r1, r3
 8000198:	4620      	mov	r0, r4
 800019a:	f006 f9e5 	bl	8006568 <CDC_Transmit_FS>
	    HAL_Delay(100);
 800019e:	2064      	movs	r0, #100	; 0x64
 80001a0:	f000 fa0a 	bl	80005b8 <HAL_Delay>

	    g_irq_f = FALSE;
 80001a4:	4b01      	ldr	r3, [pc, #4]	; (80001ac <main+0x50>)
 80001a6:	2200      	movs	r2, #0
 80001a8:	701a      	strb	r2, [r3, #0]
	if(g_irq_f != FALSE)
 80001aa:	e7e7      	b.n	800017c <main+0x20>
 80001ac:	200001a8 	.word	0x200001a8
 80001b0:	2000000c 	.word	0x2000000c

080001b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b094      	sub	sp, #80	; 0x50
 80001b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001be:	2228      	movs	r2, #40	; 0x28
 80001c0:	2100      	movs	r1, #0
 80001c2:	4618      	mov	r0, r3
 80001c4:	f006 fdd2 	bl	8006d6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c8:	f107 0314 	add.w	r3, r7, #20
 80001cc:	2200      	movs	r2, #0
 80001ce:	601a      	str	r2, [r3, #0]
 80001d0:	605a      	str	r2, [r3, #4]
 80001d2:	609a      	str	r2, [r3, #8]
 80001d4:	60da      	str	r2, [r3, #12]
 80001d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001d8:	1d3b      	adds	r3, r7, #4
 80001da:	2200      	movs	r2, #0
 80001dc:	601a      	str	r2, [r3, #0]
 80001de:	605a      	str	r2, [r3, #4]
 80001e0:	609a      	str	r2, [r3, #8]
 80001e2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001e4:	2301      	movs	r3, #1
 80001e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001ee:	2300      	movs	r3, #0
 80001f0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001f2:	2301      	movs	r3, #1
 80001f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001f6:	2302      	movs	r3, #2
 80001f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000200:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000204:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000206:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800020a:	4618      	mov	r0, r3
 800020c:	f002 f836 	bl	800227c <HAL_RCC_OscConfig>
 8000210:	4603      	mov	r3, r0
 8000212:	2b00      	cmp	r3, #0
 8000214:	d001      	beq.n	800021a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000216:	f000 f8c5 	bl	80003a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800021a:	230f      	movs	r3, #15
 800021c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800021e:	2302      	movs	r3, #2
 8000220:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000222:	2300      	movs	r3, #0
 8000224:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000226:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800022a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800022c:	2300      	movs	r3, #0
 800022e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000230:	f107 0314 	add.w	r3, r7, #20
 8000234:	2102      	movs	r1, #2
 8000236:	4618      	mov	r0, r3
 8000238:	f002 faa0 	bl	800277c <HAL_RCC_ClockConfig>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d001      	beq.n	8000246 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000242:	f000 f8af 	bl	80003a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000246:	2310      	movs	r3, #16
 8000248:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800024a:	2300      	movs	r3, #0
 800024c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800024e:	1d3b      	adds	r3, r7, #4
 8000250:	4618      	mov	r0, r3
 8000252:	f002 fbfd 	bl	8002a50 <HAL_RCCEx_PeriphCLKConfig>
 8000256:	4603      	mov	r3, r0
 8000258:	2b00      	cmp	r3, #0
 800025a:	d001      	beq.n	8000260 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800025c:	f000 f8a2 	bl	80003a4 <Error_Handler>
  }
}
 8000260:	bf00      	nop
 8000262:	3750      	adds	r7, #80	; 0x50
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}

08000268 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b088      	sub	sp, #32
 800026c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800026e:	f107 0310 	add.w	r3, r7, #16
 8000272:	2200      	movs	r2, #0
 8000274:	601a      	str	r2, [r3, #0]
 8000276:	605a      	str	r2, [r3, #4]
 8000278:	609a      	str	r2, [r3, #8]
 800027a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800027c:	4b28      	ldr	r3, [pc, #160]	; (8000320 <MX_GPIO_Init+0xb8>)
 800027e:	699b      	ldr	r3, [r3, #24]
 8000280:	4a27      	ldr	r2, [pc, #156]	; (8000320 <MX_GPIO_Init+0xb8>)
 8000282:	f043 0310 	orr.w	r3, r3, #16
 8000286:	6193      	str	r3, [r2, #24]
 8000288:	4b25      	ldr	r3, [pc, #148]	; (8000320 <MX_GPIO_Init+0xb8>)
 800028a:	699b      	ldr	r3, [r3, #24]
 800028c:	f003 0310 	and.w	r3, r3, #16
 8000290:	60fb      	str	r3, [r7, #12]
 8000292:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000294:	4b22      	ldr	r3, [pc, #136]	; (8000320 <MX_GPIO_Init+0xb8>)
 8000296:	699b      	ldr	r3, [r3, #24]
 8000298:	4a21      	ldr	r2, [pc, #132]	; (8000320 <MX_GPIO_Init+0xb8>)
 800029a:	f043 0320 	orr.w	r3, r3, #32
 800029e:	6193      	str	r3, [r2, #24]
 80002a0:	4b1f      	ldr	r3, [pc, #124]	; (8000320 <MX_GPIO_Init+0xb8>)
 80002a2:	699b      	ldr	r3, [r3, #24]
 80002a4:	f003 0320 	and.w	r3, r3, #32
 80002a8:	60bb      	str	r3, [r7, #8]
 80002aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ac:	4b1c      	ldr	r3, [pc, #112]	; (8000320 <MX_GPIO_Init+0xb8>)
 80002ae:	699b      	ldr	r3, [r3, #24]
 80002b0:	4a1b      	ldr	r2, [pc, #108]	; (8000320 <MX_GPIO_Init+0xb8>)
 80002b2:	f043 0304 	orr.w	r3, r3, #4
 80002b6:	6193      	str	r3, [r2, #24]
 80002b8:	4b19      	ldr	r3, [pc, #100]	; (8000320 <MX_GPIO_Init+0xb8>)
 80002ba:	699b      	ldr	r3, [r3, #24]
 80002bc:	f003 0304 	and.w	r3, r3, #4
 80002c0:	607b      	str	r3, [r7, #4]
 80002c2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_SET);
 80002c4:	2201      	movs	r2, #1
 80002c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002ca:	4816      	ldr	r0, [pc, #88]	; (8000324 <MX_GPIO_Init+0xbc>)
 80002cc:	f000 fbfe 	bl	8000acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USR_LED_Pin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 80002d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002d6:	2301      	movs	r3, #1
 80002d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002da:	2300      	movs	r3, #0
 80002dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002de:	2302      	movs	r3, #2
 80002e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 80002e2:	f107 0310 	add.w	r3, r7, #16
 80002e6:	4619      	mov	r1, r3
 80002e8:	480e      	ldr	r0, [pc, #56]	; (8000324 <MX_GPIO_Init+0xbc>)
 80002ea:	f000 fa95 	bl	8000818 <HAL_GPIO_Init>

  /*Configure GPIO pin : USR_BTN_Pin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 80002ee:	2301      	movs	r3, #1
 80002f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002f2:	4b0d      	ldr	r3, [pc, #52]	; (8000328 <MX_GPIO_Init+0xc0>)
 80002f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002f6:	2301      	movs	r3, #1
 80002f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 80002fa:	f107 0310 	add.w	r3, r7, #16
 80002fe:	4619      	mov	r1, r3
 8000300:	480a      	ldr	r0, [pc, #40]	; (800032c <MX_GPIO_Init+0xc4>)
 8000302:	f000 fa89 	bl	8000818 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000306:	2200      	movs	r2, #0
 8000308:	2100      	movs	r1, #0
 800030a:	2006      	movs	r0, #6
 800030c:	f000 fa4d 	bl	80007aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000310:	2006      	movs	r0, #6
 8000312:	f000 fa66 	bl	80007e2 <HAL_NVIC_EnableIRQ>

}
 8000316:	bf00      	nop
 8000318:	3720      	adds	r7, #32
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	40021000 	.word	0x40021000
 8000324:	40011000 	.word	0x40011000
 8000328:	10210000 	.word	0x10210000
 800032c:	40010800 	.word	0x40010800

08000330 <opmsg_func>:
/**
 * @brief  Board OP MSG
 * @retval None
 */
static void opmsg_func(void)
{
 8000330:	b598      	push	{r3, r4, r7, lr}
 8000332:	af00      	add	r7, sp, #0
	// board MSG
    CDC_Transmit_FS((uint8_t *)p_boardinfo_buf, strlen(p_boardinfo_buf));
 8000334:	4b18      	ldr	r3, [pc, #96]	; (8000398 <opmsg_func+0x68>)
 8000336:	681c      	ldr	r4, [r3, #0]
 8000338:	4b17      	ldr	r3, [pc, #92]	; (8000398 <opmsg_func+0x68>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4618      	mov	r0, r3
 800033e:	f7ff ff05 	bl	800014c <strlen>
 8000342:	4603      	mov	r3, r0
 8000344:	b29b      	uxth	r3, r3
 8000346:	4619      	mov	r1, r3
 8000348:	4620      	mov	r0, r4
 800034a:	f006 f90d 	bl	8006568 <CDC_Transmit_FS>
    HAL_Delay(100);
 800034e:	2064      	movs	r0, #100	; 0x64
 8000350:	f000 f932 	bl	80005b8 <HAL_Delay>

    // Borad F/W MSG
    CDC_Transmit_FS((uint8_t *)p_buildinfo_buf, strlen(p_buildinfo_buf));
 8000354:	4b11      	ldr	r3, [pc, #68]	; (800039c <opmsg_func+0x6c>)
 8000356:	681c      	ldr	r4, [r3, #0]
 8000358:	4b10      	ldr	r3, [pc, #64]	; (800039c <opmsg_func+0x6c>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4618      	mov	r0, r3
 800035e:	f7ff fef5 	bl	800014c <strlen>
 8000362:	4603      	mov	r3, r0
 8000364:	b29b      	uxth	r3, r3
 8000366:	4619      	mov	r1, r3
 8000368:	4620      	mov	r0, r4
 800036a:	f006 f8fd 	bl	8006568 <CDC_Transmit_FS>
    HAL_Delay(100);
 800036e:	2064      	movs	r0, #100	; 0x64
 8000370:	f000 f922 	bl	80005b8 <HAL_Delay>

    // Copyright MSG
    CDC_Transmit_FS((uint8_t *)p_copyright_buf, strlen(p_copyright_buf));
 8000374:	4b0a      	ldr	r3, [pc, #40]	; (80003a0 <opmsg_func+0x70>)
 8000376:	681c      	ldr	r4, [r3, #0]
 8000378:	4b09      	ldr	r3, [pc, #36]	; (80003a0 <opmsg_func+0x70>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4618      	mov	r0, r3
 800037e:	f7ff fee5 	bl	800014c <strlen>
 8000382:	4603      	mov	r3, r0
 8000384:	b29b      	uxth	r3, r3
 8000386:	4619      	mov	r1, r3
 8000388:	4620      	mov	r0, r4
 800038a:	f006 f8ed 	bl	8006568 <CDC_Transmit_FS>
    HAL_Delay(100);
 800038e:	2064      	movs	r0, #100	; 0x64
 8000390:	f000 f912 	bl	80005b8 <HAL_Delay>
}
 8000394:	bf00      	nop
 8000396:	bd98      	pop	{r3, r4, r7, pc}
 8000398:	20000000 	.word	0x20000000
 800039c:	20000004 	.word	0x20000004
 80003a0:	20000008 	.word	0x20000008

080003a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003a8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003aa:	e7fe      	b.n	80003aa <Error_Handler+0x6>

080003ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b085      	sub	sp, #20
 80003b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003b2:	4b15      	ldr	r3, [pc, #84]	; (8000408 <HAL_MspInit+0x5c>)
 80003b4:	699b      	ldr	r3, [r3, #24]
 80003b6:	4a14      	ldr	r2, [pc, #80]	; (8000408 <HAL_MspInit+0x5c>)
 80003b8:	f043 0301 	orr.w	r3, r3, #1
 80003bc:	6193      	str	r3, [r2, #24]
 80003be:	4b12      	ldr	r3, [pc, #72]	; (8000408 <HAL_MspInit+0x5c>)
 80003c0:	699b      	ldr	r3, [r3, #24]
 80003c2:	f003 0301 	and.w	r3, r3, #1
 80003c6:	60bb      	str	r3, [r7, #8]
 80003c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ca:	4b0f      	ldr	r3, [pc, #60]	; (8000408 <HAL_MspInit+0x5c>)
 80003cc:	69db      	ldr	r3, [r3, #28]
 80003ce:	4a0e      	ldr	r2, [pc, #56]	; (8000408 <HAL_MspInit+0x5c>)
 80003d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003d4:	61d3      	str	r3, [r2, #28]
 80003d6:	4b0c      	ldr	r3, [pc, #48]	; (8000408 <HAL_MspInit+0x5c>)
 80003d8:	69db      	ldr	r3, [r3, #28]
 80003da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003de:	607b      	str	r3, [r7, #4]
 80003e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003e2:	4b0a      	ldr	r3, [pc, #40]	; (800040c <HAL_MspInit+0x60>)
 80003e4:	685b      	ldr	r3, [r3, #4]
 80003e6:	60fb      	str	r3, [r7, #12]
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003ee:	60fb      	str	r3, [r7, #12]
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003f6:	60fb      	str	r3, [r7, #12]
 80003f8:	4a04      	ldr	r2, [pc, #16]	; (800040c <HAL_MspInit+0x60>)
 80003fa:	68fb      	ldr	r3, [r7, #12]
 80003fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003fe:	bf00      	nop
 8000400:	3714      	adds	r7, #20
 8000402:	46bd      	mov	sp, r7
 8000404:	bc80      	pop	{r7}
 8000406:	4770      	bx	lr
 8000408:	40021000 	.word	0x40021000
 800040c:	40010000 	.word	0x40010000

08000410 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000414:	e7fe      	b.n	8000414 <NMI_Handler+0x4>

08000416 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000416:	b480      	push	{r7}
 8000418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800041a:	e7fe      	b.n	800041a <HardFault_Handler+0x4>

0800041c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000420:	e7fe      	b.n	8000420 <MemManage_Handler+0x4>

08000422 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000422:	b480      	push	{r7}
 8000424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000426:	e7fe      	b.n	8000426 <BusFault_Handler+0x4>

08000428 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800042c:	e7fe      	b.n	800042c <UsageFault_Handler+0x4>

0800042e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800042e:	b480      	push	{r7}
 8000430:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000432:	bf00      	nop
 8000434:	46bd      	mov	sp, r7
 8000436:	bc80      	pop	{r7}
 8000438:	4770      	bx	lr

0800043a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800043a:	b480      	push	{r7}
 800043c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800043e:	bf00      	nop
 8000440:	46bd      	mov	sp, r7
 8000442:	bc80      	pop	{r7}
 8000444:	4770      	bx	lr

08000446 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000446:	b480      	push	{r7}
 8000448:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800044a:	bf00      	nop
 800044c:	46bd      	mov	sp, r7
 800044e:	bc80      	pop	{r7}
 8000450:	4770      	bx	lr

08000452 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000452:	b580      	push	{r7, lr}
 8000454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000456:	f000 f893 	bl	8000580 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800045a:	bf00      	nop
 800045c:	bd80      	pop	{r7, pc}
	...

08000460 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000464:	2001      	movs	r0, #1
 8000466:	f000 fb63 	bl	8000b30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  g_irq_f = TRUE;
 800046a:	4b05      	ldr	r3, [pc, #20]	; (8000480 <EXTI0_IRQHandler+0x20>)
 800046c:	2201      	movs	r2, #1
 800046e:	701a      	strb	r2, [r3, #0]

  // USR_LED(PC13)
  HAL_GPIO_TogglePin(USR_LED_GPIO_Port, USR_LED_Pin);
 8000470:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000474:	4803      	ldr	r0, [pc, #12]	; (8000484 <EXTI0_IRQHandler+0x24>)
 8000476:	f000 fb41 	bl	8000afc <HAL_GPIO_TogglePin>
  /* USER CODE END EXTI0_IRQn 1 */
}
 800047a:	bf00      	nop
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	200001a8 	.word	0x200001a8
 8000484:	40011000 	.word	0x40011000

08000488 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800048c:	4802      	ldr	r0, [pc, #8]	; (8000498 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800048e:	f000 fca2 	bl	8000dd6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000492:	bf00      	nop
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	20000a94 	.word	0x20000a94

0800049c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004a0:	bf00      	nop
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bc80      	pop	{r7}
 80004a6:	4770      	bx	lr

080004a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80004a8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80004aa:	e003      	b.n	80004b4 <LoopCopyDataInit>

080004ac <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80004ac:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80004ae:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80004b0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80004b2:	3104      	adds	r1, #4

080004b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80004b4:	480a      	ldr	r0, [pc, #40]	; (80004e0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80004b6:	4b0b      	ldr	r3, [pc, #44]	; (80004e4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80004b8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80004ba:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80004bc:	d3f6      	bcc.n	80004ac <CopyDataInit>
  ldr r2, =_sbss
 80004be:	4a0a      	ldr	r2, [pc, #40]	; (80004e8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80004c0:	e002      	b.n	80004c8 <LoopFillZerobss>

080004c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80004c2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80004c4:	f842 3b04 	str.w	r3, [r2], #4

080004c8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80004c8:	4b08      	ldr	r3, [pc, #32]	; (80004ec <LoopFillZerobss+0x24>)
  cmp r2, r3
 80004ca:	429a      	cmp	r2, r3
  bcc FillZerobss
 80004cc:	d3f9      	bcc.n	80004c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80004ce:	f7ff ffe5 	bl	800049c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004d2:	f006 fc27 	bl	8006d24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004d6:	f7ff fe41 	bl	800015c <main>
  bx lr
 80004da:	4770      	bx	lr
  ldr r3, =_sidata
 80004dc:	08006e84 	.word	0x08006e84
  ldr r0, =_sdata
 80004e0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80004e4:	2000018c 	.word	0x2000018c
  ldr r2, =_sbss
 80004e8:	2000018c 	.word	0x2000018c
  ldr r3, = _ebss
 80004ec:	20000d80 	.word	0x20000d80

080004f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004f0:	e7fe      	b.n	80004f0 <ADC1_2_IRQHandler>
	...

080004f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f8:	4b08      	ldr	r3, [pc, #32]	; (800051c <HAL_Init+0x28>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a07      	ldr	r2, [pc, #28]	; (800051c <HAL_Init+0x28>)
 80004fe:	f043 0310 	orr.w	r3, r3, #16
 8000502:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000504:	2003      	movs	r0, #3
 8000506:	f000 f945 	bl	8000794 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800050a:	2000      	movs	r0, #0
 800050c:	f000 f808 	bl	8000520 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000510:	f7ff ff4c 	bl	80003ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000514:	2300      	movs	r3, #0
}
 8000516:	4618      	mov	r0, r3
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	40022000 	.word	0x40022000

08000520 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000528:	4b12      	ldr	r3, [pc, #72]	; (8000574 <HAL_InitTick+0x54>)
 800052a:	681a      	ldr	r2, [r3, #0]
 800052c:	4b12      	ldr	r3, [pc, #72]	; (8000578 <HAL_InitTick+0x58>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	4619      	mov	r1, r3
 8000532:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000536:	fbb3 f3f1 	udiv	r3, r3, r1
 800053a:	fbb2 f3f3 	udiv	r3, r2, r3
 800053e:	4618      	mov	r0, r3
 8000540:	f000 f95d 	bl	80007fe <HAL_SYSTICK_Config>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800054a:	2301      	movs	r3, #1
 800054c:	e00e      	b.n	800056c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	2b0f      	cmp	r3, #15
 8000552:	d80a      	bhi.n	800056a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000554:	2200      	movs	r2, #0
 8000556:	6879      	ldr	r1, [r7, #4]
 8000558:	f04f 30ff 	mov.w	r0, #4294967295
 800055c:	f000 f925 	bl	80007aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000560:	4a06      	ldr	r2, [pc, #24]	; (800057c <HAL_InitTick+0x5c>)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000566:	2300      	movs	r3, #0
 8000568:	e000      	b.n	800056c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800056a:	2301      	movs	r3, #1
}
 800056c:	4618      	mov	r0, r3
 800056e:	3708      	adds	r7, #8
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	20000010 	.word	0x20000010
 8000578:	20000018 	.word	0x20000018
 800057c:	20000014 	.word	0x20000014

08000580 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000584:	4b05      	ldr	r3, [pc, #20]	; (800059c <HAL_IncTick+0x1c>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	461a      	mov	r2, r3
 800058a:	4b05      	ldr	r3, [pc, #20]	; (80005a0 <HAL_IncTick+0x20>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4413      	add	r3, r2
 8000590:	4a03      	ldr	r2, [pc, #12]	; (80005a0 <HAL_IncTick+0x20>)
 8000592:	6013      	str	r3, [r2, #0]
}
 8000594:	bf00      	nop
 8000596:	46bd      	mov	sp, r7
 8000598:	bc80      	pop	{r7}
 800059a:	4770      	bx	lr
 800059c:	20000018 	.word	0x20000018
 80005a0:	200003cc 	.word	0x200003cc

080005a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  return uwTick;
 80005a8:	4b02      	ldr	r3, [pc, #8]	; (80005b4 <HAL_GetTick+0x10>)
 80005aa:	681b      	ldr	r3, [r3, #0]
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bc80      	pop	{r7}
 80005b2:	4770      	bx	lr
 80005b4:	200003cc 	.word	0x200003cc

080005b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005c0:	f7ff fff0 	bl	80005a4 <HAL_GetTick>
 80005c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005d0:	d005      	beq.n	80005de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005d2:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <HAL_Delay+0x40>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	461a      	mov	r2, r3
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	4413      	add	r3, r2
 80005dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005de:	bf00      	nop
 80005e0:	f7ff ffe0 	bl	80005a4 <HAL_GetTick>
 80005e4:	4602      	mov	r2, r0
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	1ad3      	subs	r3, r2, r3
 80005ea:	68fa      	ldr	r2, [r7, #12]
 80005ec:	429a      	cmp	r2, r3
 80005ee:	d8f7      	bhi.n	80005e0 <HAL_Delay+0x28>
  {
  }
}
 80005f0:	bf00      	nop
 80005f2:	3710      	adds	r7, #16
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	20000018 	.word	0x20000018

080005fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b085      	sub	sp, #20
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	f003 0307 	and.w	r3, r3, #7
 800060a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <__NVIC_SetPriorityGrouping+0x44>)
 800060e:	68db      	ldr	r3, [r3, #12]
 8000610:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000612:	68ba      	ldr	r2, [r7, #8]
 8000614:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000618:	4013      	ands	r3, r2
 800061a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000624:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800062c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800062e:	4a04      	ldr	r2, [pc, #16]	; (8000640 <__NVIC_SetPriorityGrouping+0x44>)
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	60d3      	str	r3, [r2, #12]
}
 8000634:	bf00      	nop
 8000636:	3714      	adds	r7, #20
 8000638:	46bd      	mov	sp, r7
 800063a:	bc80      	pop	{r7}
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	e000ed00 	.word	0xe000ed00

08000644 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000648:	4b04      	ldr	r3, [pc, #16]	; (800065c <__NVIC_GetPriorityGrouping+0x18>)
 800064a:	68db      	ldr	r3, [r3, #12]
 800064c:	0a1b      	lsrs	r3, r3, #8
 800064e:	f003 0307 	and.w	r3, r3, #7
}
 8000652:	4618      	mov	r0, r3
 8000654:	46bd      	mov	sp, r7
 8000656:	bc80      	pop	{r7}
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	e000ed00 	.word	0xe000ed00

08000660 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800066a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066e:	2b00      	cmp	r3, #0
 8000670:	db0b      	blt.n	800068a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	f003 021f 	and.w	r2, r3, #31
 8000678:	4906      	ldr	r1, [pc, #24]	; (8000694 <__NVIC_EnableIRQ+0x34>)
 800067a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067e:	095b      	lsrs	r3, r3, #5
 8000680:	2001      	movs	r0, #1
 8000682:	fa00 f202 	lsl.w	r2, r0, r2
 8000686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800068a:	bf00      	nop
 800068c:	370c      	adds	r7, #12
 800068e:	46bd      	mov	sp, r7
 8000690:	bc80      	pop	{r7}
 8000692:	4770      	bx	lr
 8000694:	e000e100 	.word	0xe000e100

08000698 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	6039      	str	r1, [r7, #0]
 80006a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	db0a      	blt.n	80006c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	b2da      	uxtb	r2, r3
 80006b0:	490c      	ldr	r1, [pc, #48]	; (80006e4 <__NVIC_SetPriority+0x4c>)
 80006b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b6:	0112      	lsls	r2, r2, #4
 80006b8:	b2d2      	uxtb	r2, r2
 80006ba:	440b      	add	r3, r1
 80006bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006c0:	e00a      	b.n	80006d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	b2da      	uxtb	r2, r3
 80006c6:	4908      	ldr	r1, [pc, #32]	; (80006e8 <__NVIC_SetPriority+0x50>)
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	f003 030f 	and.w	r3, r3, #15
 80006ce:	3b04      	subs	r3, #4
 80006d0:	0112      	lsls	r2, r2, #4
 80006d2:	b2d2      	uxtb	r2, r2
 80006d4:	440b      	add	r3, r1
 80006d6:	761a      	strb	r2, [r3, #24]
}
 80006d8:	bf00      	nop
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	bc80      	pop	{r7}
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	e000e100 	.word	0xe000e100
 80006e8:	e000ed00 	.word	0xe000ed00

080006ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b089      	sub	sp, #36	; 0x24
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	60f8      	str	r0, [r7, #12]
 80006f4:	60b9      	str	r1, [r7, #8]
 80006f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	f003 0307 	and.w	r3, r3, #7
 80006fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000700:	69fb      	ldr	r3, [r7, #28]
 8000702:	f1c3 0307 	rsb	r3, r3, #7
 8000706:	2b04      	cmp	r3, #4
 8000708:	bf28      	it	cs
 800070a:	2304      	movcs	r3, #4
 800070c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	3304      	adds	r3, #4
 8000712:	2b06      	cmp	r3, #6
 8000714:	d902      	bls.n	800071c <NVIC_EncodePriority+0x30>
 8000716:	69fb      	ldr	r3, [r7, #28]
 8000718:	3b03      	subs	r3, #3
 800071a:	e000      	b.n	800071e <NVIC_EncodePriority+0x32>
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000720:	f04f 32ff 	mov.w	r2, #4294967295
 8000724:	69bb      	ldr	r3, [r7, #24]
 8000726:	fa02 f303 	lsl.w	r3, r2, r3
 800072a:	43da      	mvns	r2, r3
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	401a      	ands	r2, r3
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000734:	f04f 31ff 	mov.w	r1, #4294967295
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	fa01 f303 	lsl.w	r3, r1, r3
 800073e:	43d9      	mvns	r1, r3
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000744:	4313      	orrs	r3, r2
         );
}
 8000746:	4618      	mov	r0, r3
 8000748:	3724      	adds	r7, #36	; 0x24
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr

08000750 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	3b01      	subs	r3, #1
 800075c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000760:	d301      	bcc.n	8000766 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000762:	2301      	movs	r3, #1
 8000764:	e00f      	b.n	8000786 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000766:	4a0a      	ldr	r2, [pc, #40]	; (8000790 <SysTick_Config+0x40>)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	3b01      	subs	r3, #1
 800076c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800076e:	210f      	movs	r1, #15
 8000770:	f04f 30ff 	mov.w	r0, #4294967295
 8000774:	f7ff ff90 	bl	8000698 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000778:	4b05      	ldr	r3, [pc, #20]	; (8000790 <SysTick_Config+0x40>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800077e:	4b04      	ldr	r3, [pc, #16]	; (8000790 <SysTick_Config+0x40>)
 8000780:	2207      	movs	r2, #7
 8000782:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000784:	2300      	movs	r3, #0
}
 8000786:	4618      	mov	r0, r3
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	e000e010 	.word	0xe000e010

08000794 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f7ff ff2d 	bl	80005fc <__NVIC_SetPriorityGrouping>
}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b086      	sub	sp, #24
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	4603      	mov	r3, r0
 80007b2:	60b9      	str	r1, [r7, #8]
 80007b4:	607a      	str	r2, [r7, #4]
 80007b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007bc:	f7ff ff42 	bl	8000644 <__NVIC_GetPriorityGrouping>
 80007c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007c2:	687a      	ldr	r2, [r7, #4]
 80007c4:	68b9      	ldr	r1, [r7, #8]
 80007c6:	6978      	ldr	r0, [r7, #20]
 80007c8:	f7ff ff90 	bl	80006ec <NVIC_EncodePriority>
 80007cc:	4602      	mov	r2, r0
 80007ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007d2:	4611      	mov	r1, r2
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff ff5f 	bl	8000698 <__NVIC_SetPriority>
}
 80007da:	bf00      	nop
 80007dc:	3718      	adds	r7, #24
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b082      	sub	sp, #8
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	4603      	mov	r3, r0
 80007ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff ff35 	bl	8000660 <__NVIC_EnableIRQ>
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	b082      	sub	sp, #8
 8000802:	af00      	add	r7, sp, #0
 8000804:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f7ff ffa2 	bl	8000750 <SysTick_Config>
 800080c:	4603      	mov	r3, r0
}
 800080e:	4618      	mov	r0, r3
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
	...

08000818 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000818:	b480      	push	{r7}
 800081a:	b08b      	sub	sp, #44	; 0x2c
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
 8000820:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000822:	2300      	movs	r3, #0
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000826:	2300      	movs	r3, #0
 8000828:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800082a:	e127      	b.n	8000a7c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800082c:	2201      	movs	r2, #1
 800082e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000830:	fa02 f303 	lsl.w	r3, r2, r3
 8000834:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	69fa      	ldr	r2, [r7, #28]
 800083c:	4013      	ands	r3, r2
 800083e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000840:	69ba      	ldr	r2, [r7, #24]
 8000842:	69fb      	ldr	r3, [r7, #28]
 8000844:	429a      	cmp	r2, r3
 8000846:	f040 8116 	bne.w	8000a76 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	685b      	ldr	r3, [r3, #4]
 800084e:	2b12      	cmp	r3, #18
 8000850:	d034      	beq.n	80008bc <HAL_GPIO_Init+0xa4>
 8000852:	2b12      	cmp	r3, #18
 8000854:	d80d      	bhi.n	8000872 <HAL_GPIO_Init+0x5a>
 8000856:	2b02      	cmp	r3, #2
 8000858:	d02b      	beq.n	80008b2 <HAL_GPIO_Init+0x9a>
 800085a:	2b02      	cmp	r3, #2
 800085c:	d804      	bhi.n	8000868 <HAL_GPIO_Init+0x50>
 800085e:	2b00      	cmp	r3, #0
 8000860:	d031      	beq.n	80008c6 <HAL_GPIO_Init+0xae>
 8000862:	2b01      	cmp	r3, #1
 8000864:	d01c      	beq.n	80008a0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000866:	e048      	b.n	80008fa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000868:	2b03      	cmp	r3, #3
 800086a:	d043      	beq.n	80008f4 <HAL_GPIO_Init+0xdc>
 800086c:	2b11      	cmp	r3, #17
 800086e:	d01b      	beq.n	80008a8 <HAL_GPIO_Init+0x90>
          break;
 8000870:	e043      	b.n	80008fa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000872:	4a89      	ldr	r2, [pc, #548]	; (8000a98 <HAL_GPIO_Init+0x280>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d026      	beq.n	80008c6 <HAL_GPIO_Init+0xae>
 8000878:	4a87      	ldr	r2, [pc, #540]	; (8000a98 <HAL_GPIO_Init+0x280>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d806      	bhi.n	800088c <HAL_GPIO_Init+0x74>
 800087e:	4a87      	ldr	r2, [pc, #540]	; (8000a9c <HAL_GPIO_Init+0x284>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d020      	beq.n	80008c6 <HAL_GPIO_Init+0xae>
 8000884:	4a86      	ldr	r2, [pc, #536]	; (8000aa0 <HAL_GPIO_Init+0x288>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d01d      	beq.n	80008c6 <HAL_GPIO_Init+0xae>
          break;
 800088a:	e036      	b.n	80008fa <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800088c:	4a85      	ldr	r2, [pc, #532]	; (8000aa4 <HAL_GPIO_Init+0x28c>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d019      	beq.n	80008c6 <HAL_GPIO_Init+0xae>
 8000892:	4a85      	ldr	r2, [pc, #532]	; (8000aa8 <HAL_GPIO_Init+0x290>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d016      	beq.n	80008c6 <HAL_GPIO_Init+0xae>
 8000898:	4a84      	ldr	r2, [pc, #528]	; (8000aac <HAL_GPIO_Init+0x294>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d013      	beq.n	80008c6 <HAL_GPIO_Init+0xae>
          break;
 800089e:	e02c      	b.n	80008fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	68db      	ldr	r3, [r3, #12]
 80008a4:	623b      	str	r3, [r7, #32]
          break;
 80008a6:	e028      	b.n	80008fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	68db      	ldr	r3, [r3, #12]
 80008ac:	3304      	adds	r3, #4
 80008ae:	623b      	str	r3, [r7, #32]
          break;
 80008b0:	e023      	b.n	80008fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	68db      	ldr	r3, [r3, #12]
 80008b6:	3308      	adds	r3, #8
 80008b8:	623b      	str	r3, [r7, #32]
          break;
 80008ba:	e01e      	b.n	80008fa <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	68db      	ldr	r3, [r3, #12]
 80008c0:	330c      	adds	r3, #12
 80008c2:	623b      	str	r3, [r7, #32]
          break;
 80008c4:	e019      	b.n	80008fa <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	689b      	ldr	r3, [r3, #8]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d102      	bne.n	80008d4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80008ce:	2304      	movs	r3, #4
 80008d0:	623b      	str	r3, [r7, #32]
          break;
 80008d2:	e012      	b.n	80008fa <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	689b      	ldr	r3, [r3, #8]
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d105      	bne.n	80008e8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008dc:	2308      	movs	r3, #8
 80008de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	69fa      	ldr	r2, [r7, #28]
 80008e4:	611a      	str	r2, [r3, #16]
          break;
 80008e6:	e008      	b.n	80008fa <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008e8:	2308      	movs	r3, #8
 80008ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	69fa      	ldr	r2, [r7, #28]
 80008f0:	615a      	str	r2, [r3, #20]
          break;
 80008f2:	e002      	b.n	80008fa <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80008f4:	2300      	movs	r3, #0
 80008f6:	623b      	str	r3, [r7, #32]
          break;
 80008f8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80008fa:	69bb      	ldr	r3, [r7, #24]
 80008fc:	2bff      	cmp	r3, #255	; 0xff
 80008fe:	d801      	bhi.n	8000904 <HAL_GPIO_Init+0xec>
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	e001      	b.n	8000908 <HAL_GPIO_Init+0xf0>
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	3304      	adds	r3, #4
 8000908:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800090a:	69bb      	ldr	r3, [r7, #24]
 800090c:	2bff      	cmp	r3, #255	; 0xff
 800090e:	d802      	bhi.n	8000916 <HAL_GPIO_Init+0xfe>
 8000910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	e002      	b.n	800091c <HAL_GPIO_Init+0x104>
 8000916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000918:	3b08      	subs	r3, #8
 800091a:	009b      	lsls	r3, r3, #2
 800091c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	210f      	movs	r1, #15
 8000924:	693b      	ldr	r3, [r7, #16]
 8000926:	fa01 f303 	lsl.w	r3, r1, r3
 800092a:	43db      	mvns	r3, r3
 800092c:	401a      	ands	r2, r3
 800092e:	6a39      	ldr	r1, [r7, #32]
 8000930:	693b      	ldr	r3, [r7, #16]
 8000932:	fa01 f303 	lsl.w	r3, r1, r3
 8000936:	431a      	orrs	r2, r3
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000944:	2b00      	cmp	r3, #0
 8000946:	f000 8096 	beq.w	8000a76 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800094a:	4b59      	ldr	r3, [pc, #356]	; (8000ab0 <HAL_GPIO_Init+0x298>)
 800094c:	699b      	ldr	r3, [r3, #24]
 800094e:	4a58      	ldr	r2, [pc, #352]	; (8000ab0 <HAL_GPIO_Init+0x298>)
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	6193      	str	r3, [r2, #24]
 8000956:	4b56      	ldr	r3, [pc, #344]	; (8000ab0 <HAL_GPIO_Init+0x298>)
 8000958:	699b      	ldr	r3, [r3, #24]
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000962:	4a54      	ldr	r2, [pc, #336]	; (8000ab4 <HAL_GPIO_Init+0x29c>)
 8000964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000966:	089b      	lsrs	r3, r3, #2
 8000968:	3302      	adds	r3, #2
 800096a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800096e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000972:	f003 0303 	and.w	r3, r3, #3
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	220f      	movs	r2, #15
 800097a:	fa02 f303 	lsl.w	r3, r2, r3
 800097e:	43db      	mvns	r3, r3
 8000980:	68fa      	ldr	r2, [r7, #12]
 8000982:	4013      	ands	r3, r2
 8000984:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4a4b      	ldr	r2, [pc, #300]	; (8000ab8 <HAL_GPIO_Init+0x2a0>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d013      	beq.n	80009b6 <HAL_GPIO_Init+0x19e>
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4a4a      	ldr	r2, [pc, #296]	; (8000abc <HAL_GPIO_Init+0x2a4>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d00d      	beq.n	80009b2 <HAL_GPIO_Init+0x19a>
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4a49      	ldr	r2, [pc, #292]	; (8000ac0 <HAL_GPIO_Init+0x2a8>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d007      	beq.n	80009ae <HAL_GPIO_Init+0x196>
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4a48      	ldr	r2, [pc, #288]	; (8000ac4 <HAL_GPIO_Init+0x2ac>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d101      	bne.n	80009aa <HAL_GPIO_Init+0x192>
 80009a6:	2303      	movs	r3, #3
 80009a8:	e006      	b.n	80009b8 <HAL_GPIO_Init+0x1a0>
 80009aa:	2304      	movs	r3, #4
 80009ac:	e004      	b.n	80009b8 <HAL_GPIO_Init+0x1a0>
 80009ae:	2302      	movs	r3, #2
 80009b0:	e002      	b.n	80009b8 <HAL_GPIO_Init+0x1a0>
 80009b2:	2301      	movs	r3, #1
 80009b4:	e000      	b.n	80009b8 <HAL_GPIO_Init+0x1a0>
 80009b6:	2300      	movs	r3, #0
 80009b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009ba:	f002 0203 	and.w	r2, r2, #3
 80009be:	0092      	lsls	r2, r2, #2
 80009c0:	4093      	lsls	r3, r2
 80009c2:	68fa      	ldr	r2, [r7, #12]
 80009c4:	4313      	orrs	r3, r2
 80009c6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80009c8:	493a      	ldr	r1, [pc, #232]	; (8000ab4 <HAL_GPIO_Init+0x29c>)
 80009ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009cc:	089b      	lsrs	r3, r3, #2
 80009ce:	3302      	adds	r3, #2
 80009d0:	68fa      	ldr	r2, [r7, #12]
 80009d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d006      	beq.n	80009f0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80009e2:	4b39      	ldr	r3, [pc, #228]	; (8000ac8 <HAL_GPIO_Init+0x2b0>)
 80009e4:	681a      	ldr	r2, [r3, #0]
 80009e6:	4938      	ldr	r1, [pc, #224]	; (8000ac8 <HAL_GPIO_Init+0x2b0>)
 80009e8:	69bb      	ldr	r3, [r7, #24]
 80009ea:	4313      	orrs	r3, r2
 80009ec:	600b      	str	r3, [r1, #0]
 80009ee:	e006      	b.n	80009fe <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80009f0:	4b35      	ldr	r3, [pc, #212]	; (8000ac8 <HAL_GPIO_Init+0x2b0>)
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	69bb      	ldr	r3, [r7, #24]
 80009f6:	43db      	mvns	r3, r3
 80009f8:	4933      	ldr	r1, [pc, #204]	; (8000ac8 <HAL_GPIO_Init+0x2b0>)
 80009fa:	4013      	ands	r3, r2
 80009fc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d006      	beq.n	8000a18 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a0a:	4b2f      	ldr	r3, [pc, #188]	; (8000ac8 <HAL_GPIO_Init+0x2b0>)
 8000a0c:	685a      	ldr	r2, [r3, #4]
 8000a0e:	492e      	ldr	r1, [pc, #184]	; (8000ac8 <HAL_GPIO_Init+0x2b0>)
 8000a10:	69bb      	ldr	r3, [r7, #24]
 8000a12:	4313      	orrs	r3, r2
 8000a14:	604b      	str	r3, [r1, #4]
 8000a16:	e006      	b.n	8000a26 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a18:	4b2b      	ldr	r3, [pc, #172]	; (8000ac8 <HAL_GPIO_Init+0x2b0>)
 8000a1a:	685a      	ldr	r2, [r3, #4]
 8000a1c:	69bb      	ldr	r3, [r7, #24]
 8000a1e:	43db      	mvns	r3, r3
 8000a20:	4929      	ldr	r1, [pc, #164]	; (8000ac8 <HAL_GPIO_Init+0x2b0>)
 8000a22:	4013      	ands	r3, r2
 8000a24:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d006      	beq.n	8000a40 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a32:	4b25      	ldr	r3, [pc, #148]	; (8000ac8 <HAL_GPIO_Init+0x2b0>)
 8000a34:	689a      	ldr	r2, [r3, #8]
 8000a36:	4924      	ldr	r1, [pc, #144]	; (8000ac8 <HAL_GPIO_Init+0x2b0>)
 8000a38:	69bb      	ldr	r3, [r7, #24]
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	608b      	str	r3, [r1, #8]
 8000a3e:	e006      	b.n	8000a4e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a40:	4b21      	ldr	r3, [pc, #132]	; (8000ac8 <HAL_GPIO_Init+0x2b0>)
 8000a42:	689a      	ldr	r2, [r3, #8]
 8000a44:	69bb      	ldr	r3, [r7, #24]
 8000a46:	43db      	mvns	r3, r3
 8000a48:	491f      	ldr	r1, [pc, #124]	; (8000ac8 <HAL_GPIO_Init+0x2b0>)
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d006      	beq.n	8000a68 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a5a:	4b1b      	ldr	r3, [pc, #108]	; (8000ac8 <HAL_GPIO_Init+0x2b0>)
 8000a5c:	68da      	ldr	r2, [r3, #12]
 8000a5e:	491a      	ldr	r1, [pc, #104]	; (8000ac8 <HAL_GPIO_Init+0x2b0>)
 8000a60:	69bb      	ldr	r3, [r7, #24]
 8000a62:	4313      	orrs	r3, r2
 8000a64:	60cb      	str	r3, [r1, #12]
 8000a66:	e006      	b.n	8000a76 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a68:	4b17      	ldr	r3, [pc, #92]	; (8000ac8 <HAL_GPIO_Init+0x2b0>)
 8000a6a:	68da      	ldr	r2, [r3, #12]
 8000a6c:	69bb      	ldr	r3, [r7, #24]
 8000a6e:	43db      	mvns	r3, r3
 8000a70:	4915      	ldr	r1, [pc, #84]	; (8000ac8 <HAL_GPIO_Init+0x2b0>)
 8000a72:	4013      	ands	r3, r2
 8000a74:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a78:	3301      	adds	r3, #1
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a82:	fa22 f303 	lsr.w	r3, r2, r3
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	f47f aed0 	bne.w	800082c <HAL_GPIO_Init+0x14>
  }
}
 8000a8c:	bf00      	nop
 8000a8e:	372c      	adds	r7, #44	; 0x2c
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bc80      	pop	{r7}
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	10210000 	.word	0x10210000
 8000a9c:	10110000 	.word	0x10110000
 8000aa0:	10120000 	.word	0x10120000
 8000aa4:	10310000 	.word	0x10310000
 8000aa8:	10320000 	.word	0x10320000
 8000aac:	10220000 	.word	0x10220000
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	40010000 	.word	0x40010000
 8000ab8:	40010800 	.word	0x40010800
 8000abc:	40010c00 	.word	0x40010c00
 8000ac0:	40011000 	.word	0x40011000
 8000ac4:	40011400 	.word	0x40011400
 8000ac8:	40010400 	.word	0x40010400

08000acc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	460b      	mov	r3, r1
 8000ad6:	807b      	strh	r3, [r7, #2]
 8000ad8:	4613      	mov	r3, r2
 8000ada:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000adc:	787b      	ldrb	r3, [r7, #1]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d003      	beq.n	8000aea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ae2:	887a      	ldrh	r2, [r7, #2]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ae8:	e003      	b.n	8000af2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000aea:	887b      	ldrh	r3, [r7, #2]
 8000aec:	041a      	lsls	r2, r3, #16
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	611a      	str	r2, [r3, #16]
}
 8000af2:	bf00      	nop
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr

08000afc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	460b      	mov	r3, r1
 8000b06:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b0e:	887a      	ldrh	r2, [r7, #2]
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	4013      	ands	r3, r2
 8000b14:	041a      	lsls	r2, r3, #16
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	43d9      	mvns	r1, r3
 8000b1a:	887b      	ldrh	r3, [r7, #2]
 8000b1c:	400b      	ands	r3, r1
 8000b1e:	431a      	orrs	r2, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	611a      	str	r2, [r3, #16]
}
 8000b24:	bf00      	nop
 8000b26:	3714      	adds	r7, #20
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bc80      	pop	{r7}
 8000b2c:	4770      	bx	lr
	...

08000b30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000b3a:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b3c:	695a      	ldr	r2, [r3, #20]
 8000b3e:	88fb      	ldrh	r3, [r7, #6]
 8000b40:	4013      	ands	r3, r2
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d006      	beq.n	8000b54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000b46:	4a05      	ldr	r2, [pc, #20]	; (8000b5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b48:	88fb      	ldrh	r3, [r7, #6]
 8000b4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000b4c:	88fb      	ldrh	r3, [r7, #6]
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f000 f806 	bl	8000b60 <HAL_GPIO_EXTI_Callback>
  }
}
 8000b54:	bf00      	nop
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40010400 	.word	0x40010400

08000b60 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000b6a:	bf00      	nop
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr

08000b74 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b76:	b08b      	sub	sp, #44	; 0x2c
 8000b78:	af06      	add	r7, sp, #24
 8000b7a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d101      	bne.n	8000b86 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000b82:	2301      	movs	r3, #1
 8000b84:	e0fd      	b.n	8000d82 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d106      	bne.n	8000ba0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2200      	movs	r2, #0
 8000b96:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f005 fe18 	bl	80067d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2203      	movs	r2, #3
 8000ba4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4618      	mov	r0, r3
 8000bae:	f002 f82b 	bl	8002c08 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	603b      	str	r3, [r7, #0]
 8000bb8:	687e      	ldr	r6, [r7, #4]
 8000bba:	466d      	mov	r5, sp
 8000bbc:	f106 0410 	add.w	r4, r6, #16
 8000bc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bc4:	6823      	ldr	r3, [r4, #0]
 8000bc6:	602b      	str	r3, [r5, #0]
 8000bc8:	1d33      	adds	r3, r6, #4
 8000bca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bcc:	6838      	ldr	r0, [r7, #0]
 8000bce:	f001 fff5 	bl	8002bbc <USB_CoreInit>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d005      	beq.n	8000be4 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2202      	movs	r2, #2
 8000bdc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000be0:	2301      	movs	r3, #1
 8000be2:	e0ce      	b.n	8000d82 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2100      	movs	r1, #0
 8000bea:	4618      	mov	r0, r3
 8000bec:	f002 f826 	bl	8002c3c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	73fb      	strb	r3, [r7, #15]
 8000bf4:	e04c      	b.n	8000c90 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000bf6:	7bfb      	ldrb	r3, [r7, #15]
 8000bf8:	6879      	ldr	r1, [r7, #4]
 8000bfa:	1c5a      	adds	r2, r3, #1
 8000bfc:	4613      	mov	r3, r2
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	4413      	add	r3, r2
 8000c02:	00db      	lsls	r3, r3, #3
 8000c04:	440b      	add	r3, r1
 8000c06:	3301      	adds	r3, #1
 8000c08:	2201      	movs	r2, #1
 8000c0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000c0c:	7bfb      	ldrb	r3, [r7, #15]
 8000c0e:	6879      	ldr	r1, [r7, #4]
 8000c10:	1c5a      	adds	r2, r3, #1
 8000c12:	4613      	mov	r3, r2
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	4413      	add	r3, r2
 8000c18:	00db      	lsls	r3, r3, #3
 8000c1a:	440b      	add	r3, r1
 8000c1c:	7bfa      	ldrb	r2, [r7, #15]
 8000c1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000c20:	7bfa      	ldrb	r2, [r7, #15]
 8000c22:	7bfb      	ldrb	r3, [r7, #15]
 8000c24:	b298      	uxth	r0, r3
 8000c26:	6879      	ldr	r1, [r7, #4]
 8000c28:	4613      	mov	r3, r2
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	4413      	add	r3, r2
 8000c2e:	00db      	lsls	r3, r3, #3
 8000c30:	440b      	add	r3, r1
 8000c32:	3336      	adds	r3, #54	; 0x36
 8000c34:	4602      	mov	r2, r0
 8000c36:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000c38:	7bfb      	ldrb	r3, [r7, #15]
 8000c3a:	6879      	ldr	r1, [r7, #4]
 8000c3c:	1c5a      	adds	r2, r3, #1
 8000c3e:	4613      	mov	r3, r2
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	4413      	add	r3, r2
 8000c44:	00db      	lsls	r3, r3, #3
 8000c46:	440b      	add	r3, r1
 8000c48:	3303      	adds	r3, #3
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000c4e:	7bfa      	ldrb	r2, [r7, #15]
 8000c50:	6879      	ldr	r1, [r7, #4]
 8000c52:	4613      	mov	r3, r2
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	4413      	add	r3, r2
 8000c58:	00db      	lsls	r3, r3, #3
 8000c5a:	440b      	add	r3, r1
 8000c5c:	3338      	adds	r3, #56	; 0x38
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000c62:	7bfa      	ldrb	r2, [r7, #15]
 8000c64:	6879      	ldr	r1, [r7, #4]
 8000c66:	4613      	mov	r3, r2
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	4413      	add	r3, r2
 8000c6c:	00db      	lsls	r3, r3, #3
 8000c6e:	440b      	add	r3, r1
 8000c70:	333c      	adds	r3, #60	; 0x3c
 8000c72:	2200      	movs	r2, #0
 8000c74:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000c76:	7bfa      	ldrb	r2, [r7, #15]
 8000c78:	6879      	ldr	r1, [r7, #4]
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	4413      	add	r3, r2
 8000c80:	00db      	lsls	r3, r3, #3
 8000c82:	440b      	add	r3, r1
 8000c84:	3340      	adds	r3, #64	; 0x40
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c8a:	7bfb      	ldrb	r3, [r7, #15]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	73fb      	strb	r3, [r7, #15]
 8000c90:	7bfa      	ldrb	r2, [r7, #15]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d3ad      	bcc.n	8000bf6 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	73fb      	strb	r3, [r7, #15]
 8000c9e:	e044      	b.n	8000d2a <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000ca0:	7bfa      	ldrb	r2, [r7, #15]
 8000ca2:	6879      	ldr	r1, [r7, #4]
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	4413      	add	r3, r2
 8000caa:	00db      	lsls	r3, r3, #3
 8000cac:	440b      	add	r3, r1
 8000cae:	f203 1369 	addw	r3, r3, #361	; 0x169
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000cb6:	7bfa      	ldrb	r2, [r7, #15]
 8000cb8:	6879      	ldr	r1, [r7, #4]
 8000cba:	4613      	mov	r3, r2
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	4413      	add	r3, r2
 8000cc0:	00db      	lsls	r3, r3, #3
 8000cc2:	440b      	add	r3, r1
 8000cc4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000cc8:	7bfa      	ldrb	r2, [r7, #15]
 8000cca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000ccc:	7bfa      	ldrb	r2, [r7, #15]
 8000cce:	6879      	ldr	r1, [r7, #4]
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	4413      	add	r3, r2
 8000cd6:	00db      	lsls	r3, r3, #3
 8000cd8:	440b      	add	r3, r1
 8000cda:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8000cde:	2200      	movs	r2, #0
 8000ce0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000ce2:	7bfa      	ldrb	r2, [r7, #15]
 8000ce4:	6879      	ldr	r1, [r7, #4]
 8000ce6:	4613      	mov	r3, r2
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	4413      	add	r3, r2
 8000cec:	00db      	lsls	r3, r3, #3
 8000cee:	440b      	add	r3, r1
 8000cf0:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000cf8:	7bfa      	ldrb	r2, [r7, #15]
 8000cfa:	6879      	ldr	r1, [r7, #4]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	4413      	add	r3, r2
 8000d02:	00db      	lsls	r3, r3, #3
 8000d04:	440b      	add	r3, r1
 8000d06:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000d0e:	7bfa      	ldrb	r2, [r7, #15]
 8000d10:	6879      	ldr	r1, [r7, #4]
 8000d12:	4613      	mov	r3, r2
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	4413      	add	r3, r2
 8000d18:	00db      	lsls	r3, r3, #3
 8000d1a:	440b      	add	r3, r1
 8000d1c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d24:	7bfb      	ldrb	r3, [r7, #15]
 8000d26:	3301      	adds	r3, #1
 8000d28:	73fb      	strb	r3, [r7, #15]
 8000d2a:	7bfa      	ldrb	r2, [r7, #15]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d3b5      	bcc.n	8000ca0 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	603b      	str	r3, [r7, #0]
 8000d3a:	687e      	ldr	r6, [r7, #4]
 8000d3c:	466d      	mov	r5, sp
 8000d3e:	f106 0410 	add.w	r4, r6, #16
 8000d42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d46:	6823      	ldr	r3, [r4, #0]
 8000d48:	602b      	str	r3, [r5, #0]
 8000d4a:	1d33      	adds	r3, r6, #4
 8000d4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d4e:	6838      	ldr	r0, [r7, #0]
 8000d50:	f001 ff80 	bl	8002c54 <USB_DevInit>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d005      	beq.n	8000d66 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2202      	movs	r2, #2
 8000d5e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e00d      	b.n	8000d82 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2201      	movs	r2, #1
 8000d72:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f003 ff1a 	bl	8004bb4 <USB_DevDisconnect>

  return HAL_OK;
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3714      	adds	r7, #20
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d8a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b082      	sub	sp, #8
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d101      	bne.n	8000da0 <HAL_PCD_Start+0x16>
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	e016      	b.n	8000dce <HAL_PCD_Start+0x44>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2201      	movs	r2, #1
 8000da4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f001 ff15 	bl	8002bdc <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000db2:	2101      	movs	r1, #1
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	f005 ff7e 	bl	8006cb6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f003 feee 	bl	8004ba0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8000dcc:	2300      	movs	r3, #0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b088      	sub	sp, #32
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4618      	mov	r0, r3
 8000de4:	f003 fef0 	bl	8004bc8 <USB_ReadInterrupts>
 8000de8:	4603      	mov	r3, r0
 8000dea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000df2:	d102      	bne.n	8000dfa <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f000 fb61 	bl	80014bc <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f003 fee2 	bl	8004bc8 <USB_ReadInterrupts>
 8000e04:	4603      	mov	r3, r0
 8000e06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e0e:	d112      	bne.n	8000e36 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e18:	b29a      	uxth	r2, r3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e22:	b292      	uxth	r2, r2
 8000e24:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f005 fd4c 	bl	80068c6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000e2e:	2100      	movs	r1, #0
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f000 f925 	bl	8001080 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f003 fec4 	bl	8004bc8 <USB_ReadInterrupts>
 8000e40:	4603      	mov	r3, r0
 8000e42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000e4a:	d10b      	bne.n	8000e64 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e54:	b29a      	uxth	r2, r3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f003 fead 	bl	8004bc8 <USB_ReadInterrupts>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e78:	d10b      	bne.n	8000e92 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e82:	b29a      	uxth	r2, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000e8c:	b292      	uxth	r2, r2
 8000e8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f003 fe96 	bl	8004bc8 <USB_ReadInterrupts>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ea6:	d126      	bne.n	8000ef6 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000eb0:	b29a      	uxth	r2, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f022 0204 	bic.w	r2, r2, #4
 8000eba:	b292      	uxth	r2, r2
 8000ebc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000ec8:	b29a      	uxth	r2, r3
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f022 0208 	bic.w	r2, r2, #8
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f005 fd2d 	bl	8006938 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ee6:	b29a      	uxth	r2, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000ef0:	b292      	uxth	r2, r2
 8000ef2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f003 fe64 	bl	8004bc8 <USB_ReadInterrupts>
 8000f00:	4603      	mov	r3, r0
 8000f02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000f0a:	f040 8084 	bne.w	8001016 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8000f0e:	2300      	movs	r3, #0
 8000f10:	77fb      	strb	r3, [r7, #31]
 8000f12:	e011      	b.n	8000f38 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	461a      	mov	r2, r3
 8000f1a:	7ffb      	ldrb	r3, [r7, #31]
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	441a      	add	r2, r3
 8000f20:	7ffb      	ldrb	r3, [r7, #31]
 8000f22:	8812      	ldrh	r2, [r2, #0]
 8000f24:	b292      	uxth	r2, r2
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	f107 0120 	add.w	r1, r7, #32
 8000f2c:	440b      	add	r3, r1
 8000f2e:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8000f32:	7ffb      	ldrb	r3, [r7, #31]
 8000f34:	3301      	adds	r3, #1
 8000f36:	77fb      	strb	r3, [r7, #31]
 8000f38:	7ffb      	ldrb	r3, [r7, #31]
 8000f3a:	2b07      	cmp	r3, #7
 8000f3c:	d9ea      	bls.n	8000f14 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f46:	b29a      	uxth	r2, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f042 0201 	orr.w	r2, r2, #1
 8000f50:	b292      	uxth	r2, r2
 8000f52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f022 0201 	bic.w	r2, r2, #1
 8000f68:	b292      	uxth	r2, r2
 8000f6a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8000f6e:	bf00      	nop
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d0f6      	beq.n	8000f70 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f8a:	b29a      	uxth	r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f94:	b292      	uxth	r2, r2
 8000f96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	77fb      	strb	r3, [r7, #31]
 8000f9e:	e010      	b.n	8000fc2 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8000fa0:	7ffb      	ldrb	r3, [r7, #31]
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	6812      	ldr	r2, [r2, #0]
 8000fa6:	4611      	mov	r1, r2
 8000fa8:	7ffa      	ldrb	r2, [r7, #31]
 8000faa:	0092      	lsls	r2, r2, #2
 8000fac:	440a      	add	r2, r1
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	f107 0120 	add.w	r1, r7, #32
 8000fb4:	440b      	add	r3, r1
 8000fb6:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8000fba:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8000fbc:	7ffb      	ldrb	r3, [r7, #31]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	77fb      	strb	r3, [r7, #31]
 8000fc2:	7ffb      	ldrb	r3, [r7, #31]
 8000fc4:	2b07      	cmp	r3, #7
 8000fc6:	d9eb      	bls.n	8000fa0 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000fd0:	b29a      	uxth	r2, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f042 0208 	orr.w	r2, r2, #8
 8000fda:	b292      	uxth	r2, r2
 8000fdc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000ff2:	b292      	uxth	r2, r2
 8000ff4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001000:	b29a      	uxth	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f042 0204 	orr.w	r2, r2, #4
 800100a:	b292      	uxth	r2, r2
 800100c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f005 fc77 	bl	8006904 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4618      	mov	r0, r3
 800101c:	f003 fdd4 	bl	8004bc8 <USB_ReadInterrupts>
 8001020:	4603      	mov	r3, r0
 8001022:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001026:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800102a:	d10e      	bne.n	800104a <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001034:	b29a      	uxth	r2, r3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800103e:	b292      	uxth	r2, r2
 8001040:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f005 fc30 	bl	80068aa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4618      	mov	r0, r3
 8001050:	f003 fdba 	bl	8004bc8 <USB_ReadInterrupts>
 8001054:	4603      	mov	r3, r0
 8001056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800105a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800105e:	d10b      	bne.n	8001078 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001068:	b29a      	uxth	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001072:	b292      	uxth	r2, r2
 8001074:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001078:	bf00      	nop
 800107a:	3720      	adds	r7, #32
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	460b      	mov	r3, r1
 800108a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001092:	2b01      	cmp	r3, #1
 8001094:	d101      	bne.n	800109a <HAL_PCD_SetAddress+0x1a>
 8001096:	2302      	movs	r3, #2
 8001098:	e013      	b.n	80010c2 <HAL_PCD_SetAddress+0x42>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2201      	movs	r2, #1
 800109e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	78fa      	ldrb	r2, [r7, #3]
 80010a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	78fa      	ldrb	r2, [r7, #3]
 80010b0:	4611      	mov	r1, r2
 80010b2:	4618      	mov	r0, r3
 80010b4:	f003 fd61 	bl	8004b7a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80010c0:	2300      	movs	r3, #0
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b084      	sub	sp, #16
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
 80010d2:	4608      	mov	r0, r1
 80010d4:	4611      	mov	r1, r2
 80010d6:	461a      	mov	r2, r3
 80010d8:	4603      	mov	r3, r0
 80010da:	70fb      	strb	r3, [r7, #3]
 80010dc:	460b      	mov	r3, r1
 80010de:	803b      	strh	r3, [r7, #0]
 80010e0:	4613      	mov	r3, r2
 80010e2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80010e4:	2300      	movs	r3, #0
 80010e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80010e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	da0e      	bge.n	800110e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80010f0:	78fb      	ldrb	r3, [r7, #3]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	1c5a      	adds	r2, r3, #1
 80010f8:	4613      	mov	r3, r2
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	4413      	add	r3, r2
 80010fe:	00db      	lsls	r3, r3, #3
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	4413      	add	r3, r2
 8001104:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	2201      	movs	r2, #1
 800110a:	705a      	strb	r2, [r3, #1]
 800110c:	e00e      	b.n	800112c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800110e:	78fb      	ldrb	r3, [r7, #3]
 8001110:	f003 0207 	and.w	r2, r3, #7
 8001114:	4613      	mov	r3, r2
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	4413      	add	r3, r2
 800111a:	00db      	lsls	r3, r3, #3
 800111c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	4413      	add	r3, r2
 8001124:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	2200      	movs	r2, #0
 800112a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800112c:	78fb      	ldrb	r3, [r7, #3]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	b2da      	uxtb	r2, r3
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001138:	883a      	ldrh	r2, [r7, #0]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	78ba      	ldrb	r2, [r7, #2]
 8001142:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	785b      	ldrb	r3, [r3, #1]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d004      	beq.n	8001156 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	b29a      	uxth	r2, r3
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001156:	78bb      	ldrb	r3, [r7, #2]
 8001158:	2b02      	cmp	r3, #2
 800115a:	d102      	bne.n	8001162 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	2200      	movs	r2, #0
 8001160:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001168:	2b01      	cmp	r3, #1
 800116a:	d101      	bne.n	8001170 <HAL_PCD_EP_Open+0xa6>
 800116c:	2302      	movs	r3, #2
 800116e:	e00e      	b.n	800118e <HAL_PCD_EP_Open+0xc4>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2201      	movs	r2, #1
 8001174:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	68f9      	ldr	r1, [r7, #12]
 800117e:	4618      	mov	r0, r3
 8001180:	f001 fd88 	bl	8002c94 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2200      	movs	r2, #0
 8001188:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800118c:	7afb      	ldrb	r3, [r7, #11]
}
 800118e:	4618      	mov	r0, r3
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b084      	sub	sp, #16
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
 800119e:	460b      	mov	r3, r1
 80011a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80011a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	da0e      	bge.n	80011c8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80011aa:	78fb      	ldrb	r3, [r7, #3]
 80011ac:	f003 0307 	and.w	r3, r3, #7
 80011b0:	1c5a      	adds	r2, r3, #1
 80011b2:	4613      	mov	r3, r2
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	4413      	add	r3, r2
 80011b8:	00db      	lsls	r3, r3, #3
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	4413      	add	r3, r2
 80011be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	2201      	movs	r2, #1
 80011c4:	705a      	strb	r2, [r3, #1]
 80011c6:	e00e      	b.n	80011e6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80011c8:	78fb      	ldrb	r3, [r7, #3]
 80011ca:	f003 0207 	and.w	r2, r3, #7
 80011ce:	4613      	mov	r3, r2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	4413      	add	r3, r2
 80011d4:	00db      	lsls	r3, r3, #3
 80011d6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	4413      	add	r3, r2
 80011de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2200      	movs	r2, #0
 80011e4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80011e6:	78fb      	ldrb	r3, [r7, #3]
 80011e8:	f003 0307 	and.w	r3, r3, #7
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d101      	bne.n	8001200 <HAL_PCD_EP_Close+0x6a>
 80011fc:	2302      	movs	r3, #2
 80011fe:	e00e      	b.n	800121e <HAL_PCD_EP_Close+0x88>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2201      	movs	r2, #1
 8001204:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	68f9      	ldr	r1, [r7, #12]
 800120e:	4618      	mov	r0, r3
 8001210:	f002 f8aa 	bl	8003368 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2200      	movs	r2, #0
 8001218:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b086      	sub	sp, #24
 800122a:	af00      	add	r7, sp, #0
 800122c:	60f8      	str	r0, [r7, #12]
 800122e:	607a      	str	r2, [r7, #4]
 8001230:	603b      	str	r3, [r7, #0]
 8001232:	460b      	mov	r3, r1
 8001234:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001236:	7afb      	ldrb	r3, [r7, #11]
 8001238:	f003 0207 	and.w	r2, r3, #7
 800123c:	4613      	mov	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	4413      	add	r3, r2
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001248:	68fa      	ldr	r2, [r7, #12]
 800124a:	4413      	add	r3, r2
 800124c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	683a      	ldr	r2, [r7, #0]
 8001258:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	2200      	movs	r2, #0
 800125e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	2200      	movs	r2, #0
 8001264:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001266:	7afb      	ldrb	r3, [r7, #11]
 8001268:	f003 0307 	and.w	r3, r3, #7
 800126c:	b2da      	uxtb	r2, r3
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001272:	7afb      	ldrb	r3, [r7, #11]
 8001274:	f003 0307 	and.w	r3, r3, #7
 8001278:	2b00      	cmp	r3, #0
 800127a:	d106      	bne.n	800128a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	6979      	ldr	r1, [r7, #20]
 8001282:	4618      	mov	r0, r3
 8001284:	f002 fa5c 	bl	8003740 <USB_EPStartXfer>
 8001288:	e005      	b.n	8001296 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	6979      	ldr	r1, [r7, #20]
 8001290:	4618      	mov	r0, r3
 8001292:	f002 fa55 	bl	8003740 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001296:	2300      	movs	r3, #0
}
 8001298:	4618      	mov	r0, r3
 800129a:	3718      	adds	r7, #24
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	460b      	mov	r3, r1
 80012aa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80012ac:	78fb      	ldrb	r3, [r7, #3]
 80012ae:	f003 0207 	and.w	r2, r3, #7
 80012b2:	6879      	ldr	r1, [r7, #4]
 80012b4:	4613      	mov	r3, r2
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	4413      	add	r3, r2
 80012ba:	00db      	lsls	r3, r3, #3
 80012bc:	440b      	add	r3, r1
 80012be:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80012c2:	681b      	ldr	r3, [r3, #0]
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr

080012ce <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b086      	sub	sp, #24
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	60f8      	str	r0, [r7, #12]
 80012d6:	607a      	str	r2, [r7, #4]
 80012d8:	603b      	str	r3, [r7, #0]
 80012da:	460b      	mov	r3, r1
 80012dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012de:	7afb      	ldrb	r3, [r7, #11]
 80012e0:	f003 0307 	and.w	r3, r3, #7
 80012e4:	1c5a      	adds	r2, r3, #1
 80012e6:	4613      	mov	r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	4413      	add	r3, r2
 80012ec:	00db      	lsls	r3, r3, #3
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	4413      	add	r3, r2
 80012f2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	683a      	ldr	r2, [r7, #0]
 80012fe:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	2201      	movs	r2, #1
 8001304:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	683a      	ldr	r2, [r7, #0]
 800130c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	2200      	movs	r2, #0
 8001312:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	2201      	movs	r2, #1
 8001318:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800131a:	7afb      	ldrb	r3, [r7, #11]
 800131c:	f003 0307 	and.w	r3, r3, #7
 8001320:	b2da      	uxtb	r2, r3
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001326:	7afb      	ldrb	r3, [r7, #11]
 8001328:	f003 0307 	and.w	r3, r3, #7
 800132c:	2b00      	cmp	r3, #0
 800132e:	d106      	bne.n	800133e <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	6979      	ldr	r1, [r7, #20]
 8001336:	4618      	mov	r0, r3
 8001338:	f002 fa02 	bl	8003740 <USB_EPStartXfer>
 800133c:	e005      	b.n	800134a <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	6979      	ldr	r1, [r7, #20]
 8001344:	4618      	mov	r0, r3
 8001346:	f002 f9fb 	bl	8003740 <USB_EPStartXfer>
  }

  return HAL_OK;
 800134a:	2300      	movs	r3, #0
}
 800134c:	4618      	mov	r0, r3
 800134e:	3718      	adds	r7, #24
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b084      	sub	sp, #16
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	460b      	mov	r3, r1
 800135e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001360:	78fb      	ldrb	r3, [r7, #3]
 8001362:	f003 0207 	and.w	r2, r3, #7
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	429a      	cmp	r2, r3
 800136c:	d901      	bls.n	8001372 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e04c      	b.n	800140c <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001372:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001376:	2b00      	cmp	r3, #0
 8001378:	da0e      	bge.n	8001398 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800137a:	78fb      	ldrb	r3, [r7, #3]
 800137c:	f003 0307 	and.w	r3, r3, #7
 8001380:	1c5a      	adds	r2, r3, #1
 8001382:	4613      	mov	r3, r2
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	4413      	add	r3, r2
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	4413      	add	r3, r2
 800138e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2201      	movs	r2, #1
 8001394:	705a      	strb	r2, [r3, #1]
 8001396:	e00c      	b.n	80013b2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001398:	78fa      	ldrb	r2, [r7, #3]
 800139a:	4613      	mov	r3, r2
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	4413      	add	r3, r2
 80013a0:	00db      	lsls	r3, r3, #3
 80013a2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	4413      	add	r3, r2
 80013aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	2200      	movs	r2, #0
 80013b0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	2201      	movs	r2, #1
 80013b6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80013b8:	78fb      	ldrb	r3, [r7, #3]
 80013ba:	f003 0307 	and.w	r3, r3, #7
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d101      	bne.n	80013d2 <HAL_PCD_EP_SetStall+0x7e>
 80013ce:	2302      	movs	r3, #2
 80013d0:	e01c      	b.n	800140c <HAL_PCD_EP_SetStall+0xb8>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2201      	movs	r2, #1
 80013d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	68f9      	ldr	r1, [r7, #12]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f003 facd 	bl	8004980 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80013e6:	78fb      	ldrb	r3, [r7, #3]
 80013e8:	f003 0307 	and.w	r3, r3, #7
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d108      	bne.n	8001402 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80013fa:	4619      	mov	r1, r3
 80013fc:	4610      	mov	r0, r2
 80013fe:	f003 fbf2 	bl	8004be6 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800140a:	2300      	movs	r3, #0
}
 800140c:	4618      	mov	r0, r3
 800140e:	3710      	adds	r7, #16
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}

08001414 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	460b      	mov	r3, r1
 800141e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001420:	78fb      	ldrb	r3, [r7, #3]
 8001422:	f003 020f 	and.w	r2, r3, #15
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	429a      	cmp	r2, r3
 800142c:	d901      	bls.n	8001432 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e040      	b.n	80014b4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001432:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001436:	2b00      	cmp	r3, #0
 8001438:	da0e      	bge.n	8001458 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800143a:	78fb      	ldrb	r3, [r7, #3]
 800143c:	f003 0307 	and.w	r3, r3, #7
 8001440:	1c5a      	adds	r2, r3, #1
 8001442:	4613      	mov	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	4413      	add	r3, r2
 800144e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2201      	movs	r2, #1
 8001454:	705a      	strb	r2, [r3, #1]
 8001456:	e00e      	b.n	8001476 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001458:	78fb      	ldrb	r3, [r7, #3]
 800145a:	f003 0207 	and.w	r2, r3, #7
 800145e:	4613      	mov	r3, r2
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	4413      	add	r3, r2
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	4413      	add	r3, r2
 800146e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2200      	movs	r2, #0
 8001474:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	2200      	movs	r2, #0
 800147a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800147c:	78fb      	ldrb	r3, [r7, #3]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	b2da      	uxtb	r2, r3
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800148e:	2b01      	cmp	r3, #1
 8001490:	d101      	bne.n	8001496 <HAL_PCD_EP_ClrStall+0x82>
 8001492:	2302      	movs	r3, #2
 8001494:	e00e      	b.n	80014b4 <HAL_PCD_EP_ClrStall+0xa0>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2201      	movs	r2, #1
 800149a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	68f9      	ldr	r1, [r7, #12]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f003 fabb 	bl	8004a20 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2200      	movs	r2, #0
 80014ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80014b2:	2300      	movs	r3, #0
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3710      	adds	r7, #16
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08e      	sub	sp, #56	; 0x38
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80014c4:	e2df      	b.n	8001a86 <PCD_EP_ISR_Handler+0x5ca>
  {
    wIstr = hpcd->Instance->ISTR;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014ce:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80014d0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	f003 030f 	and.w	r3, r3, #15
 80014d8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 80014dc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	f040 8158 	bne.w	8001796 <PCD_EP_ISR_Handler+0x2da>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80014e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80014e8:	f003 0310 	and.w	r3, r3, #16
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d152      	bne.n	8001596 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	881b      	ldrh	r3, [r3, #0]
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80014fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001500:	81fb      	strh	r3, [r7, #14]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	89fb      	ldrh	r3, [r7, #14]
 8001508:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800150c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001510:	b29b      	uxth	r3, r3
 8001512:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3328      	adds	r3, #40	; 0x28
 8001518:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001522:	b29b      	uxth	r3, r3
 8001524:	461a      	mov	r2, r3
 8001526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	4413      	add	r3, r2
 800152e:	3302      	adds	r3, #2
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	6812      	ldr	r2, [r2, #0]
 8001536:	4413      	add	r3, r2
 8001538:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800153c:	881b      	ldrh	r3, [r3, #0]
 800153e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001544:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001548:	695a      	ldr	r2, [r3, #20]
 800154a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154c:	69db      	ldr	r3, [r3, #28]
 800154e:	441a      	add	r2, r3
 8001550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001552:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001554:	2100      	movs	r1, #0
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f005 f98d 	bl	8006876 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2b00      	cmp	r3, #0
 8001566:	f000 828e 	beq.w	8001a86 <PCD_EP_ISR_Handler+0x5ca>
 800156a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	2b00      	cmp	r3, #0
 8001570:	f040 8289 	bne.w	8001a86 <PCD_EP_ISR_Handler+0x5ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800157a:	b2db      	uxtb	r3, r3
 800157c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001580:	b2da      	uxtb	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	b292      	uxth	r2, r2
 8001588:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001594:	e277      	b.n	8001a86 <PCD_EP_ISR_Handler+0x5ca>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	881b      	ldrh	r3, [r3, #0]
 80015a4:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80015a6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80015a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d034      	beq.n	800161a <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	461a      	mov	r2, r3
 80015bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	4413      	add	r3, r2
 80015c4:	3306      	adds	r3, #6
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	6812      	ldr	r2, [r2, #0]
 80015cc:	4413      	add	r3, r2
 80015ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80015d2:	881b      	ldrh	r3, [r3, #0]
 80015d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80015d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015da:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6818      	ldr	r0, [r3, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80015e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80015ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ec:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	f003 fb48 	bl	8004c84 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	881b      	ldrh	r3, [r3, #0]
 80015fa:	b29a      	uxth	r2, r3
 80015fc:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001600:	4013      	ands	r3, r2
 8001602:	823b      	strh	r3, [r7, #16]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	8a3a      	ldrh	r2, [r7, #16]
 800160a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800160e:	b292      	uxth	r2, r2
 8001610:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f005 f902 	bl	800681c <HAL_PCD_SetupStageCallback>
 8001618:	e235      	b.n	8001a86 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800161a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800161e:	2b00      	cmp	r3, #0
 8001620:	f280 8231 	bge.w	8001a86 <PCD_EP_ISR_Handler+0x5ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	881b      	ldrh	r3, [r3, #0]
 800162a:	b29a      	uxth	r2, r3
 800162c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001630:	4013      	ands	r3, r2
 8001632:	83bb      	strh	r3, [r7, #28]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	8bba      	ldrh	r2, [r7, #28]
 800163a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800163e:	b292      	uxth	r2, r2
 8001640:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800164a:	b29b      	uxth	r3, r3
 800164c:	461a      	mov	r2, r3
 800164e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	4413      	add	r3, r2
 8001656:	3306      	adds	r3, #6
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	6812      	ldr	r2, [r2, #0]
 800165e:	4413      	add	r3, r2
 8001660:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001664:	881b      	ldrh	r3, [r3, #0]
 8001666:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800166a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800166e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d019      	beq.n	80016aa <PCD_EP_ISR_Handler+0x1ee>
 8001676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001678:	695b      	ldr	r3, [r3, #20]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d015      	beq.n	80016aa <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6818      	ldr	r0, [r3, #0]
 8001682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001684:	6959      	ldr	r1, [r3, #20]
 8001686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001688:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800168a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800168e:	b29b      	uxth	r3, r3
 8001690:	f003 faf8 	bl	8004c84 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001696:	695a      	ldr	r2, [r3, #20]
 8001698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169a:	69db      	ldr	r3, [r3, #28]
 800169c:	441a      	add	r2, r3
 800169e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80016a2:	2100      	movs	r1, #0
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f005 f8cb 	bl	8006840 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	61bb      	str	r3, [r7, #24]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	461a      	mov	r2, r3
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	4413      	add	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80016c8:	617b      	str	r3, [r7, #20]
 80016ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d112      	bne.n	80016f8 <PCD_EP_ISR_Handler+0x23c>
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	881b      	ldrh	r3, [r3, #0]
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80016dc:	b29a      	uxth	r2, r3
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	801a      	strh	r2, [r3, #0]
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	881b      	ldrh	r3, [r3, #0]
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80016ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80016f0:	b29a      	uxth	r2, r3
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	801a      	strh	r2, [r3, #0]
 80016f6:	e02f      	b.n	8001758 <PCD_EP_ISR_Handler+0x29c>
 80016f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fa:	691b      	ldr	r3, [r3, #16]
 80016fc:	2b3e      	cmp	r3, #62	; 0x3e
 80016fe:	d813      	bhi.n	8001728 <PCD_EP_ISR_Handler+0x26c>
 8001700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001702:	691b      	ldr	r3, [r3, #16]
 8001704:	085b      	lsrs	r3, r3, #1
 8001706:	633b      	str	r3, [r7, #48]	; 0x30
 8001708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170a:	691b      	ldr	r3, [r3, #16]
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	2b00      	cmp	r3, #0
 8001712:	d002      	beq.n	800171a <PCD_EP_ISR_Handler+0x25e>
 8001714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001716:	3301      	adds	r3, #1
 8001718:	633b      	str	r3, [r7, #48]	; 0x30
 800171a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800171c:	b29b      	uxth	r3, r3
 800171e:	029b      	lsls	r3, r3, #10
 8001720:	b29a      	uxth	r2, r3
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	801a      	strh	r2, [r3, #0]
 8001726:	e017      	b.n	8001758 <PCD_EP_ISR_Handler+0x29c>
 8001728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172a:	691b      	ldr	r3, [r3, #16]
 800172c:	095b      	lsrs	r3, r3, #5
 800172e:	633b      	str	r3, [r7, #48]	; 0x30
 8001730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001732:	691b      	ldr	r3, [r3, #16]
 8001734:	f003 031f 	and.w	r3, r3, #31
 8001738:	2b00      	cmp	r3, #0
 800173a:	d102      	bne.n	8001742 <PCD_EP_ISR_Handler+0x286>
 800173c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800173e:	3b01      	subs	r3, #1
 8001740:	633b      	str	r3, [r7, #48]	; 0x30
 8001742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001744:	b29b      	uxth	r3, r3
 8001746:	029b      	lsls	r3, r3, #10
 8001748:	b29b      	uxth	r3, r3
 800174a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800174e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001752:	b29a      	uxth	r2, r3
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	801a      	strh	r2, [r3, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	881b      	ldrh	r3, [r3, #0]
 800175e:	b29b      	uxth	r3, r3
 8001760:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001764:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001768:	827b      	strh	r3, [r7, #18]
 800176a:	8a7b      	ldrh	r3, [r7, #18]
 800176c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001770:	827b      	strh	r3, [r7, #18]
 8001772:	8a7b      	ldrh	r3, [r7, #18]
 8001774:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001778:	827b      	strh	r3, [r7, #18]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	8a7b      	ldrh	r3, [r7, #18]
 8001780:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001784:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001788:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800178c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001790:	b29b      	uxth	r3, r3
 8001792:	8013      	strh	r3, [r2, #0]
 8001794:	e177      	b.n	8001a86 <PCD_EP_ISR_Handler+0x5ca>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	461a      	mov	r2, r3
 800179c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4413      	add	r3, r2
 80017a4:	881b      	ldrh	r3, [r3, #0]
 80017a6:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80017a8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	f280 80ea 	bge.w	8001986 <PCD_EP_ISR_Handler+0x4ca>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	461a      	mov	r2, r3
 80017b8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	4413      	add	r3, r2
 80017c0:	881b      	ldrh	r3, [r3, #0]
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80017c8:	4013      	ands	r3, r2
 80017ca:	853b      	strh	r3, [r7, #40]	; 0x28
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	461a      	mov	r2, r3
 80017d2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4413      	add	r3, r2
 80017da:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80017dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017e0:	b292      	uxth	r2, r2
 80017e2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80017e4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80017e8:	4613      	mov	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4413      	add	r3, r2
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017f4:	687a      	ldr	r2, [r7, #4]
 80017f6:	4413      	add	r3, r2
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80017fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fc:	7b1b      	ldrb	r3, [r3, #12]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d122      	bne.n	8001848 <PCD_EP_ISR_Handler+0x38c>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800180a:	b29b      	uxth	r3, r3
 800180c:	461a      	mov	r2, r3
 800180e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	4413      	add	r3, r2
 8001816:	3306      	adds	r3, #6
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	6812      	ldr	r2, [r2, #0]
 800181e:	4413      	add	r3, r2
 8001820:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001824:	881b      	ldrh	r3, [r3, #0]
 8001826:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800182a:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800182c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800182e:	2b00      	cmp	r3, #0
 8001830:	f000 8087 	beq.w	8001942 <PCD_EP_ISR_Handler+0x486>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6818      	ldr	r0, [r3, #0]
 8001838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183a:	6959      	ldr	r1, [r3, #20]
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183e:	88da      	ldrh	r2, [r3, #6]
 8001840:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001842:	f003 fa1f 	bl	8004c84 <USB_ReadPMA>
 8001846:	e07c      	b.n	8001942 <PCD_EP_ISR_Handler+0x486>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184a:	78db      	ldrb	r3, [r3, #3]
 800184c:	2b02      	cmp	r3, #2
 800184e:	d108      	bne.n	8001862 <PCD_EP_ISR_Handler+0x3a6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001850:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001852:	461a      	mov	r2, r3
 8001854:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f000 f923 	bl	8001aa2 <HAL_PCD_EP_DB_Receive>
 800185c:	4603      	mov	r3, r0
 800185e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001860:	e06f      	b.n	8001942 <PCD_EP_ISR_Handler+0x486>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	461a      	mov	r2, r3
 8001868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4413      	add	r3, r2
 8001870:	881b      	ldrh	r3, [r3, #0]
 8001872:	b29b      	uxth	r3, r3
 8001874:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001878:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800187c:	847b      	strh	r3, [r7, #34]	; 0x22
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	461a      	mov	r2, r3
 8001884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	441a      	add	r2, r3
 800188c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800188e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001892:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001896:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800189a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800189e:	b29b      	uxth	r3, r3
 80018a0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	461a      	mov	r2, r3
 80018a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	4413      	add	r3, r2
 80018b0:	881b      	ldrh	r3, [r3, #0]
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d021      	beq.n	8001900 <PCD_EP_ISR_Handler+0x444>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	461a      	mov	r2, r3
 80018c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	4413      	add	r3, r2
 80018d0:	3302      	adds	r3, #2
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	6812      	ldr	r2, [r2, #0]
 80018d8:	4413      	add	r3, r2
 80018da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018de:	881b      	ldrh	r3, [r3, #0]
 80018e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018e4:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80018e6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d02a      	beq.n	8001942 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6818      	ldr	r0, [r3, #0]
 80018f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f2:	6959      	ldr	r1, [r3, #20]
 80018f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f6:	891a      	ldrh	r2, [r3, #8]
 80018f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80018fa:	f003 f9c3 	bl	8004c84 <USB_ReadPMA>
 80018fe:	e020      	b.n	8001942 <PCD_EP_ISR_Handler+0x486>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001908:	b29b      	uxth	r3, r3
 800190a:	461a      	mov	r2, r3
 800190c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	4413      	add	r3, r2
 8001914:	3306      	adds	r3, #6
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	6812      	ldr	r2, [r2, #0]
 800191c:	4413      	add	r3, r2
 800191e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001922:	881b      	ldrh	r3, [r3, #0]
 8001924:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001928:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800192a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800192c:	2b00      	cmp	r3, #0
 800192e:	d008      	beq.n	8001942 <PCD_EP_ISR_Handler+0x486>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6818      	ldr	r0, [r3, #0]
 8001934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001936:	6959      	ldr	r1, [r3, #20]
 8001938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193a:	895a      	ldrh	r2, [r3, #10]
 800193c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800193e:	f003 f9a1 	bl	8004c84 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001944:	69da      	ldr	r2, [r3, #28]
 8001946:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001948:	441a      	add	r2, r3
 800194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800194e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001950:	695a      	ldr	r2, [r3, #20]
 8001952:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001954:	441a      	add	r2, r3
 8001956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001958:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d004      	beq.n	800196c <PCD_EP_ISR_Handler+0x4b0>
 8001962:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	429a      	cmp	r2, r3
 800196a:	d206      	bcs.n	800197a <PCD_EP_ISR_Handler+0x4be>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	4619      	mov	r1, r3
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f004 ff64 	bl	8006840 <HAL_PCD_DataOutStageCallback>
 8001978:	e005      	b.n	8001986 <PCD_EP_ISR_Handler+0x4ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001980:	4618      	mov	r0, r3
 8001982:	f001 fedd 	bl	8003740 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001986:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800198c:	2b00      	cmp	r3, #0
 800198e:	d07a      	beq.n	8001a86 <PCD_EP_ISR_Handler+0x5ca>
      {
        ep = &hpcd->IN_ep[epindex];
 8001990:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001994:	1c5a      	adds	r2, r3, #1
 8001996:	4613      	mov	r3, r2
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	4413      	add	r3, r2
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	4413      	add	r3, r2
 80019a2:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	461a      	mov	r2, r3
 80019aa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4413      	add	r3, r2
 80019b2:	881b      	ldrh	r3, [r3, #0]
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80019ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019be:	843b      	strh	r3, [r7, #32]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	461a      	mov	r2, r3
 80019c6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	441a      	add	r2, r3
 80019ce:	8c3b      	ldrh	r3, [r7, #32]
 80019d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019d8:	b29b      	uxth	r3, r3
 80019da:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk transaction or Bulk Single Buffer Transaction */
        if ((ep->type != EP_TYPE_BULK) ||
 80019dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019de:	78db      	ldrb	r3, [r3, #3]
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d108      	bne.n	80019f6 <PCD_EP_ISR_Handler+0x53a>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80019e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e6:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type != EP_TYPE_BULK) ||
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d146      	bne.n	8001a7a <PCD_EP_ISR_Handler+0x5be>
            ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80019ec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80019ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d141      	bne.n	8001a7a <PCD_EP_ISR_Handler+0x5be>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	461a      	mov	r2, r3
 8001a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	4413      	add	r3, r2
 8001a0a:	3302      	adds	r3, #2
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	6812      	ldr	r2, [r2, #0]
 8001a12:	4413      	add	r3, r2
 8001a14:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a1e:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a22:	699a      	ldr	r2, [r3, #24]
 8001a24:	8bfb      	ldrh	r3, [r7, #30]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d906      	bls.n	8001a38 <PCD_EP_ISR_Handler+0x57c>
          {
            ep->xfer_len -= TxByteNbre;
 8001a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2c:	699a      	ldr	r2, [r3, #24]
 8001a2e:	8bfb      	ldrh	r3, [r7, #30]
 8001a30:	1ad2      	subs	r2, r2, r3
 8001a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a34:	619a      	str	r2, [r3, #24]
 8001a36:	e002      	b.n	8001a3e <PCD_EP_ISR_Handler+0x582>
          }
          else
          {
            ep->xfer_len = 0U;
 8001a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a40:	699b      	ldr	r3, [r3, #24]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d106      	bne.n	8001a54 <PCD_EP_ISR_Handler+0x598>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f004 ff12 	bl	8006876 <HAL_PCD_DataInStageCallback>
 8001a52:	e018      	b.n	8001a86 <PCD_EP_ISR_Handler+0x5ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a56:	695a      	ldr	r2, [r3, #20]
 8001a58:	8bfb      	ldrh	r3, [r7, #30]
 8001a5a:	441a      	add	r2, r3
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5e:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a62:	69da      	ldr	r2, [r3, #28]
 8001a64:	8bfb      	ldrh	r3, [r7, #30]
 8001a66:	441a      	add	r2, r3
 8001a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6a:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a72:	4618      	mov	r0, r3
 8001a74:	f001 fe64 	bl	8003740 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001a78:	e005      	b.n	8001a86 <PCD_EP_ISR_Handler+0x5ca>
          }
        }
        /* bulk in double buffer enable in case of transferLen> Ep_Mps */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001a7a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f000 f91b 	bl	8001cbc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	b21b      	sxth	r3, r3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f6ff ad17 	blt.w	80014c6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3738      	adds	r7, #56	; 0x38
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b088      	sub	sp, #32
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	60f8      	str	r0, [r7, #12]
 8001aaa:	60b9      	str	r1, [r7, #8]
 8001aac:	4613      	mov	r3, r2
 8001aae:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001ab0:	88fb      	ldrh	r3, [r7, #6]
 8001ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d07e      	beq.n	8001bb8 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	4413      	add	r3, r2
 8001ace:	3302      	adds	r3, #2
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	6812      	ldr	r2, [r2, #0]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001adc:	881b      	ldrh	r3, [r3, #0]
 8001ade:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ae2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	699a      	ldr	r2, [r3, #24]
 8001ae8:	8b7b      	ldrh	r3, [r7, #26]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d306      	bcc.n	8001afc <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	699a      	ldr	r2, [r3, #24]
 8001af2:	8b7b      	ldrh	r3, [r7, #26]
 8001af4:	1ad2      	subs	r2, r2, r3
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	619a      	str	r2, [r3, #24]
 8001afa:	e002      	b.n	8001b02 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	2200      	movs	r2, #0
 8001b00:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d123      	bne.n	8001b52 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	4413      	add	r3, r2
 8001b18:	881b      	ldrh	r3, [r3, #0]
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b24:	833b      	strh	r3, [r7, #24]
 8001b26:	8b3b      	ldrh	r3, [r7, #24]
 8001b28:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001b2c:	833b      	strh	r3, [r7, #24]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	461a      	mov	r2, r3
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	441a      	add	r2, r3
 8001b3c:	8b3b      	ldrh	r3, [r7, #24]
 8001b3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001b52:	88fb      	ldrh	r3, [r7, #6]
 8001b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d01f      	beq.n	8001b9c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	461a      	mov	r2, r3
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	4413      	add	r3, r2
 8001b6a:	881b      	ldrh	r3, [r3, #0]
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b76:	82fb      	strh	r3, [r7, #22]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	441a      	add	r2, r3
 8001b86:	8afb      	ldrh	r3, [r7, #22]
 8001b88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001b8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001b90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b94:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001b9c:	8b7b      	ldrh	r3, [r7, #26]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f000 8087 	beq.w	8001cb2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6818      	ldr	r0, [r3, #0]
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	6959      	ldr	r1, [r3, #20]
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	891a      	ldrh	r2, [r3, #8]
 8001bb0:	8b7b      	ldrh	r3, [r7, #26]
 8001bb2:	f003 f867 	bl	8004c84 <USB_ReadPMA>
 8001bb6:	e07c      	b.n	8001cb2 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	4413      	add	r3, r2
 8001bcc:	3306      	adds	r3, #6
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	68fa      	ldr	r2, [r7, #12]
 8001bd2:	6812      	ldr	r2, [r2, #0]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bda:	881b      	ldrh	r3, [r3, #0]
 8001bdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001be0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	699a      	ldr	r2, [r3, #24]
 8001be6:	8b7b      	ldrh	r3, [r7, #26]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d306      	bcc.n	8001bfa <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	699a      	ldr	r2, [r3, #24]
 8001bf0:	8b7b      	ldrh	r3, [r7, #26]
 8001bf2:	1ad2      	subs	r2, r2, r3
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	619a      	str	r2, [r3, #24]
 8001bf8:	e002      	b.n	8001c00 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d123      	bne.n	8001c50 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	4413      	add	r3, r2
 8001c16:	881b      	ldrh	r3, [r3, #0]
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c22:	83fb      	strh	r3, [r7, #30]
 8001c24:	8bfb      	ldrh	r3, [r7, #30]
 8001c26:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001c2a:	83fb      	strh	r3, [r7, #30]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	461a      	mov	r2, r3
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	441a      	add	r2, r3
 8001c3a:	8bfb      	ldrh	r3, [r7, #30]
 8001c3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8001c50:	88fb      	ldrh	r3, [r7, #6]
 8001c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d11f      	bne.n	8001c9a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	461a      	mov	r2, r3
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	4413      	add	r3, r2
 8001c68:	881b      	ldrh	r3, [r3, #0]
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c74:	83bb      	strh	r3, [r7, #28]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	441a      	add	r2, r3
 8001c84:	8bbb      	ldrh	r3, [r7, #28]
 8001c86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c92:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8001c9a:	8b7b      	ldrh	r3, [r7, #26]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d008      	beq.n	8001cb2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6818      	ldr	r0, [r3, #0]
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	6959      	ldr	r1, [r3, #20]
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	895a      	ldrh	r2, [r3, #10]
 8001cac:	8b7b      	ldrh	r3, [r7, #26]
 8001cae:	f002 ffe9 	bl	8004c84 <USB_ReadPMA>
    }
  }

  return count;
 8001cb2:	8b7b      	ldrh	r3, [r7, #26]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3720      	adds	r7, #32
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b092      	sub	sp, #72	; 0x48
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8001cca:	88fb      	ldrh	r3, [r7, #6]
 8001ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f000 8132 	beq.w	8001f3a <HAL_PCD_EP_DB_Transmit+0x27e>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	4413      	add	r3, r2
 8001cea:	3302      	adds	r3, #2
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	68fa      	ldr	r2, [r7, #12]
 8001cf0:	6812      	ldr	r2, [r2, #0]
 8001cf2:	4413      	add	r3, r2
 8001cf4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cf8:	881b      	ldrh	r3, [r3, #0]
 8001cfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cfe:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len > TxByteNbre)
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	699a      	ldr	r2, [r3, #24]
 8001d04:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d906      	bls.n	8001d18 <HAL_PCD_EP_DB_Transmit+0x5c>
    {
      ep->xfer_len -= TxByteNbre;
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	699a      	ldr	r2, [r3, #24]
 8001d0e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001d10:	1ad2      	subs	r2, r2, r3
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	619a      	str	r2, [r3, #24]
 8001d16:	e002      	b.n	8001d1e <HAL_PCD_EP_DB_Transmit+0x62>
    }
    else
    {
      ep->xfer_len = 0U;
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d12c      	bne.n	8001d80 <HAL_PCD_EP_DB_Transmit+0xc4>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	68f8      	ldr	r0, [r7, #12]
 8001d2e:	f004 fda2 	bl	8006876 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001d32:	88fb      	ldrh	r3, [r7, #6]
 8001d34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	f000 822f 	beq.w	800219c <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	461a      	mov	r2, r3
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	4413      	add	r3, r2
 8001d4c:	881b      	ldrh	r3, [r3, #0]
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d58:	827b      	strh	r3, [r7, #18]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	461a      	mov	r2, r3
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	441a      	add	r2, r3
 8001d68:	8a7b      	ldrh	r3, [r7, #18]
 8001d6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	8013      	strh	r3, [r2, #0]
 8001d7e:	e20d      	b.n	800219c <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001d80:	88fb      	ldrh	r3, [r7, #6]
 8001d82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d01f      	beq.n	8001dca <HAL_PCD_EP_DB_Transmit+0x10e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	4413      	add	r3, r2
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001da0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001da4:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	461a      	mov	r2, r3
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	441a      	add	r2, r3
 8001db4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001db6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001dba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001dbe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001dc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	f040 81e3 	bne.w	800219c <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	695a      	ldr	r2, [r3, #20]
 8001dda:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ddc:	441a      	add	r2, r3
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	69da      	ldr	r2, [r3, #28]
 8001de6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001de8:	441a      	add	r2, r3
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	6a1a      	ldr	r2, [r3, #32]
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d309      	bcc.n	8001e0e <HAL_PCD_EP_DB_Transmit+0x152>
        {
          len = ep->maxpacket;
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	6a1a      	ldr	r2, [r3, #32]
 8001e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e06:	1ad2      	subs	r2, r2, r3
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	621a      	str	r2, [r3, #32]
 8001e0c:	e014      	b.n	8001e38 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else if (ep->xfer_len_db == 0U)
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	6a1b      	ldr	r3, [r3, #32]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d106      	bne.n	8001e24 <HAL_PCD_EP_DB_Transmit+0x168>
        {
          len = TxByteNbre;
 8001e16:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e18:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001e22:	e009      	b.n	8001e38 <HAL_PCD_EP_DB_Transmit+0x17c>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	2200      	movs	r2, #0
 8001e36:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	785b      	ldrb	r3, [r3, #1]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d155      	bne.n	8001eec <HAL_PCD_EP_DB_Transmit+0x230>
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	61bb      	str	r3, [r7, #24]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	461a      	mov	r2, r3
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	4413      	add	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	011a      	lsls	r2, r3, #4
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	4413      	add	r3, r2
 8001e62:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001e66:	617b      	str	r3, [r7, #20]
 8001e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d112      	bne.n	8001e94 <HAL_PCD_EP_DB_Transmit+0x1d8>
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	881b      	ldrh	r3, [r3, #0]
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	801a      	strh	r2, [r3, #0]
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	881b      	ldrh	r3, [r3, #0]
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e8c:	b29a      	uxth	r2, r3
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	801a      	strh	r2, [r3, #0]
 8001e92:	e047      	b.n	8001f24 <HAL_PCD_EP_DB_Transmit+0x268>
 8001e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e96:	2b3e      	cmp	r3, #62	; 0x3e
 8001e98:	d811      	bhi.n	8001ebe <HAL_PCD_EP_DB_Transmit+0x202>
 8001e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e9c:	085b      	lsrs	r3, r3, #1
 8001e9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d002      	beq.n	8001eb0 <HAL_PCD_EP_DB_Transmit+0x1f4>
 8001eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eac:	3301      	adds	r3, #1
 8001eae:	62bb      	str	r3, [r7, #40]	; 0x28
 8001eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	029b      	lsls	r3, r3, #10
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	801a      	strh	r2, [r3, #0]
 8001ebc:	e032      	b.n	8001f24 <HAL_PCD_EP_DB_Transmit+0x268>
 8001ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ec0:	095b      	lsrs	r3, r3, #5
 8001ec2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ec6:	f003 031f 	and.w	r3, r3, #31
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d102      	bne.n	8001ed4 <HAL_PCD_EP_DB_Transmit+0x218>
 8001ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	029b      	lsls	r3, r3, #10
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ee0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	801a      	strh	r2, [r3, #0]
 8001eea:	e01b      	b.n	8001f24 <HAL_PCD_EP_DB_Transmit+0x268>
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	785b      	ldrb	r3, [r3, #1]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d117      	bne.n	8001f24 <HAL_PCD_EP_DB_Transmit+0x268>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	623b      	str	r3, [r7, #32]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	461a      	mov	r2, r3
 8001f06:	6a3b      	ldr	r3, [r7, #32]
 8001f08:	4413      	add	r3, r2
 8001f0a:	623b      	str	r3, [r7, #32]
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	011a      	lsls	r2, r3, #4
 8001f12:	6a3b      	ldr	r3, [r7, #32]
 8001f14:	4413      	add	r3, r2
 8001f16:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8001f1a:	61fb      	str	r3, [r7, #28]
 8001f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6818      	ldr	r0, [r3, #0]
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	6959      	ldr	r1, [r3, #20]
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	891a      	ldrh	r2, [r3, #8]
 8001f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	f002 fe62 	bl	8004bfc <USB_WritePMA>
 8001f38:	e130      	b.n	800219c <HAL_PCD_EP_DB_Transmit+0x4e0>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	461a      	mov	r2, r3
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	4413      	add	r3, r2
 8001f4e:	3306      	adds	r3, #6
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	6812      	ldr	r2, [r2, #0]
 8001f56:	4413      	add	r3, r2
 8001f58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f5c:	881b      	ldrh	r3, [r3, #0]
 8001f5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f62:	85fb      	strh	r3, [r7, #46]	; 0x2e

    if (ep->xfer_len >= TxByteNbre)
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	699a      	ldr	r2, [r3, #24]
 8001f68:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d306      	bcc.n	8001f7c <HAL_PCD_EP_DB_Transmit+0x2c0>
    {
      ep->xfer_len -= TxByteNbre;
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	699a      	ldr	r2, [r3, #24]
 8001f72:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001f74:	1ad2      	subs	r2, r2, r3
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	619a      	str	r2, [r3, #24]
 8001f7a:	e002      	b.n	8001f82 <HAL_PCD_EP_DB_Transmit+0x2c6>
    }
    else
    {
      ep->xfer_len = 0U;
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d12c      	bne.n	8001fe4 <HAL_PCD_EP_DB_Transmit+0x328>
    {
      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	4619      	mov	r1, r3
 8001f90:	68f8      	ldr	r0, [r7, #12]
 8001f92:	f004 fc70 	bl	8006876 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /*need to Free USB Buff*/
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001f96:	88fb      	ldrh	r3, [r7, #6]
 8001f98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f040 80fd 	bne.w	800219c <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4413      	add	r3, r2
 8001fb0:	881b      	ldrh	r3, [r3, #0]
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001fb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fbc:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	441a      	add	r2, r3
 8001fcc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001fce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001fd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001fd6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	8013      	strh	r3, [r2, #0]
 8001fe2:	e0db      	b.n	800219c <HAL_PCD_EP_DB_Transmit+0x4e0>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8001fe4:	88fb      	ldrh	r3, [r7, #6]
 8001fe6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d11f      	bne.n	800202e <HAL_PCD_EP_DB_Transmit+0x372>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4413      	add	r3, r2
 8001ffc:	881b      	ldrh	r3, [r3, #0]
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002004:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002008:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	461a      	mov	r2, r3
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	441a      	add	r2, r3
 8002018:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800201a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800201e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002022:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800202a:	b29b      	uxth	r3, r3
 800202c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002034:	2b01      	cmp	r3, #1
 8002036:	f040 80b1 	bne.w	800219c <HAL_PCD_EP_DB_Transmit+0x4e0>
      {
        ep->xfer_buff += TxByteNbre;
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	695a      	ldr	r2, [r3, #20]
 800203e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002040:	441a      	add	r2, r3
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	69da      	ldr	r2, [r3, #28]
 800204a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800204c:	441a      	add	r2, r3
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	6a1a      	ldr	r2, [r3, #32]
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	429a      	cmp	r2, r3
 800205c:	d309      	bcc.n	8002072 <HAL_PCD_EP_DB_Transmit+0x3b6>
        {
          len = ep->maxpacket;
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db -= len;
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	6a1a      	ldr	r2, [r3, #32]
 8002068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800206a:	1ad2      	subs	r2, r2, r3
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	621a      	str	r2, [r3, #32]
 8002070:	e014      	b.n	800209c <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else if (ep->xfer_len_db == 0U)
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	6a1b      	ldr	r3, [r3, #32]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d106      	bne.n	8002088 <HAL_PCD_EP_DB_Transmit+0x3cc>
        {
          len = TxByteNbre;
 800207a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800207c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_fill_db = 0U;
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002086:	e009      	b.n	800209c <HAL_PCD_EP_DB_Transmit+0x3e0>
        }
        else
        {
          len = ep->xfer_len_db;
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	6a1b      	ldr	r3, [r3, #32]
 800208c:	63bb      	str	r3, [r7, #56]	; 0x38
          ep->xfer_len_db = 0U;
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	2200      	movs	r2, #0
 8002092:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	637b      	str	r3, [r7, #52]	; 0x34
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	785b      	ldrb	r3, [r3, #1]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d155      	bne.n	8002156 <HAL_PCD_EP_DB_Transmit+0x49a>
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	647b      	str	r3, [r7, #68]	; 0x44
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	461a      	mov	r2, r3
 80020bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020be:	4413      	add	r3, r2
 80020c0:	647b      	str	r3, [r7, #68]	; 0x44
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	011a      	lsls	r2, r3, #4
 80020c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020ca:	4413      	add	r3, r2
 80020cc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80020d0:	643b      	str	r3, [r7, #64]	; 0x40
 80020d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d112      	bne.n	80020fe <HAL_PCD_EP_DB_Transmit+0x442>
 80020d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020da:	881b      	ldrh	r3, [r3, #0]
 80020dc:	b29b      	uxth	r3, r3
 80020de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020e6:	801a      	strh	r2, [r3, #0]
 80020e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020ea:	881b      	ldrh	r3, [r3, #0]
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020fa:	801a      	strh	r2, [r3, #0]
 80020fc:	e044      	b.n	8002188 <HAL_PCD_EP_DB_Transmit+0x4cc>
 80020fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002100:	2b3e      	cmp	r3, #62	; 0x3e
 8002102:	d811      	bhi.n	8002128 <HAL_PCD_EP_DB_Transmit+0x46c>
 8002104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002106:	085b      	lsrs	r3, r3, #1
 8002108:	63fb      	str	r3, [r7, #60]	; 0x3c
 800210a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	2b00      	cmp	r3, #0
 8002112:	d002      	beq.n	800211a <HAL_PCD_EP_DB_Transmit+0x45e>
 8002114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002116:	3301      	adds	r3, #1
 8002118:	63fb      	str	r3, [r7, #60]	; 0x3c
 800211a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800211c:	b29b      	uxth	r3, r3
 800211e:	029b      	lsls	r3, r3, #10
 8002120:	b29a      	uxth	r2, r3
 8002122:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002124:	801a      	strh	r2, [r3, #0]
 8002126:	e02f      	b.n	8002188 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800212a:	095b      	lsrs	r3, r3, #5
 800212c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800212e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002130:	f003 031f 	and.w	r3, r3, #31
 8002134:	2b00      	cmp	r3, #0
 8002136:	d102      	bne.n	800213e <HAL_PCD_EP_DB_Transmit+0x482>
 8002138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800213a:	3b01      	subs	r3, #1
 800213c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800213e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002140:	b29b      	uxth	r3, r3
 8002142:	029b      	lsls	r3, r3, #10
 8002144:	b29b      	uxth	r3, r3
 8002146:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800214a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800214e:	b29a      	uxth	r2, r3
 8002150:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002152:	801a      	strh	r2, [r3, #0]
 8002154:	e018      	b.n	8002188 <HAL_PCD_EP_DB_Transmit+0x4cc>
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	785b      	ldrb	r3, [r3, #1]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d114      	bne.n	8002188 <HAL_PCD_EP_DB_Transmit+0x4cc>
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002166:	b29b      	uxth	r3, r3
 8002168:	461a      	mov	r2, r3
 800216a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800216c:	4413      	add	r3, r2
 800216e:	637b      	str	r3, [r7, #52]	; 0x34
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	011a      	lsls	r2, r3, #4
 8002176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002178:	4413      	add	r3, r2
 800217a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800217e:	633b      	str	r3, [r7, #48]	; 0x30
 8002180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002182:	b29a      	uxth	r2, r3
 8002184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002186:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6818      	ldr	r0, [r3, #0]
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	6959      	ldr	r1, [r3, #20]
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	895a      	ldrh	r2, [r3, #10]
 8002194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002196:	b29b      	uxth	r3, r3
 8002198:	f002 fd30 	bl	8004bfc <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	461a      	mov	r2, r3
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	4413      	add	r3, r2
 80021aa:	881b      	ldrh	r3, [r3, #0]
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80021b6:	823b      	strh	r3, [r7, #16]
 80021b8:	8a3b      	ldrh	r3, [r7, #16]
 80021ba:	f083 0310 	eor.w	r3, r3, #16
 80021be:	823b      	strh	r3, [r7, #16]
 80021c0:	8a3b      	ldrh	r3, [r7, #16]
 80021c2:	f083 0320 	eor.w	r3, r3, #32
 80021c6:	823b      	strh	r3, [r7, #16]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	461a      	mov	r2, r3
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	441a      	add	r2, r3
 80021d6:	8a3b      	ldrh	r3, [r7, #16]
 80021d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3748      	adds	r7, #72	; 0x48
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80021f6:	b480      	push	{r7}
 80021f8:	b087      	sub	sp, #28
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	60f8      	str	r0, [r7, #12]
 80021fe:	607b      	str	r3, [r7, #4]
 8002200:	460b      	mov	r3, r1
 8002202:	817b      	strh	r3, [r7, #10]
 8002204:	4613      	mov	r3, r2
 8002206:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002208:	897b      	ldrh	r3, [r7, #10]
 800220a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800220e:	b29b      	uxth	r3, r3
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00b      	beq.n	800222c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002214:	897b      	ldrh	r3, [r7, #10]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	1c5a      	adds	r2, r3, #1
 800221c:	4613      	mov	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4413      	add	r3, r2
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	68fa      	ldr	r2, [r7, #12]
 8002226:	4413      	add	r3, r2
 8002228:	617b      	str	r3, [r7, #20]
 800222a:	e009      	b.n	8002240 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800222c:	897a      	ldrh	r2, [r7, #10]
 800222e:	4613      	mov	r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	4413      	add	r3, r2
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	4413      	add	r3, r2
 800223e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002240:	893b      	ldrh	r3, [r7, #8]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d107      	bne.n	8002256 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	2200      	movs	r2, #0
 800224a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	b29a      	uxth	r2, r3
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	80da      	strh	r2, [r3, #6]
 8002254:	e00b      	b.n	800226e <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	2201      	movs	r2, #1
 800225a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	b29a      	uxth	r2, r3
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	0c1b      	lsrs	r3, r3, #16
 8002268:	b29a      	uxth	r2, r3
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	371c      	adds	r7, #28
 8002274:	46bd      	mov	sp, r7
 8002276:	bc80      	pop	{r7}
 8002278:	4770      	bx	lr
	...

0800227c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e26c      	b.n	8002768 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b00      	cmp	r3, #0
 8002298:	f000 8087 	beq.w	80023aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800229c:	4b92      	ldr	r3, [pc, #584]	; (80024e8 <HAL_RCC_OscConfig+0x26c>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f003 030c 	and.w	r3, r3, #12
 80022a4:	2b04      	cmp	r3, #4
 80022a6:	d00c      	beq.n	80022c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022a8:	4b8f      	ldr	r3, [pc, #572]	; (80024e8 <HAL_RCC_OscConfig+0x26c>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f003 030c 	and.w	r3, r3, #12
 80022b0:	2b08      	cmp	r3, #8
 80022b2:	d112      	bne.n	80022da <HAL_RCC_OscConfig+0x5e>
 80022b4:	4b8c      	ldr	r3, [pc, #560]	; (80024e8 <HAL_RCC_OscConfig+0x26c>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022c0:	d10b      	bne.n	80022da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c2:	4b89      	ldr	r3, [pc, #548]	; (80024e8 <HAL_RCC_OscConfig+0x26c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d06c      	beq.n	80023a8 <HAL_RCC_OscConfig+0x12c>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d168      	bne.n	80023a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e246      	b.n	8002768 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022e2:	d106      	bne.n	80022f2 <HAL_RCC_OscConfig+0x76>
 80022e4:	4b80      	ldr	r3, [pc, #512]	; (80024e8 <HAL_RCC_OscConfig+0x26c>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a7f      	ldr	r2, [pc, #508]	; (80024e8 <HAL_RCC_OscConfig+0x26c>)
 80022ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ee:	6013      	str	r3, [r2, #0]
 80022f0:	e02e      	b.n	8002350 <HAL_RCC_OscConfig+0xd4>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d10c      	bne.n	8002314 <HAL_RCC_OscConfig+0x98>
 80022fa:	4b7b      	ldr	r3, [pc, #492]	; (80024e8 <HAL_RCC_OscConfig+0x26c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a7a      	ldr	r2, [pc, #488]	; (80024e8 <HAL_RCC_OscConfig+0x26c>)
 8002300:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002304:	6013      	str	r3, [r2, #0]
 8002306:	4b78      	ldr	r3, [pc, #480]	; (80024e8 <HAL_RCC_OscConfig+0x26c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a77      	ldr	r2, [pc, #476]	; (80024e8 <HAL_RCC_OscConfig+0x26c>)
 800230c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002310:	6013      	str	r3, [r2, #0]
 8002312:	e01d      	b.n	8002350 <HAL_RCC_OscConfig+0xd4>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800231c:	d10c      	bne.n	8002338 <HAL_RCC_OscConfig+0xbc>
 800231e:	4b72      	ldr	r3, [pc, #456]	; (80024e8 <HAL_RCC_OscConfig+0x26c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a71      	ldr	r2, [pc, #452]	; (80024e8 <HAL_RCC_OscConfig+0x26c>)
 8002324:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002328:	6013      	str	r3, [r2, #0]
 800232a:	4b6f      	ldr	r3, [pc, #444]	; (80024e8 <HAL_RCC_OscConfig+0x26c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a6e      	ldr	r2, [pc, #440]	; (80024e8 <HAL_RCC_OscConfig+0x26c>)
 8002330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002334:	6013      	str	r3, [r2, #0]
 8002336:	e00b      	b.n	8002350 <HAL_RCC_OscConfig+0xd4>
 8002338:	4b6b      	ldr	r3, [pc, #428]	; (80024e8 <HAL_RCC_OscConfig+0x26c>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a6a      	ldr	r2, [pc, #424]	; (80024e8 <HAL_RCC_OscConfig+0x26c>)
 800233e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002342:	6013      	str	r3, [r2, #0]
 8002344:	4b68      	ldr	r3, [pc, #416]	; (80024e8 <HAL_RCC_OscConfig+0x26c>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a67      	ldr	r2, [pc, #412]	; (80024e8 <HAL_RCC_OscConfig+0x26c>)
 800234a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800234e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d013      	beq.n	8002380 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002358:	f7fe f924 	bl	80005a4 <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002360:	f7fe f920 	bl	80005a4 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b64      	cmp	r3, #100	; 0x64
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e1fa      	b.n	8002768 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002372:	4b5d      	ldr	r3, [pc, #372]	; (80024e8 <HAL_RCC_OscConfig+0x26c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d0f0      	beq.n	8002360 <HAL_RCC_OscConfig+0xe4>
 800237e:	e014      	b.n	80023aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002380:	f7fe f910 	bl	80005a4 <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002386:	e008      	b.n	800239a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002388:	f7fe f90c 	bl	80005a4 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b64      	cmp	r3, #100	; 0x64
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e1e6      	b.n	8002768 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800239a:	4b53      	ldr	r3, [pc, #332]	; (80024e8 <HAL_RCC_OscConfig+0x26c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1f0      	bne.n	8002388 <HAL_RCC_OscConfig+0x10c>
 80023a6:	e000      	b.n	80023aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d063      	beq.n	800247e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023b6:	4b4c      	ldr	r3, [pc, #304]	; (80024e8 <HAL_RCC_OscConfig+0x26c>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f003 030c 	and.w	r3, r3, #12
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00b      	beq.n	80023da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80023c2:	4b49      	ldr	r3, [pc, #292]	; (80024e8 <HAL_RCC_OscConfig+0x26c>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f003 030c 	and.w	r3, r3, #12
 80023ca:	2b08      	cmp	r3, #8
 80023cc:	d11c      	bne.n	8002408 <HAL_RCC_OscConfig+0x18c>
 80023ce:	4b46      	ldr	r3, [pc, #280]	; (80024e8 <HAL_RCC_OscConfig+0x26c>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d116      	bne.n	8002408 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023da:	4b43      	ldr	r3, [pc, #268]	; (80024e8 <HAL_RCC_OscConfig+0x26c>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d005      	beq.n	80023f2 <HAL_RCC_OscConfig+0x176>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d001      	beq.n	80023f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e1ba      	b.n	8002768 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f2:	4b3d      	ldr	r3, [pc, #244]	; (80024e8 <HAL_RCC_OscConfig+0x26c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	4939      	ldr	r1, [pc, #228]	; (80024e8 <HAL_RCC_OscConfig+0x26c>)
 8002402:	4313      	orrs	r3, r2
 8002404:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002406:	e03a      	b.n	800247e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d020      	beq.n	8002452 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002410:	4b36      	ldr	r3, [pc, #216]	; (80024ec <HAL_RCC_OscConfig+0x270>)
 8002412:	2201      	movs	r2, #1
 8002414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002416:	f7fe f8c5 	bl	80005a4 <HAL_GetTick>
 800241a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800241c:	e008      	b.n	8002430 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800241e:	f7fe f8c1 	bl	80005a4 <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	2b02      	cmp	r3, #2
 800242a:	d901      	bls.n	8002430 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e19b      	b.n	8002768 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002430:	4b2d      	ldr	r3, [pc, #180]	; (80024e8 <HAL_RCC_OscConfig+0x26c>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d0f0      	beq.n	800241e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800243c:	4b2a      	ldr	r3, [pc, #168]	; (80024e8 <HAL_RCC_OscConfig+0x26c>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	695b      	ldr	r3, [r3, #20]
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	4927      	ldr	r1, [pc, #156]	; (80024e8 <HAL_RCC_OscConfig+0x26c>)
 800244c:	4313      	orrs	r3, r2
 800244e:	600b      	str	r3, [r1, #0]
 8002450:	e015      	b.n	800247e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002452:	4b26      	ldr	r3, [pc, #152]	; (80024ec <HAL_RCC_OscConfig+0x270>)
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002458:	f7fe f8a4 	bl	80005a4 <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002460:	f7fe f8a0 	bl	80005a4 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b02      	cmp	r3, #2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e17a      	b.n	8002768 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002472:	4b1d      	ldr	r3, [pc, #116]	; (80024e8 <HAL_RCC_OscConfig+0x26c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1f0      	bne.n	8002460 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0308 	and.w	r3, r3, #8
 8002486:	2b00      	cmp	r3, #0
 8002488:	d03a      	beq.n	8002500 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d019      	beq.n	80024c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002492:	4b17      	ldr	r3, [pc, #92]	; (80024f0 <HAL_RCC_OscConfig+0x274>)
 8002494:	2201      	movs	r2, #1
 8002496:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002498:	f7fe f884 	bl	80005a4 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024a0:	f7fe f880 	bl	80005a4 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e15a      	b.n	8002768 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024b2:	4b0d      	ldr	r3, [pc, #52]	; (80024e8 <HAL_RCC_OscConfig+0x26c>)
 80024b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d0f0      	beq.n	80024a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80024be:	2001      	movs	r0, #1
 80024c0:	f000 faa8 	bl	8002a14 <RCC_Delay>
 80024c4:	e01c      	b.n	8002500 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024c6:	4b0a      	ldr	r3, [pc, #40]	; (80024f0 <HAL_RCC_OscConfig+0x274>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024cc:	f7fe f86a 	bl	80005a4 <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024d2:	e00f      	b.n	80024f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024d4:	f7fe f866 	bl	80005a4 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d908      	bls.n	80024f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e140      	b.n	8002768 <HAL_RCC_OscConfig+0x4ec>
 80024e6:	bf00      	nop
 80024e8:	40021000 	.word	0x40021000
 80024ec:	42420000 	.word	0x42420000
 80024f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024f4:	4b9e      	ldr	r3, [pc, #632]	; (8002770 <HAL_RCC_OscConfig+0x4f4>)
 80024f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1e9      	bne.n	80024d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0304 	and.w	r3, r3, #4
 8002508:	2b00      	cmp	r3, #0
 800250a:	f000 80a6 	beq.w	800265a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800250e:	2300      	movs	r3, #0
 8002510:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002512:	4b97      	ldr	r3, [pc, #604]	; (8002770 <HAL_RCC_OscConfig+0x4f4>)
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d10d      	bne.n	800253a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800251e:	4b94      	ldr	r3, [pc, #592]	; (8002770 <HAL_RCC_OscConfig+0x4f4>)
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	4a93      	ldr	r2, [pc, #588]	; (8002770 <HAL_RCC_OscConfig+0x4f4>)
 8002524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002528:	61d3      	str	r3, [r2, #28]
 800252a:	4b91      	ldr	r3, [pc, #580]	; (8002770 <HAL_RCC_OscConfig+0x4f4>)
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002532:	60bb      	str	r3, [r7, #8]
 8002534:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002536:	2301      	movs	r3, #1
 8002538:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800253a:	4b8e      	ldr	r3, [pc, #568]	; (8002774 <HAL_RCC_OscConfig+0x4f8>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002542:	2b00      	cmp	r3, #0
 8002544:	d118      	bne.n	8002578 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002546:	4b8b      	ldr	r3, [pc, #556]	; (8002774 <HAL_RCC_OscConfig+0x4f8>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a8a      	ldr	r2, [pc, #552]	; (8002774 <HAL_RCC_OscConfig+0x4f8>)
 800254c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002550:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002552:	f7fe f827 	bl	80005a4 <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002558:	e008      	b.n	800256c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800255a:	f7fe f823 	bl	80005a4 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b64      	cmp	r3, #100	; 0x64
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e0fd      	b.n	8002768 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800256c:	4b81      	ldr	r3, [pc, #516]	; (8002774 <HAL_RCC_OscConfig+0x4f8>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0f0      	beq.n	800255a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d106      	bne.n	800258e <HAL_RCC_OscConfig+0x312>
 8002580:	4b7b      	ldr	r3, [pc, #492]	; (8002770 <HAL_RCC_OscConfig+0x4f4>)
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	4a7a      	ldr	r2, [pc, #488]	; (8002770 <HAL_RCC_OscConfig+0x4f4>)
 8002586:	f043 0301 	orr.w	r3, r3, #1
 800258a:	6213      	str	r3, [r2, #32]
 800258c:	e02d      	b.n	80025ea <HAL_RCC_OscConfig+0x36e>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10c      	bne.n	80025b0 <HAL_RCC_OscConfig+0x334>
 8002596:	4b76      	ldr	r3, [pc, #472]	; (8002770 <HAL_RCC_OscConfig+0x4f4>)
 8002598:	6a1b      	ldr	r3, [r3, #32]
 800259a:	4a75      	ldr	r2, [pc, #468]	; (8002770 <HAL_RCC_OscConfig+0x4f4>)
 800259c:	f023 0301 	bic.w	r3, r3, #1
 80025a0:	6213      	str	r3, [r2, #32]
 80025a2:	4b73      	ldr	r3, [pc, #460]	; (8002770 <HAL_RCC_OscConfig+0x4f4>)
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	4a72      	ldr	r2, [pc, #456]	; (8002770 <HAL_RCC_OscConfig+0x4f4>)
 80025a8:	f023 0304 	bic.w	r3, r3, #4
 80025ac:	6213      	str	r3, [r2, #32]
 80025ae:	e01c      	b.n	80025ea <HAL_RCC_OscConfig+0x36e>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	2b05      	cmp	r3, #5
 80025b6:	d10c      	bne.n	80025d2 <HAL_RCC_OscConfig+0x356>
 80025b8:	4b6d      	ldr	r3, [pc, #436]	; (8002770 <HAL_RCC_OscConfig+0x4f4>)
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	4a6c      	ldr	r2, [pc, #432]	; (8002770 <HAL_RCC_OscConfig+0x4f4>)
 80025be:	f043 0304 	orr.w	r3, r3, #4
 80025c2:	6213      	str	r3, [r2, #32]
 80025c4:	4b6a      	ldr	r3, [pc, #424]	; (8002770 <HAL_RCC_OscConfig+0x4f4>)
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	4a69      	ldr	r2, [pc, #420]	; (8002770 <HAL_RCC_OscConfig+0x4f4>)
 80025ca:	f043 0301 	orr.w	r3, r3, #1
 80025ce:	6213      	str	r3, [r2, #32]
 80025d0:	e00b      	b.n	80025ea <HAL_RCC_OscConfig+0x36e>
 80025d2:	4b67      	ldr	r3, [pc, #412]	; (8002770 <HAL_RCC_OscConfig+0x4f4>)
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	4a66      	ldr	r2, [pc, #408]	; (8002770 <HAL_RCC_OscConfig+0x4f4>)
 80025d8:	f023 0301 	bic.w	r3, r3, #1
 80025dc:	6213      	str	r3, [r2, #32]
 80025de:	4b64      	ldr	r3, [pc, #400]	; (8002770 <HAL_RCC_OscConfig+0x4f4>)
 80025e0:	6a1b      	ldr	r3, [r3, #32]
 80025e2:	4a63      	ldr	r2, [pc, #396]	; (8002770 <HAL_RCC_OscConfig+0x4f4>)
 80025e4:	f023 0304 	bic.w	r3, r3, #4
 80025e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d015      	beq.n	800261e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025f2:	f7fd ffd7 	bl	80005a4 <HAL_GetTick>
 80025f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025f8:	e00a      	b.n	8002610 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025fa:	f7fd ffd3 	bl	80005a4 <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	f241 3288 	movw	r2, #5000	; 0x1388
 8002608:	4293      	cmp	r3, r2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e0ab      	b.n	8002768 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002610:	4b57      	ldr	r3, [pc, #348]	; (8002770 <HAL_RCC_OscConfig+0x4f4>)
 8002612:	6a1b      	ldr	r3, [r3, #32]
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0ee      	beq.n	80025fa <HAL_RCC_OscConfig+0x37e>
 800261c:	e014      	b.n	8002648 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800261e:	f7fd ffc1 	bl	80005a4 <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002624:	e00a      	b.n	800263c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002626:	f7fd ffbd 	bl	80005a4 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	f241 3288 	movw	r2, #5000	; 0x1388
 8002634:	4293      	cmp	r3, r2
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e095      	b.n	8002768 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800263c:	4b4c      	ldr	r3, [pc, #304]	; (8002770 <HAL_RCC_OscConfig+0x4f4>)
 800263e:	6a1b      	ldr	r3, [r3, #32]
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d1ee      	bne.n	8002626 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002648:	7dfb      	ldrb	r3, [r7, #23]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d105      	bne.n	800265a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800264e:	4b48      	ldr	r3, [pc, #288]	; (8002770 <HAL_RCC_OscConfig+0x4f4>)
 8002650:	69db      	ldr	r3, [r3, #28]
 8002652:	4a47      	ldr	r2, [pc, #284]	; (8002770 <HAL_RCC_OscConfig+0x4f4>)
 8002654:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002658:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	2b00      	cmp	r3, #0
 8002660:	f000 8081 	beq.w	8002766 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002664:	4b42      	ldr	r3, [pc, #264]	; (8002770 <HAL_RCC_OscConfig+0x4f4>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f003 030c 	and.w	r3, r3, #12
 800266c:	2b08      	cmp	r3, #8
 800266e:	d061      	beq.n	8002734 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	69db      	ldr	r3, [r3, #28]
 8002674:	2b02      	cmp	r3, #2
 8002676:	d146      	bne.n	8002706 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002678:	4b3f      	ldr	r3, [pc, #252]	; (8002778 <HAL_RCC_OscConfig+0x4fc>)
 800267a:	2200      	movs	r2, #0
 800267c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267e:	f7fd ff91 	bl	80005a4 <HAL_GetTick>
 8002682:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002684:	e008      	b.n	8002698 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002686:	f7fd ff8d 	bl	80005a4 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e067      	b.n	8002768 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002698:	4b35      	ldr	r3, [pc, #212]	; (8002770 <HAL_RCC_OscConfig+0x4f4>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d1f0      	bne.n	8002686 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026ac:	d108      	bne.n	80026c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026ae:	4b30      	ldr	r3, [pc, #192]	; (8002770 <HAL_RCC_OscConfig+0x4f4>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	492d      	ldr	r1, [pc, #180]	; (8002770 <HAL_RCC_OscConfig+0x4f4>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026c0:	4b2b      	ldr	r3, [pc, #172]	; (8002770 <HAL_RCC_OscConfig+0x4f4>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a19      	ldr	r1, [r3, #32]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d0:	430b      	orrs	r3, r1
 80026d2:	4927      	ldr	r1, [pc, #156]	; (8002770 <HAL_RCC_OscConfig+0x4f4>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026d8:	4b27      	ldr	r3, [pc, #156]	; (8002778 <HAL_RCC_OscConfig+0x4fc>)
 80026da:	2201      	movs	r2, #1
 80026dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026de:	f7fd ff61 	bl	80005a4 <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026e4:	e008      	b.n	80026f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e6:	f7fd ff5d 	bl	80005a4 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e037      	b.n	8002768 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026f8:	4b1d      	ldr	r3, [pc, #116]	; (8002770 <HAL_RCC_OscConfig+0x4f4>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d0f0      	beq.n	80026e6 <HAL_RCC_OscConfig+0x46a>
 8002704:	e02f      	b.n	8002766 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002706:	4b1c      	ldr	r3, [pc, #112]	; (8002778 <HAL_RCC_OscConfig+0x4fc>)
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270c:	f7fd ff4a 	bl	80005a4 <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002714:	f7fd ff46 	bl	80005a4 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e020      	b.n	8002768 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002726:	4b12      	ldr	r3, [pc, #72]	; (8002770 <HAL_RCC_OscConfig+0x4f4>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1f0      	bne.n	8002714 <HAL_RCC_OscConfig+0x498>
 8002732:	e018      	b.n	8002766 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	69db      	ldr	r3, [r3, #28]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d101      	bne.n	8002740 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e013      	b.n	8002768 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002740:	4b0b      	ldr	r3, [pc, #44]	; (8002770 <HAL_RCC_OscConfig+0x4f4>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	429a      	cmp	r2, r3
 8002752:	d106      	bne.n	8002762 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800275e:	429a      	cmp	r2, r3
 8002760:	d001      	beq.n	8002766 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e000      	b.n	8002768 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	3718      	adds	r7, #24
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	40021000 	.word	0x40021000
 8002774:	40007000 	.word	0x40007000
 8002778:	42420060 	.word	0x42420060

0800277c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d101      	bne.n	8002790 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e0d0      	b.n	8002932 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002790:	4b6a      	ldr	r3, [pc, #424]	; (800293c <HAL_RCC_ClockConfig+0x1c0>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0307 	and.w	r3, r3, #7
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	429a      	cmp	r2, r3
 800279c:	d910      	bls.n	80027c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800279e:	4b67      	ldr	r3, [pc, #412]	; (800293c <HAL_RCC_ClockConfig+0x1c0>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f023 0207 	bic.w	r2, r3, #7
 80027a6:	4965      	ldr	r1, [pc, #404]	; (800293c <HAL_RCC_ClockConfig+0x1c0>)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ae:	4b63      	ldr	r3, [pc, #396]	; (800293c <HAL_RCC_ClockConfig+0x1c0>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d001      	beq.n	80027c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e0b8      	b.n	8002932 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d020      	beq.n	800280e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0304 	and.w	r3, r3, #4
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d005      	beq.n	80027e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027d8:	4b59      	ldr	r3, [pc, #356]	; (8002940 <HAL_RCC_ClockConfig+0x1c4>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	4a58      	ldr	r2, [pc, #352]	; (8002940 <HAL_RCC_ClockConfig+0x1c4>)
 80027de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0308 	and.w	r3, r3, #8
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d005      	beq.n	80027fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027f0:	4b53      	ldr	r3, [pc, #332]	; (8002940 <HAL_RCC_ClockConfig+0x1c4>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	4a52      	ldr	r2, [pc, #328]	; (8002940 <HAL_RCC_ClockConfig+0x1c4>)
 80027f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80027fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027fc:	4b50      	ldr	r3, [pc, #320]	; (8002940 <HAL_RCC_ClockConfig+0x1c4>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	494d      	ldr	r1, [pc, #308]	; (8002940 <HAL_RCC_ClockConfig+0x1c4>)
 800280a:	4313      	orrs	r3, r2
 800280c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	2b00      	cmp	r3, #0
 8002818:	d040      	beq.n	800289c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d107      	bne.n	8002832 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002822:	4b47      	ldr	r3, [pc, #284]	; (8002940 <HAL_RCC_ClockConfig+0x1c4>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d115      	bne.n	800285a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e07f      	b.n	8002932 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	2b02      	cmp	r3, #2
 8002838:	d107      	bne.n	800284a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800283a:	4b41      	ldr	r3, [pc, #260]	; (8002940 <HAL_RCC_ClockConfig+0x1c4>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d109      	bne.n	800285a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e073      	b.n	8002932 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800284a:	4b3d      	ldr	r3, [pc, #244]	; (8002940 <HAL_RCC_ClockConfig+0x1c4>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e06b      	b.n	8002932 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800285a:	4b39      	ldr	r3, [pc, #228]	; (8002940 <HAL_RCC_ClockConfig+0x1c4>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f023 0203 	bic.w	r2, r3, #3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	4936      	ldr	r1, [pc, #216]	; (8002940 <HAL_RCC_ClockConfig+0x1c4>)
 8002868:	4313      	orrs	r3, r2
 800286a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800286c:	f7fd fe9a 	bl	80005a4 <HAL_GetTick>
 8002870:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002872:	e00a      	b.n	800288a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002874:	f7fd fe96 	bl	80005a4 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002882:	4293      	cmp	r3, r2
 8002884:	d901      	bls.n	800288a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e053      	b.n	8002932 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800288a:	4b2d      	ldr	r3, [pc, #180]	; (8002940 <HAL_RCC_ClockConfig+0x1c4>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f003 020c 	and.w	r2, r3, #12
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	429a      	cmp	r2, r3
 800289a:	d1eb      	bne.n	8002874 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800289c:	4b27      	ldr	r3, [pc, #156]	; (800293c <HAL_RCC_ClockConfig+0x1c0>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0307 	and.w	r3, r3, #7
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d210      	bcs.n	80028cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028aa:	4b24      	ldr	r3, [pc, #144]	; (800293c <HAL_RCC_ClockConfig+0x1c0>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f023 0207 	bic.w	r2, r3, #7
 80028b2:	4922      	ldr	r1, [pc, #136]	; (800293c <HAL_RCC_ClockConfig+0x1c0>)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ba:	4b20      	ldr	r3, [pc, #128]	; (800293c <HAL_RCC_ClockConfig+0x1c0>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0307 	and.w	r3, r3, #7
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d001      	beq.n	80028cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e032      	b.n	8002932 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0304 	and.w	r3, r3, #4
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d008      	beq.n	80028ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028d8:	4b19      	ldr	r3, [pc, #100]	; (8002940 <HAL_RCC_ClockConfig+0x1c4>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	4916      	ldr	r1, [pc, #88]	; (8002940 <HAL_RCC_ClockConfig+0x1c4>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0308 	and.w	r3, r3, #8
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d009      	beq.n	800290a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028f6:	4b12      	ldr	r3, [pc, #72]	; (8002940 <HAL_RCC_ClockConfig+0x1c4>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	490e      	ldr	r1, [pc, #56]	; (8002940 <HAL_RCC_ClockConfig+0x1c4>)
 8002906:	4313      	orrs	r3, r2
 8002908:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800290a:	f000 f821 	bl	8002950 <HAL_RCC_GetSysClockFreq>
 800290e:	4601      	mov	r1, r0
 8002910:	4b0b      	ldr	r3, [pc, #44]	; (8002940 <HAL_RCC_ClockConfig+0x1c4>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	091b      	lsrs	r3, r3, #4
 8002916:	f003 030f 	and.w	r3, r3, #15
 800291a:	4a0a      	ldr	r2, [pc, #40]	; (8002944 <HAL_RCC_ClockConfig+0x1c8>)
 800291c:	5cd3      	ldrb	r3, [r2, r3]
 800291e:	fa21 f303 	lsr.w	r3, r1, r3
 8002922:	4a09      	ldr	r2, [pc, #36]	; (8002948 <HAL_RCC_ClockConfig+0x1cc>)
 8002924:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002926:	4b09      	ldr	r3, [pc, #36]	; (800294c <HAL_RCC_ClockConfig+0x1d0>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4618      	mov	r0, r3
 800292c:	f7fd fdf8 	bl	8000520 <HAL_InitTick>

  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	40022000 	.word	0x40022000
 8002940:	40021000 	.word	0x40021000
 8002944:	08006e6c 	.word	0x08006e6c
 8002948:	20000010 	.word	0x20000010
 800294c:	20000014 	.word	0x20000014

08002950 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002950:	b490      	push	{r4, r7}
 8002952:	b08a      	sub	sp, #40	; 0x28
 8002954:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002956:	4b2a      	ldr	r3, [pc, #168]	; (8002a00 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002958:	1d3c      	adds	r4, r7, #4
 800295a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800295c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002960:	4b28      	ldr	r3, [pc, #160]	; (8002a04 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002962:	881b      	ldrh	r3, [r3, #0]
 8002964:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002966:	2300      	movs	r3, #0
 8002968:	61fb      	str	r3, [r7, #28]
 800296a:	2300      	movs	r3, #0
 800296c:	61bb      	str	r3, [r7, #24]
 800296e:	2300      	movs	r3, #0
 8002970:	627b      	str	r3, [r7, #36]	; 0x24
 8002972:	2300      	movs	r3, #0
 8002974:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002976:	2300      	movs	r3, #0
 8002978:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800297a:	4b23      	ldr	r3, [pc, #140]	; (8002a08 <HAL_RCC_GetSysClockFreq+0xb8>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	f003 030c 	and.w	r3, r3, #12
 8002986:	2b04      	cmp	r3, #4
 8002988:	d002      	beq.n	8002990 <HAL_RCC_GetSysClockFreq+0x40>
 800298a:	2b08      	cmp	r3, #8
 800298c:	d003      	beq.n	8002996 <HAL_RCC_GetSysClockFreq+0x46>
 800298e:	e02d      	b.n	80029ec <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002990:	4b1e      	ldr	r3, [pc, #120]	; (8002a0c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002992:	623b      	str	r3, [r7, #32]
      break;
 8002994:	e02d      	b.n	80029f2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	0c9b      	lsrs	r3, r3, #18
 800299a:	f003 030f 	and.w	r3, r3, #15
 800299e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80029a2:	4413      	add	r3, r2
 80029a4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80029a8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d013      	beq.n	80029dc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029b4:	4b14      	ldr	r3, [pc, #80]	; (8002a08 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	0c5b      	lsrs	r3, r3, #17
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80029c2:	4413      	add	r3, r2
 80029c4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80029c8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	4a0f      	ldr	r2, [pc, #60]	; (8002a0c <HAL_RCC_GetSysClockFreq+0xbc>)
 80029ce:	fb02 f203 	mul.w	r2, r2, r3
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d8:	627b      	str	r3, [r7, #36]	; 0x24
 80029da:	e004      	b.n	80029e6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	4a0c      	ldr	r2, [pc, #48]	; (8002a10 <HAL_RCC_GetSysClockFreq+0xc0>)
 80029e0:	fb02 f303 	mul.w	r3, r2, r3
 80029e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	623b      	str	r3, [r7, #32]
      break;
 80029ea:	e002      	b.n	80029f2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029ec:	4b07      	ldr	r3, [pc, #28]	; (8002a0c <HAL_RCC_GetSysClockFreq+0xbc>)
 80029ee:	623b      	str	r3, [r7, #32]
      break;
 80029f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029f2:	6a3b      	ldr	r3, [r7, #32]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3728      	adds	r7, #40	; 0x28
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bc90      	pop	{r4, r7}
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	08006e18 	.word	0x08006e18
 8002a04:	08006e28 	.word	0x08006e28
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	007a1200 	.word	0x007a1200
 8002a10:	003d0900 	.word	0x003d0900

08002a14 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002a1c:	4b0a      	ldr	r3, [pc, #40]	; (8002a48 <RCC_Delay+0x34>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a0a      	ldr	r2, [pc, #40]	; (8002a4c <RCC_Delay+0x38>)
 8002a22:	fba2 2303 	umull	r2, r3, r2, r3
 8002a26:	0a5b      	lsrs	r3, r3, #9
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	fb02 f303 	mul.w	r3, r2, r3
 8002a2e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a30:	bf00      	nop
  }
  while (Delay --);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	1e5a      	subs	r2, r3, #1
 8002a36:	60fa      	str	r2, [r7, #12]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1f9      	bne.n	8002a30 <RCC_Delay+0x1c>
}
 8002a3c:	bf00      	nop
 8002a3e:	3714      	adds	r7, #20
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bc80      	pop	{r7}
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	20000010 	.word	0x20000010
 8002a4c:	10624dd3 	.word	0x10624dd3

08002a50 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	613b      	str	r3, [r7, #16]
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d07d      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a70:	4b4f      	ldr	r3, [pc, #316]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a72:	69db      	ldr	r3, [r3, #28]
 8002a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d10d      	bne.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a7c:	4b4c      	ldr	r3, [pc, #304]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a7e:	69db      	ldr	r3, [r3, #28]
 8002a80:	4a4b      	ldr	r2, [pc, #300]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a86:	61d3      	str	r3, [r2, #28]
 8002a88:	4b49      	ldr	r3, [pc, #292]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a8a:	69db      	ldr	r3, [r3, #28]
 8002a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a90:	60bb      	str	r3, [r7, #8]
 8002a92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a94:	2301      	movs	r3, #1
 8002a96:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a98:	4b46      	ldr	r3, [pc, #280]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d118      	bne.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aa4:	4b43      	ldr	r3, [pc, #268]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a42      	ldr	r2, [pc, #264]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002aaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ab0:	f7fd fd78 	bl	80005a4 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab6:	e008      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ab8:	f7fd fd74 	bl	80005a4 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b64      	cmp	r3, #100	; 0x64
 8002ac4:	d901      	bls.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e06d      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aca:	4b3a      	ldr	r3, [pc, #232]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d0f0      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ad6:	4b36      	ldr	r3, [pc, #216]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ade:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d02e      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d027      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002af4:	4b2e      	ldr	r3, [pc, #184]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002afc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002afe:	4b2e      	ldr	r3, [pc, #184]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b00:	2201      	movs	r2, #1
 8002b02:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b04:	4b2c      	ldr	r3, [pc, #176]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b0a:	4a29      	ldr	r2, [pc, #164]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d014      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b1a:	f7fd fd43 	bl	80005a4 <HAL_GetTick>
 8002b1e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b20:	e00a      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b22:	f7fd fd3f 	bl	80005a4 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d901      	bls.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e036      	b.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b38:	4b1d      	ldr	r3, [pc, #116]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	f003 0302 	and.w	r3, r3, #2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d0ee      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b44:	4b1a      	ldr	r3, [pc, #104]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	4917      	ldr	r1, [pc, #92]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b56:	7dfb      	ldrb	r3, [r7, #23]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d105      	bne.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b5c:	4b14      	ldr	r3, [pc, #80]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b5e:	69db      	ldr	r3, [r3, #28]
 8002b60:	4a13      	ldr	r2, [pc, #76]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b66:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d008      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b74:	4b0e      	ldr	r3, [pc, #56]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	490b      	ldr	r1, [pc, #44]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0310 	and.w	r3, r3, #16
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d008      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b92:	4b07      	ldr	r3, [pc, #28]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	4904      	ldr	r1, [pc, #16]	; (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3718      	adds	r7, #24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	40007000 	.word	0x40007000
 8002bb8:	42420440 	.word	0x42420440

08002bbc <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002bbc:	b084      	sub	sp, #16
 8002bbe:	b480      	push	{r7}
 8002bc0:	b083      	sub	sp, #12
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
 8002bc6:	f107 0014 	add.w	r0, r7, #20
 8002bca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bc80      	pop	{r7}
 8002bd8:	b004      	add	sp, #16
 8002bda:	4770      	bx	lr

08002bdc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002bec:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002bf0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	b29a      	uxth	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3714      	adds	r7, #20
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bc80      	pop	{r7}
 8002c06:	4770      	bx	lr

08002c08 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002c10:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8002c14:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	43db      	mvns	r3, r3
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	4013      	ands	r3, r2
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3714      	adds	r7, #20
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr

08002c3c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	460b      	mov	r3, r1
 8002c46:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bc80      	pop	{r7}
 8002c52:	4770      	bx	lr

08002c54 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002c54:	b084      	sub	sp, #16
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
 8002c5e:	f107 0014 	add.w	r0, r7, #20
 8002c62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bc80      	pop	{r7}
 8002c90:	b004      	add	sp, #16
 8002c92:	4770      	bx	lr

08002c94 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b09b      	sub	sp, #108	; 0x6c
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	881b      	ldrh	r3, [r3, #0]
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cba:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	78db      	ldrb	r3, [r3, #3]
 8002cc2:	2b03      	cmp	r3, #3
 8002cc4:	d81f      	bhi.n	8002d06 <USB_ActivateEndpoint+0x72>
 8002cc6:	a201      	add	r2, pc, #4	; (adr r2, 8002ccc <USB_ActivateEndpoint+0x38>)
 8002cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ccc:	08002cdd 	.word	0x08002cdd
 8002cd0:	08002cf9 	.word	0x08002cf9
 8002cd4:	08002d0f 	.word	0x08002d0f
 8002cd8:	08002ceb 	.word	0x08002ceb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002cdc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002ce0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ce4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002ce8:	e012      	b.n	8002d10 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002cea:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002cee:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002cf2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002cf6:	e00b      	b.n	8002d10 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002cf8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002cfc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d00:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8002d04:	e004      	b.n	8002d10 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8002d0c:	e000      	b.n	8002d10 <USB_ActivateEndpoint+0x7c>
      break;
 8002d0e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	441a      	add	r2, r3
 8002d1a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8002d1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	881b      	ldrh	r3, [r3, #0]
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d48:	b29a      	uxth	r2, r3
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	4313      	orrs	r3, r2
 8002d52:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	441a      	add	r2, r3
 8002d60:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8002d64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	7b1b      	ldrb	r3, [r3, #12]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f040 8149 	bne.w	8003014 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	785b      	ldrb	r3, [r3, #1]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f000 8084 	beq.w	8002e94 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	617b      	str	r3, [r7, #20]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	461a      	mov	r2, r3
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	617b      	str	r3, [r7, #20]
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	011a      	lsls	r2, r3, #4
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	4413      	add	r3, r2
 8002daa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002dae:	613b      	str	r3, [r7, #16]
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	88db      	ldrh	r3, [r3, #6]
 8002db4:	085b      	lsrs	r3, r3, #1
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4413      	add	r3, r2
 8002dca:	881b      	ldrh	r3, [r3, #0]
 8002dcc:	81fb      	strh	r3, [r7, #14]
 8002dce:	89fb      	ldrh	r3, [r7, #14]
 8002dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d01b      	beq.n	8002e10 <USB_ActivateEndpoint+0x17c>
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	4413      	add	r3, r2
 8002de2:	881b      	ldrh	r3, [r3, #0]
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dee:	81bb      	strh	r3, [r7, #12]
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	441a      	add	r2, r3
 8002dfa:	89bb      	ldrh	r3, [r7, #12]
 8002dfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	78db      	ldrb	r3, [r3, #3]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d020      	beq.n	8002e5a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	881b      	ldrh	r3, [r3, #0]
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e2e:	813b      	strh	r3, [r7, #8]
 8002e30:	893b      	ldrh	r3, [r7, #8]
 8002e32:	f083 0320 	eor.w	r3, r3, #32
 8002e36:	813b      	strh	r3, [r7, #8]
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	781b      	ldrb	r3, [r3, #0]
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	441a      	add	r2, r3
 8002e42:	893b      	ldrh	r3, [r7, #8]
 8002e44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	8013      	strh	r3, [r2, #0]
 8002e58:	e27f      	b.n	800335a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4413      	add	r3, r2
 8002e64:	881b      	ldrh	r3, [r3, #0]
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e70:	817b      	strh	r3, [r7, #10]
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	441a      	add	r2, r3
 8002e7c:	897b      	ldrh	r3, [r7, #10]
 8002e7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	8013      	strh	r3, [r2, #0]
 8002e92:	e262      	b.n	800335a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea4:	4413      	add	r3, r2
 8002ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	011a      	lsls	r2, r3, #4
 8002eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb0:	4413      	add	r3, r2
 8002eb2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002eb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	88db      	ldrh	r3, [r3, #6]
 8002ebc:	085b      	lsrs	r3, r3, #1
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec6:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	627b      	str	r3, [r7, #36]	; 0x24
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed8:	4413      	add	r3, r2
 8002eda:	627b      	str	r3, [r7, #36]	; 0x24
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	011a      	lsls	r2, r3, #4
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee4:	4413      	add	r3, r2
 8002ee6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002eea:	623b      	str	r3, [r7, #32]
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	691b      	ldr	r3, [r3, #16]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d112      	bne.n	8002f1a <USB_ActivateEndpoint+0x286>
 8002ef4:	6a3b      	ldr	r3, [r7, #32]
 8002ef6:	881b      	ldrh	r3, [r3, #0]
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	6a3b      	ldr	r3, [r7, #32]
 8002f02:	801a      	strh	r2, [r3, #0]
 8002f04:	6a3b      	ldr	r3, [r7, #32]
 8002f06:	881b      	ldrh	r3, [r3, #0]
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	6a3b      	ldr	r3, [r7, #32]
 8002f16:	801a      	strh	r2, [r3, #0]
 8002f18:	e02f      	b.n	8002f7a <USB_ActivateEndpoint+0x2e6>
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	2b3e      	cmp	r3, #62	; 0x3e
 8002f20:	d813      	bhi.n	8002f4a <USB_ActivateEndpoint+0x2b6>
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	085b      	lsrs	r3, r3, #1
 8002f28:	663b      	str	r3, [r7, #96]	; 0x60
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d002      	beq.n	8002f3c <USB_ActivateEndpoint+0x2a8>
 8002f36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f38:	3301      	adds	r3, #1
 8002f3a:	663b      	str	r3, [r7, #96]	; 0x60
 8002f3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	029b      	lsls	r3, r3, #10
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	6a3b      	ldr	r3, [r7, #32]
 8002f46:	801a      	strh	r2, [r3, #0]
 8002f48:	e017      	b.n	8002f7a <USB_ActivateEndpoint+0x2e6>
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	095b      	lsrs	r3, r3, #5
 8002f50:	663b      	str	r3, [r7, #96]	; 0x60
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	f003 031f 	and.w	r3, r3, #31
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d102      	bne.n	8002f64 <USB_ActivateEndpoint+0x2d0>
 8002f5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f60:	3b01      	subs	r3, #1
 8002f62:	663b      	str	r3, [r7, #96]	; 0x60
 8002f64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	029b      	lsls	r3, r3, #10
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f74:	b29a      	uxth	r2, r3
 8002f76:	6a3b      	ldr	r3, [r7, #32]
 8002f78:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4413      	add	r3, r2
 8002f84:	881b      	ldrh	r3, [r3, #0]
 8002f86:	83fb      	strh	r3, [r7, #30]
 8002f88:	8bfb      	ldrh	r3, [r7, #30]
 8002f8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d01b      	beq.n	8002fca <USB_ActivateEndpoint+0x336>
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	881b      	ldrh	r3, [r3, #0]
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fa8:	83bb      	strh	r3, [r7, #28]
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	441a      	add	r2, r3
 8002fb4:	8bbb      	ldrh	r3, [r7, #28]
 8002fb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002fba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002fbe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	4413      	add	r3, r2
 8002fd4:	881b      	ldrh	r3, [r3, #0]
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fe0:	837b      	strh	r3, [r7, #26]
 8002fe2:	8b7b      	ldrh	r3, [r7, #26]
 8002fe4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002fe8:	837b      	strh	r3, [r7, #26]
 8002fea:	8b7b      	ldrh	r3, [r7, #26]
 8002fec:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002ff0:	837b      	strh	r3, [r7, #26]
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	441a      	add	r2, r3
 8002ffc:	8b7b      	ldrh	r3, [r7, #26]
 8002ffe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003002:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003006:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800300a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800300e:	b29b      	uxth	r3, r3
 8003010:	8013      	strh	r3, [r2, #0]
 8003012:	e1a2      	b.n	800335a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	4413      	add	r3, r2
 800301e:	881b      	ldrh	r3, [r3, #0]
 8003020:	b29b      	uxth	r3, r3
 8003022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800302a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	441a      	add	r2, r3
 8003038:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800303c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003040:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003044:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800304c:	b29b      	uxth	r3, r3
 800304e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	65bb      	str	r3, [r7, #88]	; 0x58
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800305a:	b29b      	uxth	r3, r3
 800305c:	461a      	mov	r2, r3
 800305e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003060:	4413      	add	r3, r2
 8003062:	65bb      	str	r3, [r7, #88]	; 0x58
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	011a      	lsls	r2, r3, #4
 800306a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800306c:	4413      	add	r3, r2
 800306e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003072:	657b      	str	r3, [r7, #84]	; 0x54
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	891b      	ldrh	r3, [r3, #8]
 8003078:	085b      	lsrs	r3, r3, #1
 800307a:	b29b      	uxth	r3, r3
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	b29a      	uxth	r2, r3
 8003080:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003082:	801a      	strh	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	653b      	str	r3, [r7, #80]	; 0x50
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800308e:	b29b      	uxth	r3, r3
 8003090:	461a      	mov	r2, r3
 8003092:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003094:	4413      	add	r3, r2
 8003096:	653b      	str	r3, [r7, #80]	; 0x50
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	011a      	lsls	r2, r3, #4
 800309e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030a0:	4413      	add	r3, r2
 80030a2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80030a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	895b      	ldrh	r3, [r3, #10]
 80030ac:	085b      	lsrs	r3, r3, #1
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030b6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	785b      	ldrb	r3, [r3, #1]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f040 8091 	bne.w	80031e4 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4413      	add	r3, r2
 80030cc:	881b      	ldrh	r3, [r3, #0]
 80030ce:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80030d0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80030d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d01b      	beq.n	8003112 <USB_ActivateEndpoint+0x47e>
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	4413      	add	r3, r2
 80030e4:	881b      	ldrh	r3, [r3, #0]
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030f0:	877b      	strh	r3, [r7, #58]	; 0x3a
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	441a      	add	r2, r3
 80030fc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80030fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003102:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003106:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800310a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800310e:	b29b      	uxth	r3, r3
 8003110:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	4413      	add	r3, r2
 800311c:	881b      	ldrh	r3, [r3, #0]
 800311e:	873b      	strh	r3, [r7, #56]	; 0x38
 8003120:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003126:	2b00      	cmp	r3, #0
 8003128:	d01b      	beq.n	8003162 <USB_ActivateEndpoint+0x4ce>
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4413      	add	r3, r2
 8003134:	881b      	ldrh	r3, [r3, #0]
 8003136:	b29b      	uxth	r3, r3
 8003138:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800313c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003140:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	441a      	add	r2, r3
 800314c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800314e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003152:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003156:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800315a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800315e:	b29b      	uxth	r3, r3
 8003160:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	4413      	add	r3, r2
 800316c:	881b      	ldrh	r3, [r3, #0]
 800316e:	b29b      	uxth	r3, r3
 8003170:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003174:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003178:	86bb      	strh	r3, [r7, #52]	; 0x34
 800317a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800317c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003180:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003182:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003184:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003188:	86bb      	strh	r3, [r7, #52]	; 0x34
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	441a      	add	r2, r3
 8003194:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003196:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800319a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800319e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	4413      	add	r3, r2
 80031b4:	881b      	ldrh	r3, [r3, #0]
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031c0:	867b      	strh	r3, [r7, #50]	; 0x32
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	441a      	add	r2, r3
 80031cc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80031ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031de:	b29b      	uxth	r3, r3
 80031e0:	8013      	strh	r3, [r2, #0]
 80031e2:	e0ba      	b.n	800335a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4413      	add	r3, r2
 80031ee:	881b      	ldrh	r3, [r3, #0]
 80031f0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80031f4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80031f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d01d      	beq.n	800323c <USB_ActivateEndpoint+0x5a8>
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	4413      	add	r3, r2
 800320a:	881b      	ldrh	r3, [r3, #0]
 800320c:	b29b      	uxth	r3, r3
 800320e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003216:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	441a      	add	r2, r3
 8003224:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003228:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800322c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003230:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003238:	b29b      	uxth	r3, r3
 800323a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	881b      	ldrh	r3, [r3, #0]
 8003248:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800324c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003254:	2b00      	cmp	r3, #0
 8003256:	d01d      	beq.n	8003294 <USB_ActivateEndpoint+0x600>
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4413      	add	r3, r2
 8003262:	881b      	ldrh	r3, [r3, #0]
 8003264:	b29b      	uxth	r3, r3
 8003266:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800326a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800326e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	441a      	add	r2, r3
 800327c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003280:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003284:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003288:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800328c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003290:	b29b      	uxth	r3, r3
 8003292:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	78db      	ldrb	r3, [r3, #3]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d024      	beq.n	80032e6 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	4413      	add	r3, r2
 80032a6:	881b      	ldrh	r3, [r3, #0]
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032b2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80032b6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80032ba:	f083 0320 	eor.w	r3, r3, #32
 80032be:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	441a      	add	r2, r3
 80032cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80032d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	8013      	strh	r3, [r2, #0]
 80032e4:	e01d      	b.n	8003322 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4413      	add	r3, r2
 80032f0:	881b      	ldrh	r3, [r3, #0]
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032fc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	441a      	add	r2, r3
 800330a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800330e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003312:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003316:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800331a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800331e:	b29b      	uxth	r3, r3
 8003320:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	4413      	add	r3, r2
 800332c:	881b      	ldrh	r3, [r3, #0]
 800332e:	b29b      	uxth	r3, r3
 8003330:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003334:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003338:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	441a      	add	r2, r3
 8003344:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003346:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800334a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800334e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003356:	b29b      	uxth	r3, r3
 8003358:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800335a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800335e:	4618      	mov	r0, r3
 8003360:	376c      	adds	r7, #108	; 0x6c
 8003362:	46bd      	mov	sp, r7
 8003364:	bc80      	pop	{r7}
 8003366:	4770      	bx	lr

08003368 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003368:	b480      	push	{r7}
 800336a:	b08d      	sub	sp, #52	; 0x34
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	7b1b      	ldrb	r3, [r3, #12]
 8003376:	2b00      	cmp	r3, #0
 8003378:	f040 808e 	bne.w	8003498 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	785b      	ldrb	r3, [r3, #1]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d044      	beq.n	800340e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	4413      	add	r3, r2
 800338e:	881b      	ldrh	r3, [r3, #0]
 8003390:	81bb      	strh	r3, [r7, #12]
 8003392:	89bb      	ldrh	r3, [r7, #12]
 8003394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003398:	2b00      	cmp	r3, #0
 800339a:	d01b      	beq.n	80033d4 <USB_DeactivateEndpoint+0x6c>
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	4413      	add	r3, r2
 80033a6:	881b      	ldrh	r3, [r3, #0]
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033b2:	817b      	strh	r3, [r7, #10]
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	441a      	add	r2, r3
 80033be:	897b      	ldrh	r3, [r7, #10]
 80033c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80033c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	4413      	add	r3, r2
 80033de:	881b      	ldrh	r3, [r3, #0]
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033ea:	813b      	strh	r3, [r7, #8]
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	441a      	add	r2, r3
 80033f6:	893b      	ldrh	r3, [r7, #8]
 80033f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80033fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003400:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003408:	b29b      	uxth	r3, r3
 800340a:	8013      	strh	r3, [r2, #0]
 800340c:	e192      	b.n	8003734 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	4413      	add	r3, r2
 8003418:	881b      	ldrh	r3, [r3, #0]
 800341a:	827b      	strh	r3, [r7, #18]
 800341c:	8a7b      	ldrh	r3, [r7, #18]
 800341e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d01b      	beq.n	800345e <USB_DeactivateEndpoint+0xf6>
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	4413      	add	r3, r2
 8003430:	881b      	ldrh	r3, [r3, #0]
 8003432:	b29b      	uxth	r3, r3
 8003434:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003438:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800343c:	823b      	strh	r3, [r7, #16]
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	441a      	add	r2, r3
 8003448:	8a3b      	ldrh	r3, [r7, #16]
 800344a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800344e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003452:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800345a:	b29b      	uxth	r3, r3
 800345c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	4413      	add	r3, r2
 8003468:	881b      	ldrh	r3, [r3, #0]
 800346a:	b29b      	uxth	r3, r3
 800346c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003474:	81fb      	strh	r3, [r7, #14]
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	441a      	add	r2, r3
 8003480:	89fb      	ldrh	r3, [r7, #14]
 8003482:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003486:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800348a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800348e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003492:	b29b      	uxth	r3, r3
 8003494:	8013      	strh	r3, [r2, #0]
 8003496:	e14d      	b.n	8003734 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	785b      	ldrb	r3, [r3, #1]
 800349c:	2b00      	cmp	r3, #0
 800349e:	f040 80a5 	bne.w	80035ec <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4413      	add	r3, r2
 80034ac:	881b      	ldrh	r3, [r3, #0]
 80034ae:	843b      	strh	r3, [r7, #32]
 80034b0:	8c3b      	ldrh	r3, [r7, #32]
 80034b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d01b      	beq.n	80034f2 <USB_DeactivateEndpoint+0x18a>
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	4413      	add	r3, r2
 80034c4:	881b      	ldrh	r3, [r3, #0]
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034d0:	83fb      	strh	r3, [r7, #30]
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	441a      	add	r2, r3
 80034dc:	8bfb      	ldrh	r3, [r7, #30]
 80034de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80034e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80034e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4413      	add	r3, r2
 80034fc:	881b      	ldrh	r3, [r3, #0]
 80034fe:	83bb      	strh	r3, [r7, #28]
 8003500:	8bbb      	ldrh	r3, [r7, #28]
 8003502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003506:	2b00      	cmp	r3, #0
 8003508:	d01b      	beq.n	8003542 <USB_DeactivateEndpoint+0x1da>
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4413      	add	r3, r2
 8003514:	881b      	ldrh	r3, [r3, #0]
 8003516:	b29b      	uxth	r3, r3
 8003518:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800351c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003520:	837b      	strh	r3, [r7, #26]
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	441a      	add	r2, r3
 800352c:	8b7b      	ldrh	r3, [r7, #26]
 800352e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003532:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800353a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800353e:	b29b      	uxth	r3, r3
 8003540:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	4413      	add	r3, r2
 800354c:	881b      	ldrh	r3, [r3, #0]
 800354e:	b29b      	uxth	r3, r3
 8003550:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003554:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003558:	833b      	strh	r3, [r7, #24]
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	441a      	add	r2, r3
 8003564:	8b3b      	ldrh	r3, [r7, #24]
 8003566:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800356a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800356e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003572:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003576:	b29b      	uxth	r3, r3
 8003578:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	4413      	add	r3, r2
 8003584:	881b      	ldrh	r3, [r3, #0]
 8003586:	b29b      	uxth	r3, r3
 8003588:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800358c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003590:	82fb      	strh	r3, [r7, #22]
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	441a      	add	r2, r3
 800359c:	8afb      	ldrh	r3, [r7, #22]
 800359e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	4413      	add	r3, r2
 80035bc:	881b      	ldrh	r3, [r3, #0]
 80035be:	b29b      	uxth	r3, r3
 80035c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035c8:	82bb      	strh	r3, [r7, #20]
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	441a      	add	r2, r3
 80035d4:	8abb      	ldrh	r3, [r7, #20]
 80035d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	8013      	strh	r3, [r2, #0]
 80035ea:	e0a3      	b.n	8003734 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	4413      	add	r3, r2
 80035f6:	881b      	ldrh	r3, [r3, #0]
 80035f8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80035fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80035fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d01b      	beq.n	800363c <USB_DeactivateEndpoint+0x2d4>
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	4413      	add	r3, r2
 800360e:	881b      	ldrh	r3, [r3, #0]
 8003610:	b29b      	uxth	r3, r3
 8003612:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800361a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	441a      	add	r2, r3
 8003626:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003628:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800362c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003630:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003638:	b29b      	uxth	r3, r3
 800363a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4413      	add	r3, r2
 8003646:	881b      	ldrh	r3, [r3, #0]
 8003648:	857b      	strh	r3, [r7, #42]	; 0x2a
 800364a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800364c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003650:	2b00      	cmp	r3, #0
 8003652:	d01b      	beq.n	800368c <USB_DeactivateEndpoint+0x324>
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4413      	add	r3, r2
 800365e:	881b      	ldrh	r3, [r3, #0]
 8003660:	b29b      	uxth	r3, r3
 8003662:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800366a:	853b      	strh	r3, [r7, #40]	; 0x28
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	441a      	add	r2, r3
 8003676:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003678:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800367c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003680:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003684:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003688:	b29b      	uxth	r3, r3
 800368a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	4413      	add	r3, r2
 8003696:	881b      	ldrh	r3, [r3, #0]
 8003698:	b29b      	uxth	r3, r3
 800369a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800369e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036a2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	441a      	add	r2, r3
 80036ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80036b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	4413      	add	r3, r2
 80036ce:	881b      	ldrh	r3, [r3, #0]
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036da:	84bb      	strh	r3, [r7, #36]	; 0x24
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	441a      	add	r2, r3
 80036e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80036e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	4413      	add	r3, r2
 8003706:	881b      	ldrh	r3, [r3, #0]
 8003708:	b29b      	uxth	r3, r3
 800370a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800370e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003712:	847b      	strh	r3, [r7, #34]	; 0x22
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	441a      	add	r2, r3
 800371e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003720:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003724:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003728:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800372c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003730:	b29b      	uxth	r3, r3
 8003732:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3734      	adds	r7, #52	; 0x34
 800373a:	46bd      	mov	sp, r7
 800373c:	bc80      	pop	{r7}
 800373e:	4770      	bx	lr

08003740 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b0c4      	sub	sp, #272	; 0x110
 8003744:	af00      	add	r7, sp, #0
 8003746:	1d3b      	adds	r3, r7, #4
 8003748:	6018      	str	r0, [r3, #0]
 800374a:	463b      	mov	r3, r7
 800374c:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800374e:	463b      	mov	r3, r7
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	785b      	ldrb	r3, [r3, #1]
 8003754:	2b01      	cmp	r3, #1
 8003756:	f040 8557 	bne.w	8004208 <USB_EPStartXfer+0xac8>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800375a:	463b      	mov	r3, r7
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	699a      	ldr	r2, [r3, #24]
 8003760:	463b      	mov	r3, r7
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	429a      	cmp	r2, r3
 8003768:	d905      	bls.n	8003776 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800376a:	463b      	mov	r3, r7
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003774:	e004      	b.n	8003780 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8003776:	463b      	mov	r3, r7
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003780:	463b      	mov	r3, r7
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	7b1b      	ldrb	r3, [r3, #12]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d12c      	bne.n	80037e4 <USB_EPStartXfer+0xa4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800378a:	463b      	mov	r3, r7
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	6959      	ldr	r1, [r3, #20]
 8003790:	463b      	mov	r3, r7
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	88da      	ldrh	r2, [r3, #6]
 8003796:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800379a:	b29b      	uxth	r3, r3
 800379c:	1d38      	adds	r0, r7, #4
 800379e:	6800      	ldr	r0, [r0, #0]
 80037a0:	f001 fa2c 	bl	8004bfc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80037a4:	1d3b      	adds	r3, r7, #4
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	617b      	str	r3, [r7, #20]
 80037aa:	1d3b      	adds	r3, r7, #4
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	461a      	mov	r2, r3
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	4413      	add	r3, r2
 80037ba:	617b      	str	r3, [r7, #20]
 80037bc:	463b      	mov	r3, r7
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	011a      	lsls	r2, r3, #4
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	4413      	add	r3, r2
 80037c8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80037cc:	f107 0310 	add.w	r3, r7, #16
 80037d0:	601a      	str	r2, [r3, #0]
 80037d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037d6:	b29a      	uxth	r2, r3
 80037d8:	f107 0310 	add.w	r3, r7, #16
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	801a      	strh	r2, [r3, #0]
 80037e0:	f000 bcdd 	b.w	800419e <USB_EPStartXfer+0xa5e>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80037e4:	463b      	mov	r3, r7
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	78db      	ldrb	r3, [r3, #3]
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	f040 8347 	bne.w	8003e7e <USB_EPStartXfer+0x73e>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80037f0:	463b      	mov	r3, r7
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	6a1a      	ldr	r2, [r3, #32]
 80037f6:	463b      	mov	r3, r7
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	691b      	ldr	r3, [r3, #16]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	f240 82eb 	bls.w	8003dd8 <USB_EPStartXfer+0x698>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8003802:	1d3b      	adds	r3, r7, #4
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	463b      	mov	r3, r7
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	4413      	add	r3, r2
 8003810:	881b      	ldrh	r3, [r3, #0]
 8003812:	b29b      	uxth	r3, r3
 8003814:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003818:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800381c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
 8003820:	1d3b      	adds	r3, r7, #4
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	463b      	mov	r3, r7
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	441a      	add	r2, r3
 800382e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8003832:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003836:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800383a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800383e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003842:	b29b      	uxth	r3, r3
 8003844:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8003846:	463b      	mov	r3, r7
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	6a1a      	ldr	r2, [r3, #32]
 800384c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003850:	1ad2      	subs	r2, r2, r3
 8003852:	463b      	mov	r3, r7
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003858:	1d3b      	adds	r3, r7, #4
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	463b      	mov	r3, r7
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	4413      	add	r3, r2
 8003866:	881b      	ldrh	r3, [r3, #0]
 8003868:	b29b      	uxth	r3, r3
 800386a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800386e:	2b00      	cmp	r3, #0
 8003870:	f000 8159 	beq.w	8003b26 <USB_EPStartXfer+0x3e6>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003874:	1d3b      	adds	r3, r7, #4
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	637b      	str	r3, [r7, #52]	; 0x34
 800387a:	463b      	mov	r3, r7
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	785b      	ldrb	r3, [r3, #1]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d164      	bne.n	800394e <USB_EPStartXfer+0x20e>
 8003884:	1d3b      	adds	r3, r7, #4
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	62fb      	str	r3, [r7, #44]	; 0x2c
 800388a:	1d3b      	adds	r3, r7, #4
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003892:	b29b      	uxth	r3, r3
 8003894:	461a      	mov	r2, r3
 8003896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003898:	4413      	add	r3, r2
 800389a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800389c:	463b      	mov	r3, r7
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	011a      	lsls	r2, r3, #4
 80038a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a6:	4413      	add	r3, r2
 80038a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80038ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80038ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d112      	bne.n	80038dc <USB_EPStartXfer+0x19c>
 80038b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b8:	881b      	ldrh	r3, [r3, #0]
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80038c0:	b29a      	uxth	r2, r3
 80038c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c4:	801a      	strh	r2, [r3, #0]
 80038c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c8:	881b      	ldrh	r3, [r3, #0]
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d8:	801a      	strh	r2, [r3, #0]
 80038da:	e054      	b.n	8003986 <USB_EPStartXfer+0x246>
 80038dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038e0:	2b3e      	cmp	r3, #62	; 0x3e
 80038e2:	d817      	bhi.n	8003914 <USB_EPStartXfer+0x1d4>
 80038e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038e8:	085b      	lsrs	r3, r3, #1
 80038ea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80038ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038f2:	f003 0301 	and.w	r3, r3, #1
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d004      	beq.n	8003904 <USB_EPStartXfer+0x1c4>
 80038fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038fe:	3301      	adds	r3, #1
 8003900:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003904:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003908:	b29b      	uxth	r3, r3
 800390a:	029b      	lsls	r3, r3, #10
 800390c:	b29a      	uxth	r2, r3
 800390e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003910:	801a      	strh	r2, [r3, #0]
 8003912:	e038      	b.n	8003986 <USB_EPStartXfer+0x246>
 8003914:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003918:	095b      	lsrs	r3, r3, #5
 800391a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800391e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003922:	f003 031f 	and.w	r3, r3, #31
 8003926:	2b00      	cmp	r3, #0
 8003928:	d104      	bne.n	8003934 <USB_EPStartXfer+0x1f4>
 800392a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800392e:	3b01      	subs	r3, #1
 8003930:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003934:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003938:	b29b      	uxth	r3, r3
 800393a:	029b      	lsls	r3, r3, #10
 800393c:	b29b      	uxth	r3, r3
 800393e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003942:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003946:	b29a      	uxth	r2, r3
 8003948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394a:	801a      	strh	r2, [r3, #0]
 800394c:	e01b      	b.n	8003986 <USB_EPStartXfer+0x246>
 800394e:	463b      	mov	r3, r7
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	785b      	ldrb	r3, [r3, #1]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d116      	bne.n	8003986 <USB_EPStartXfer+0x246>
 8003958:	1d3b      	adds	r3, r7, #4
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003960:	b29b      	uxth	r3, r3
 8003962:	461a      	mov	r2, r3
 8003964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003966:	4413      	add	r3, r2
 8003968:	637b      	str	r3, [r7, #52]	; 0x34
 800396a:	463b      	mov	r3, r7
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	011a      	lsls	r2, r3, #4
 8003972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003974:	4413      	add	r3, r2
 8003976:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800397a:	633b      	str	r3, [r7, #48]	; 0x30
 800397c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003980:	b29a      	uxth	r2, r3
 8003982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003984:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003986:	463b      	mov	r3, r7
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	895b      	ldrh	r3, [r3, #10]
 800398c:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003990:	463b      	mov	r3, r7
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	6959      	ldr	r1, [r3, #20]
 8003996:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800399a:	b29b      	uxth	r3, r3
 800399c:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80039a0:	1d38      	adds	r0, r7, #4
 80039a2:	6800      	ldr	r0, [r0, #0]
 80039a4:	f001 f92a 	bl	8004bfc <USB_WritePMA>
            ep->xfer_buff += len;
 80039a8:	463b      	mov	r3, r7
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	695a      	ldr	r2, [r3, #20]
 80039ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039b2:	441a      	add	r2, r3
 80039b4:	463b      	mov	r3, r7
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80039ba:	463b      	mov	r3, r7
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6a1a      	ldr	r2, [r3, #32]
 80039c0:	463b      	mov	r3, r7
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d909      	bls.n	80039de <USB_EPStartXfer+0x29e>
            {
              ep->xfer_len_db -= len;
 80039ca:	463b      	mov	r3, r7
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	6a1a      	ldr	r2, [r3, #32]
 80039d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039d4:	1ad2      	subs	r2, r2, r3
 80039d6:	463b      	mov	r3, r7
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	621a      	str	r2, [r3, #32]
 80039dc:	e008      	b.n	80039f0 <USB_EPStartXfer+0x2b0>
            }
            else
            {
              len = ep->xfer_len_db;
 80039de:	463b      	mov	r3, r7
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6a1b      	ldr	r3, [r3, #32]
 80039e4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 80039e8:	463b      	mov	r3, r7
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2200      	movs	r2, #0
 80039ee:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80039f0:	463b      	mov	r3, r7
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	785b      	ldrb	r3, [r3, #1]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d164      	bne.n	8003ac4 <USB_EPStartXfer+0x384>
 80039fa:	1d3b      	adds	r3, r7, #4
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	61fb      	str	r3, [r7, #28]
 8003a00:	1d3b      	adds	r3, r7, #4
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	4413      	add	r3, r2
 8003a10:	61fb      	str	r3, [r7, #28]
 8003a12:	463b      	mov	r3, r7
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	011a      	lsls	r2, r3, #4
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003a22:	61bb      	str	r3, [r7, #24]
 8003a24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d112      	bne.n	8003a52 <USB_EPStartXfer+0x312>
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	881b      	ldrh	r3, [r3, #0]
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	801a      	strh	r2, [r3, #0]
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	881b      	ldrh	r3, [r3, #0]
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	801a      	strh	r2, [r3, #0]
 8003a50:	e057      	b.n	8003b02 <USB_EPStartXfer+0x3c2>
 8003a52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a56:	2b3e      	cmp	r3, #62	; 0x3e
 8003a58:	d817      	bhi.n	8003a8a <USB_EPStartXfer+0x34a>
 8003a5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a5e:	085b      	lsrs	r3, r3, #1
 8003a60:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003a64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a68:	f003 0301 	and.w	r3, r3, #1
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d004      	beq.n	8003a7a <USB_EPStartXfer+0x33a>
 8003a70:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003a74:	3301      	adds	r3, #1
 8003a76:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003a7a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	029b      	lsls	r3, r3, #10
 8003a82:	b29a      	uxth	r2, r3
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	801a      	strh	r2, [r3, #0]
 8003a88:	e03b      	b.n	8003b02 <USB_EPStartXfer+0x3c2>
 8003a8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a8e:	095b      	lsrs	r3, r3, #5
 8003a90:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003a94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a98:	f003 031f 	and.w	r3, r3, #31
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d104      	bne.n	8003aaa <USB_EPStartXfer+0x36a>
 8003aa0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003aaa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	029b      	lsls	r3, r3, #10
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ab8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003abc:	b29a      	uxth	r2, r3
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	801a      	strh	r2, [r3, #0]
 8003ac2:	e01e      	b.n	8003b02 <USB_EPStartXfer+0x3c2>
 8003ac4:	463b      	mov	r3, r7
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	785b      	ldrb	r3, [r3, #1]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d119      	bne.n	8003b02 <USB_EPStartXfer+0x3c2>
 8003ace:	1d3b      	adds	r3, r7, #4
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ad4:	1d3b      	adds	r3, r7, #4
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	461a      	mov	r2, r3
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae2:	4413      	add	r3, r2
 8003ae4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ae6:	463b      	mov	r3, r7
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	011a      	lsls	r2, r3, #4
 8003aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af0:	4413      	add	r3, r2
 8003af2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003af6:	623b      	str	r3, [r7, #32]
 8003af8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003afc:	b29a      	uxth	r2, r3
 8003afe:	6a3b      	ldr	r3, [r7, #32]
 8003b00:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003b02:	463b      	mov	r3, r7
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	891b      	ldrh	r3, [r3, #8]
 8003b08:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003b0c:	463b      	mov	r3, r7
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	6959      	ldr	r1, [r3, #20]
 8003b12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003b1c:	1d38      	adds	r0, r7, #4
 8003b1e:	6800      	ldr	r0, [r0, #0]
 8003b20:	f001 f86c 	bl	8004bfc <USB_WritePMA>
 8003b24:	e33b      	b.n	800419e <USB_EPStartXfer+0xa5e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003b26:	463b      	mov	r3, r7
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	785b      	ldrb	r3, [r3, #1]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d164      	bne.n	8003bfa <USB_EPStartXfer+0x4ba>
 8003b30:	1d3b      	adds	r3, r7, #4
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b36:	1d3b      	adds	r3, r7, #4
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	461a      	mov	r2, r3
 8003b42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b44:	4413      	add	r3, r2
 8003b46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b48:	463b      	mov	r3, r7
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	011a      	lsls	r2, r3, #4
 8003b50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b52:	4413      	add	r3, r2
 8003b54:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003b58:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d112      	bne.n	8003b88 <USB_EPStartXfer+0x448>
 8003b62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b64:	881b      	ldrh	r3, [r3, #0]
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b70:	801a      	strh	r2, [r3, #0]
 8003b72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b74:	881b      	ldrh	r3, [r3, #0]
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b80:	b29a      	uxth	r2, r3
 8003b82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b84:	801a      	strh	r2, [r3, #0]
 8003b86:	e057      	b.n	8003c38 <USB_EPStartXfer+0x4f8>
 8003b88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b8c:	2b3e      	cmp	r3, #62	; 0x3e
 8003b8e:	d817      	bhi.n	8003bc0 <USB_EPStartXfer+0x480>
 8003b90:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b94:	085b      	lsrs	r3, r3, #1
 8003b96:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003b9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d004      	beq.n	8003bb0 <USB_EPStartXfer+0x470>
 8003ba6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003baa:	3301      	adds	r3, #1
 8003bac:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003bb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	029b      	lsls	r3, r3, #10
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bbc:	801a      	strh	r2, [r3, #0]
 8003bbe:	e03b      	b.n	8003c38 <USB_EPStartXfer+0x4f8>
 8003bc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bc4:	095b      	lsrs	r3, r3, #5
 8003bc6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003bca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bce:	f003 031f 	and.w	r3, r3, #31
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d104      	bne.n	8003be0 <USB_EPStartXfer+0x4a0>
 8003bd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003be0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	029b      	lsls	r3, r3, #10
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bf6:	801a      	strh	r2, [r3, #0]
 8003bf8:	e01e      	b.n	8003c38 <USB_EPStartXfer+0x4f8>
 8003bfa:	463b      	mov	r3, r7
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	785b      	ldrb	r3, [r3, #1]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d119      	bne.n	8003c38 <USB_EPStartXfer+0x4f8>
 8003c04:	1d3b      	adds	r3, r7, #4
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	657b      	str	r3, [r7, #84]	; 0x54
 8003c0a:	1d3b      	adds	r3, r7, #4
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	461a      	mov	r2, r3
 8003c16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c18:	4413      	add	r3, r2
 8003c1a:	657b      	str	r3, [r7, #84]	; 0x54
 8003c1c:	463b      	mov	r3, r7
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	011a      	lsls	r2, r3, #4
 8003c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c26:	4413      	add	r3, r2
 8003c28:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003c2c:	653b      	str	r3, [r7, #80]	; 0x50
 8003c2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c36:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8003c38:	463b      	mov	r3, r7
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	891b      	ldrh	r3, [r3, #8]
 8003c3e:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003c42:	463b      	mov	r3, r7
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	6959      	ldr	r1, [r3, #20]
 8003c48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003c52:	1d38      	adds	r0, r7, #4
 8003c54:	6800      	ldr	r0, [r0, #0]
 8003c56:	f000 ffd1 	bl	8004bfc <USB_WritePMA>
            ep->xfer_buff += len;
 8003c5a:	463b      	mov	r3, r7
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	695a      	ldr	r2, [r3, #20]
 8003c60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c64:	441a      	add	r2, r3
 8003c66:	463b      	mov	r3, r7
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8003c6c:	463b      	mov	r3, r7
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6a1a      	ldr	r2, [r3, #32]
 8003c72:	463b      	mov	r3, r7
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d909      	bls.n	8003c90 <USB_EPStartXfer+0x550>
            {
              ep->xfer_len_db -= len;
 8003c7c:	463b      	mov	r3, r7
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	6a1a      	ldr	r2, [r3, #32]
 8003c82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c86:	1ad2      	subs	r2, r2, r3
 8003c88:	463b      	mov	r3, r7
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	621a      	str	r2, [r3, #32]
 8003c8e:	e008      	b.n	8003ca2 <USB_EPStartXfer+0x562>
            }
            else
            {
              len = ep->xfer_len_db;
 8003c90:	463b      	mov	r3, r7
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
              ep->xfer_len_db = 0U;
 8003c9a:	463b      	mov	r3, r7
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003ca2:	1d3b      	adds	r3, r7, #4
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	647b      	str	r3, [r7, #68]	; 0x44
 8003ca8:	463b      	mov	r3, r7
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	785b      	ldrb	r3, [r3, #1]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d164      	bne.n	8003d7c <USB_EPStartXfer+0x63c>
 8003cb2:	1d3b      	adds	r3, r7, #4
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cb8:	1d3b      	adds	r3, r7, #4
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cc6:	4413      	add	r3, r2
 8003cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cca:	463b      	mov	r3, r7
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	011a      	lsls	r2, r3, #4
 8003cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cd4:	4413      	add	r3, r2
 8003cd6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003cda:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d112      	bne.n	8003d0a <USB_EPStartXfer+0x5ca>
 8003ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce6:	881b      	ldrh	r3, [r3, #0]
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf2:	801a      	strh	r2, [r3, #0]
 8003cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf6:	881b      	ldrh	r3, [r3, #0]
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d06:	801a      	strh	r2, [r3, #0]
 8003d08:	e054      	b.n	8003db4 <USB_EPStartXfer+0x674>
 8003d0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d0e:	2b3e      	cmp	r3, #62	; 0x3e
 8003d10:	d817      	bhi.n	8003d42 <USB_EPStartXfer+0x602>
 8003d12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d16:	085b      	lsrs	r3, r3, #1
 8003d18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003d1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d004      	beq.n	8003d32 <USB_EPStartXfer+0x5f2>
 8003d28:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003d32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	029b      	lsls	r3, r3, #10
 8003d3a:	b29a      	uxth	r2, r3
 8003d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d3e:	801a      	strh	r2, [r3, #0]
 8003d40:	e038      	b.n	8003db4 <USB_EPStartXfer+0x674>
 8003d42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d46:	095b      	lsrs	r3, r3, #5
 8003d48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003d4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d50:	f003 031f 	and.w	r3, r3, #31
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d104      	bne.n	8003d62 <USB_EPStartXfer+0x622>
 8003d58:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003d62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	029b      	lsls	r3, r3, #10
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d78:	801a      	strh	r2, [r3, #0]
 8003d7a:	e01b      	b.n	8003db4 <USB_EPStartXfer+0x674>
 8003d7c:	463b      	mov	r3, r7
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	785b      	ldrb	r3, [r3, #1]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d116      	bne.n	8003db4 <USB_EPStartXfer+0x674>
 8003d86:	1d3b      	adds	r3, r7, #4
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	461a      	mov	r2, r3
 8003d92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d94:	4413      	add	r3, r2
 8003d96:	647b      	str	r3, [r7, #68]	; 0x44
 8003d98:	463b      	mov	r3, r7
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	011a      	lsls	r2, r3, #4
 8003da0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003da2:	4413      	add	r3, r2
 8003da4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003da8:	643b      	str	r3, [r7, #64]	; 0x40
 8003daa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003db2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8003db4:	463b      	mov	r3, r7
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	895b      	ldrh	r3, [r3, #10]
 8003dba:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003dbe:	463b      	mov	r3, r7
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	6959      	ldr	r1, [r3, #20]
 8003dc4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003dce:	1d38      	adds	r0, r7, #4
 8003dd0:	6800      	ldr	r0, [r0, #0]
 8003dd2:	f000 ff13 	bl	8004bfc <USB_WritePMA>
 8003dd6:	e1e2      	b.n	800419e <USB_EPStartXfer+0xa5e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8003dd8:	463b      	mov	r3, r7
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8003de2:	1d3b      	adds	r3, r7, #4
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	463b      	mov	r3, r7
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	4413      	add	r3, r2
 8003df0:	881b      	ldrh	r3, [r3, #0]
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8003df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dfc:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8003e00:	1d3b      	adds	r3, r7, #4
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	463b      	mov	r3, r7
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	441a      	add	r2, r3
 8003e0e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8003e12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003e26:	1d3b      	adds	r3, r7, #4
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	663b      	str	r3, [r7, #96]	; 0x60
 8003e2c:	1d3b      	adds	r3, r7, #4
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	461a      	mov	r2, r3
 8003e38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e3a:	4413      	add	r3, r2
 8003e3c:	663b      	str	r3, [r7, #96]	; 0x60
 8003e3e:	463b      	mov	r3, r7
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	011a      	lsls	r2, r3, #4
 8003e46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e48:	4413      	add	r3, r2
 8003e4a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003e4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e58:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8003e5a:	463b      	mov	r3, r7
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	891b      	ldrh	r3, [r3, #8]
 8003e60:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003e64:	463b      	mov	r3, r7
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6959      	ldr	r1, [r3, #20]
 8003e6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 8003e74:	1d38      	adds	r0, r7, #4
 8003e76:	6800      	ldr	r0, [r0, #0]
 8003e78:	f000 fec0 	bl	8004bfc <USB_WritePMA>
 8003e7c:	e18f      	b.n	800419e <USB_EPStartXfer+0xa5e>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* Write the data to the USB endpoint */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003e7e:	1d3b      	adds	r3, r7, #4
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	463b      	mov	r3, r7
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	4413      	add	r3, r2
 8003e8c:	881b      	ldrh	r3, [r3, #0]
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	f000 808f 	beq.w	8003fb8 <USB_EPStartXfer+0x878>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003e9a:	1d3b      	adds	r3, r7, #4
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ea0:	463b      	mov	r3, r7
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	785b      	ldrb	r3, [r3, #1]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d164      	bne.n	8003f74 <USB_EPStartXfer+0x834>
 8003eaa:	1d3b      	adds	r3, r7, #4
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	673b      	str	r3, [r7, #112]	; 0x70
 8003eb0:	1d3b      	adds	r3, r7, #4
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	461a      	mov	r2, r3
 8003ebc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ebe:	4413      	add	r3, r2
 8003ec0:	673b      	str	r3, [r7, #112]	; 0x70
 8003ec2:	463b      	mov	r3, r7
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	011a      	lsls	r2, r3, #4
 8003eca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ecc:	4413      	add	r3, r2
 8003ece:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003ed2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ed4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d112      	bne.n	8003f02 <USB_EPStartXfer+0x7c2>
 8003edc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ede:	881b      	ldrh	r3, [r3, #0]
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eea:	801a      	strh	r2, [r3, #0]
 8003eec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eee:	881b      	ldrh	r3, [r3, #0]
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ef6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003efe:	801a      	strh	r2, [r3, #0]
 8003f00:	e054      	b.n	8003fac <USB_EPStartXfer+0x86c>
 8003f02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f06:	2b3e      	cmp	r3, #62	; 0x3e
 8003f08:	d817      	bhi.n	8003f3a <USB_EPStartXfer+0x7fa>
 8003f0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f0e:	085b      	lsrs	r3, r3, #1
 8003f10:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003f14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f18:	f003 0301 	and.w	r3, r3, #1
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d004      	beq.n	8003f2a <USB_EPStartXfer+0x7ea>
 8003f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f24:	3301      	adds	r3, #1
 8003f26:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	029b      	lsls	r3, r3, #10
 8003f32:	b29a      	uxth	r2, r3
 8003f34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f36:	801a      	strh	r2, [r3, #0]
 8003f38:	e038      	b.n	8003fac <USB_EPStartXfer+0x86c>
 8003f3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f3e:	095b      	lsrs	r3, r3, #5
 8003f40:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003f44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f48:	f003 031f 	and.w	r3, r3, #31
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d104      	bne.n	8003f5a <USB_EPStartXfer+0x81a>
 8003f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f54:	3b01      	subs	r3, #1
 8003f56:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	029b      	lsls	r3, r3, #10
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f70:	801a      	strh	r2, [r3, #0]
 8003f72:	e01b      	b.n	8003fac <USB_EPStartXfer+0x86c>
 8003f74:	463b      	mov	r3, r7
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	785b      	ldrb	r3, [r3, #1]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d116      	bne.n	8003fac <USB_EPStartXfer+0x86c>
 8003f7e:	1d3b      	adds	r3, r7, #4
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	461a      	mov	r2, r3
 8003f8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f8c:	4413      	add	r3, r2
 8003f8e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f90:	463b      	mov	r3, r7
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	011a      	lsls	r2, r3, #4
 8003f98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f9a:	4413      	add	r3, r2
 8003f9c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003fa0:	677b      	str	r3, [r7, #116]	; 0x74
 8003fa2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fa6:	b29a      	uxth	r2, r3
 8003fa8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003faa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8003fac:	463b      	mov	r3, r7
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	895b      	ldrh	r3, [r3, #10]
 8003fb2:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
 8003fb6:	e097      	b.n	80040e8 <USB_EPStartXfer+0x9a8>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003fb8:	463b      	mov	r3, r7
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	785b      	ldrb	r3, [r3, #1]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d168      	bne.n	8004094 <USB_EPStartXfer+0x954>
 8003fc2:	1d3b      	adds	r3, r7, #4
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003fca:	1d3b      	adds	r3, r7, #4
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003fda:	4413      	add	r3, r2
 8003fdc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003fe0:	463b      	mov	r3, r7
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	011a      	lsls	r2, r3, #4
 8003fe8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003fec:	4413      	add	r3, r2
 8003fee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ff2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003ff4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d112      	bne.n	8004022 <USB_EPStartXfer+0x8e2>
 8003ffc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ffe:	881b      	ldrh	r3, [r3, #0]
 8004000:	b29b      	uxth	r3, r3
 8004002:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004006:	b29a      	uxth	r2, r3
 8004008:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800400a:	801a      	strh	r2, [r3, #0]
 800400c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800400e:	881b      	ldrh	r3, [r3, #0]
 8004010:	b29b      	uxth	r3, r3
 8004012:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004016:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800401a:	b29a      	uxth	r2, r3
 800401c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800401e:	801a      	strh	r2, [r3, #0]
 8004020:	e05d      	b.n	80040de <USB_EPStartXfer+0x99e>
 8004022:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004026:	2b3e      	cmp	r3, #62	; 0x3e
 8004028:	d817      	bhi.n	800405a <USB_EPStartXfer+0x91a>
 800402a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800402e:	085b      	lsrs	r3, r3, #1
 8004030:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004034:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	2b00      	cmp	r3, #0
 800403e:	d004      	beq.n	800404a <USB_EPStartXfer+0x90a>
 8004040:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004044:	3301      	adds	r3, #1
 8004046:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800404a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800404e:	b29b      	uxth	r3, r3
 8004050:	029b      	lsls	r3, r3, #10
 8004052:	b29a      	uxth	r2, r3
 8004054:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004056:	801a      	strh	r2, [r3, #0]
 8004058:	e041      	b.n	80040de <USB_EPStartXfer+0x99e>
 800405a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800405e:	095b      	lsrs	r3, r3, #5
 8004060:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004064:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004068:	f003 031f 	and.w	r3, r3, #31
 800406c:	2b00      	cmp	r3, #0
 800406e:	d104      	bne.n	800407a <USB_EPStartXfer+0x93a>
 8004070:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004074:	3b01      	subs	r3, #1
 8004076:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800407a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800407e:	b29b      	uxth	r3, r3
 8004080:	029b      	lsls	r3, r3, #10
 8004082:	b29b      	uxth	r3, r3
 8004084:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004088:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800408c:	b29a      	uxth	r2, r3
 800408e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004090:	801a      	strh	r2, [r3, #0]
 8004092:	e024      	b.n	80040de <USB_EPStartXfer+0x99e>
 8004094:	463b      	mov	r3, r7
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	785b      	ldrb	r3, [r3, #1]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d11f      	bne.n	80040de <USB_EPStartXfer+0x99e>
 800409e:	1d3b      	adds	r3, r7, #4
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80040a6:	1d3b      	adds	r3, r7, #4
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	461a      	mov	r2, r3
 80040b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80040b6:	4413      	add	r3, r2
 80040b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80040bc:	463b      	mov	r3, r7
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	011a      	lsls	r2, r3, #4
 80040c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80040c8:	4413      	add	r3, r2
 80040ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80040ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80040d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040d6:	b29a      	uxth	r2, r3
 80040d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040dc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80040de:	463b      	mov	r3, r7
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	891b      	ldrh	r3, [r3, #8]
 80040e4:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
        }

        USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80040e8:	463b      	mov	r3, r7
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	6959      	ldr	r1, [r3, #20]
 80040ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	f8b7 210a 	ldrh.w	r2, [r7, #266]	; 0x10a
 80040f8:	1d38      	adds	r0, r7, #4
 80040fa:	6800      	ldr	r0, [r0, #0]
 80040fc:	f000 fd7e 	bl	8004bfc <USB_WritePMA>
        PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8004100:	463b      	mov	r3, r7
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	785b      	ldrb	r3, [r3, #1]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d122      	bne.n	8004150 <USB_EPStartXfer+0xa10>
 800410a:	1d3b      	adds	r3, r7, #4
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	463b      	mov	r3, r7
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	4413      	add	r3, r2
 8004118:	881b      	ldrh	r3, [r3, #0]
 800411a:	b29b      	uxth	r3, r3
 800411c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004120:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004124:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8004128:	1d3b      	adds	r3, r7, #4
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	463b      	mov	r3, r7
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	441a      	add	r2, r3
 8004136:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800413a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800413e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004142:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004146:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800414a:	b29b      	uxth	r3, r3
 800414c:	8013      	strh	r3, [r2, #0]
 800414e:	e026      	b.n	800419e <USB_EPStartXfer+0xa5e>
 8004150:	463b      	mov	r3, r7
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	785b      	ldrb	r3, [r3, #1]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d121      	bne.n	800419e <USB_EPStartXfer+0xa5e>
 800415a:	1d3b      	adds	r3, r7, #4
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	463b      	mov	r3, r7
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	4413      	add	r3, r2
 8004168:	881b      	ldrh	r3, [r3, #0]
 800416a:	b29b      	uxth	r3, r3
 800416c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004170:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004174:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8004178:	1d3b      	adds	r3, r7, #4
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	463b      	mov	r3, r7
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	441a      	add	r2, r3
 8004186:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 800418a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800418e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004192:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800419a:	b29b      	uxth	r3, r3
 800419c:	8013      	strh	r3, [r2, #0]
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800419e:	1d3b      	adds	r3, r7, #4
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	463b      	mov	r3, r7
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	4413      	add	r3, r2
 80041ac:	881b      	ldrh	r3, [r3, #0]
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	f107 020e 	add.w	r2, r7, #14
 80041b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041bc:	8013      	strh	r3, [r2, #0]
 80041be:	f107 030e 	add.w	r3, r7, #14
 80041c2:	f107 020e 	add.w	r2, r7, #14
 80041c6:	8812      	ldrh	r2, [r2, #0]
 80041c8:	f082 0210 	eor.w	r2, r2, #16
 80041cc:	801a      	strh	r2, [r3, #0]
 80041ce:	f107 030e 	add.w	r3, r7, #14
 80041d2:	f107 020e 	add.w	r2, r7, #14
 80041d6:	8812      	ldrh	r2, [r2, #0]
 80041d8:	f082 0220 	eor.w	r2, r2, #32
 80041dc:	801a      	strh	r2, [r3, #0]
 80041de:	1d3b      	adds	r3, r7, #4
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	463b      	mov	r3, r7
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	441a      	add	r2, r3
 80041ec:	f107 030e 	add.w	r3, r7, #14
 80041f0:	881b      	ldrh	r3, [r3, #0]
 80041f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004202:	b29b      	uxth	r3, r3
 8004204:	8013      	strh	r3, [r2, #0]
 8004206:	e3b5      	b.n	8004974 <USB_EPStartXfer+0x1234>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8004208:	463b      	mov	r3, r7
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	7b1b      	ldrb	r3, [r3, #12]
 800420e:	2b00      	cmp	r3, #0
 8004210:	f040 8090 	bne.w	8004334 <USB_EPStartXfer+0xbf4>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8004214:	463b      	mov	r3, r7
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	699a      	ldr	r2, [r3, #24]
 800421a:	463b      	mov	r3, r7
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	429a      	cmp	r2, r3
 8004222:	d90e      	bls.n	8004242 <USB_EPStartXfer+0xb02>
      {
        len = ep->maxpacket;
 8004224:	463b      	mov	r3, r7
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len -= len;
 800422e:	463b      	mov	r3, r7
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	699a      	ldr	r2, [r3, #24]
 8004234:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004238:	1ad2      	subs	r2, r2, r3
 800423a:	463b      	mov	r3, r7
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	619a      	str	r2, [r3, #24]
 8004240:	e008      	b.n	8004254 <USB_EPStartXfer+0xb14>
      }
      else
      {
        len = ep->xfer_len;
 8004242:	463b      	mov	r3, r7
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        ep->xfer_len = 0U;
 800424c:	463b      	mov	r3, r7
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2200      	movs	r2, #0
 8004252:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004254:	1d3b      	adds	r3, r7, #4
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800425c:	1d3b      	adds	r3, r7, #4
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004264:	b29b      	uxth	r3, r3
 8004266:	461a      	mov	r2, r3
 8004268:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800426c:	4413      	add	r3, r2
 800426e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004272:	463b      	mov	r3, r7
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	011a      	lsls	r2, r3, #4
 800427a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800427e:	4413      	add	r3, r2
 8004280:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004284:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004288:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800428c:	2b00      	cmp	r3, #0
 800428e:	d116      	bne.n	80042be <USB_EPStartXfer+0xb7e>
 8004290:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004294:	881b      	ldrh	r3, [r3, #0]
 8004296:	b29b      	uxth	r3, r3
 8004298:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800429c:	b29a      	uxth	r2, r3
 800429e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042a2:	801a      	strh	r2, [r3, #0]
 80042a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042a8:	881b      	ldrh	r3, [r3, #0]
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042ba:	801a      	strh	r2, [r3, #0]
 80042bc:	e32c      	b.n	8004918 <USB_EPStartXfer+0x11d8>
 80042be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042c2:	2b3e      	cmp	r3, #62	; 0x3e
 80042c4:	d818      	bhi.n	80042f8 <USB_EPStartXfer+0xbb8>
 80042c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042ca:	085b      	lsrs	r3, r3, #1
 80042cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80042d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d004      	beq.n	80042e6 <USB_EPStartXfer+0xba6>
 80042dc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80042e0:	3301      	adds	r3, #1
 80042e2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80042e6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	029b      	lsls	r3, r3, #10
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042f4:	801a      	strh	r2, [r3, #0]
 80042f6:	e30f      	b.n	8004918 <USB_EPStartXfer+0x11d8>
 80042f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042fc:	095b      	lsrs	r3, r3, #5
 80042fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004302:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004306:	f003 031f 	and.w	r3, r3, #31
 800430a:	2b00      	cmp	r3, #0
 800430c:	d104      	bne.n	8004318 <USB_EPStartXfer+0xbd8>
 800430e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004312:	3b01      	subs	r3, #1
 8004314:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004318:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800431c:	b29b      	uxth	r3, r3
 800431e:	029b      	lsls	r3, r3, #10
 8004320:	b29b      	uxth	r3, r3
 8004322:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004326:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800432a:	b29a      	uxth	r2, r3
 800432c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004330:	801a      	strh	r2, [r3, #0]
 8004332:	e2f1      	b.n	8004918 <USB_EPStartXfer+0x11d8>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8004334:	463b      	mov	r3, r7
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	78db      	ldrb	r3, [r3, #3]
 800433a:	2b02      	cmp	r3, #2
 800433c:	f040 818f 	bne.w	800465e <USB_EPStartXfer+0xf1e>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004340:	463b      	mov	r3, r7
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	785b      	ldrb	r3, [r3, #1]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d175      	bne.n	8004436 <USB_EPStartXfer+0xcf6>
 800434a:	1d3b      	adds	r3, r7, #4
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004352:	1d3b      	adds	r3, r7, #4
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800435a:	b29b      	uxth	r3, r3
 800435c:	461a      	mov	r2, r3
 800435e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004362:	4413      	add	r3, r2
 8004364:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004368:	463b      	mov	r3, r7
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	011a      	lsls	r2, r3, #4
 8004370:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004374:	4413      	add	r3, r2
 8004376:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800437a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800437e:	463b      	mov	r3, r7
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d116      	bne.n	80043b6 <USB_EPStartXfer+0xc76>
 8004388:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800438c:	881b      	ldrh	r3, [r3, #0]
 800438e:	b29b      	uxth	r3, r3
 8004390:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004394:	b29a      	uxth	r2, r3
 8004396:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800439a:	801a      	strh	r2, [r3, #0]
 800439c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80043a0:	881b      	ldrh	r3, [r3, #0]
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043ac:	b29a      	uxth	r2, r3
 80043ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80043b2:	801a      	strh	r2, [r3, #0]
 80043b4:	e065      	b.n	8004482 <USB_EPStartXfer+0xd42>
 80043b6:	463b      	mov	r3, r7
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	2b3e      	cmp	r3, #62	; 0x3e
 80043be:	d81a      	bhi.n	80043f6 <USB_EPStartXfer+0xcb6>
 80043c0:	463b      	mov	r3, r7
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	085b      	lsrs	r3, r3, #1
 80043c8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80043cc:	463b      	mov	r3, r7
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	f003 0301 	and.w	r3, r3, #1
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d004      	beq.n	80043e4 <USB_EPStartXfer+0xca4>
 80043da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80043de:	3301      	adds	r3, #1
 80043e0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80043e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	029b      	lsls	r3, r3, #10
 80043ec:	b29a      	uxth	r2, r3
 80043ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80043f2:	801a      	strh	r2, [r3, #0]
 80043f4:	e045      	b.n	8004482 <USB_EPStartXfer+0xd42>
 80043f6:	463b      	mov	r3, r7
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	095b      	lsrs	r3, r3, #5
 80043fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004402:	463b      	mov	r3, r7
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	f003 031f 	and.w	r3, r3, #31
 800440c:	2b00      	cmp	r3, #0
 800440e:	d104      	bne.n	800441a <USB_EPStartXfer+0xcda>
 8004410:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004414:	3b01      	subs	r3, #1
 8004416:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800441a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800441e:	b29b      	uxth	r3, r3
 8004420:	029b      	lsls	r3, r3, #10
 8004422:	b29b      	uxth	r3, r3
 8004424:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004428:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800442c:	b29a      	uxth	r2, r3
 800442e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004432:	801a      	strh	r2, [r3, #0]
 8004434:	e025      	b.n	8004482 <USB_EPStartXfer+0xd42>
 8004436:	463b      	mov	r3, r7
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	785b      	ldrb	r3, [r3, #1]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d120      	bne.n	8004482 <USB_EPStartXfer+0xd42>
 8004440:	1d3b      	adds	r3, r7, #4
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004448:	1d3b      	adds	r3, r7, #4
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004450:	b29b      	uxth	r3, r3
 8004452:	461a      	mov	r2, r3
 8004454:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004458:	4413      	add	r3, r2
 800445a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800445e:	463b      	mov	r3, r7
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	011a      	lsls	r2, r3, #4
 8004466:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800446a:	4413      	add	r3, r2
 800446c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004470:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004474:	463b      	mov	r3, r7
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	b29a      	uxth	r2, r3
 800447c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004480:	801a      	strh	r2, [r3, #0]
 8004482:	1d3b      	adds	r3, r7, #4
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800448a:	463b      	mov	r3, r7
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	785b      	ldrb	r3, [r3, #1]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d175      	bne.n	8004580 <USB_EPStartXfer+0xe40>
 8004494:	1d3b      	adds	r3, r7, #4
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800449c:	1d3b      	adds	r3, r7, #4
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	461a      	mov	r2, r3
 80044a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80044ac:	4413      	add	r3, r2
 80044ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80044b2:	463b      	mov	r3, r7
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	011a      	lsls	r2, r3, #4
 80044ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80044be:	4413      	add	r3, r2
 80044c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80044c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80044c8:	463b      	mov	r3, r7
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d116      	bne.n	8004500 <USB_EPStartXfer+0xdc0>
 80044d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80044d6:	881b      	ldrh	r3, [r3, #0]
 80044d8:	b29b      	uxth	r3, r3
 80044da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80044de:	b29a      	uxth	r2, r3
 80044e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80044e4:	801a      	strh	r2, [r3, #0]
 80044e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80044ea:	881b      	ldrh	r3, [r3, #0]
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044f6:	b29a      	uxth	r2, r3
 80044f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80044fc:	801a      	strh	r2, [r3, #0]
 80044fe:	e061      	b.n	80045c4 <USB_EPStartXfer+0xe84>
 8004500:	463b      	mov	r3, r7
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	2b3e      	cmp	r3, #62	; 0x3e
 8004508:	d81a      	bhi.n	8004540 <USB_EPStartXfer+0xe00>
 800450a:	463b      	mov	r3, r7
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	085b      	lsrs	r3, r3, #1
 8004512:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004516:	463b      	mov	r3, r7
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	2b00      	cmp	r3, #0
 8004522:	d004      	beq.n	800452e <USB_EPStartXfer+0xdee>
 8004524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004528:	3301      	adds	r3, #1
 800452a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800452e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004532:	b29b      	uxth	r3, r3
 8004534:	029b      	lsls	r3, r3, #10
 8004536:	b29a      	uxth	r2, r3
 8004538:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800453c:	801a      	strh	r2, [r3, #0]
 800453e:	e041      	b.n	80045c4 <USB_EPStartXfer+0xe84>
 8004540:	463b      	mov	r3, r7
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	095b      	lsrs	r3, r3, #5
 8004548:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800454c:	463b      	mov	r3, r7
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	f003 031f 	and.w	r3, r3, #31
 8004556:	2b00      	cmp	r3, #0
 8004558:	d104      	bne.n	8004564 <USB_EPStartXfer+0xe24>
 800455a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800455e:	3b01      	subs	r3, #1
 8004560:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004568:	b29b      	uxth	r3, r3
 800456a:	029b      	lsls	r3, r3, #10
 800456c:	b29b      	uxth	r3, r3
 800456e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004572:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004576:	b29a      	uxth	r2, r3
 8004578:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800457c:	801a      	strh	r2, [r3, #0]
 800457e:	e021      	b.n	80045c4 <USB_EPStartXfer+0xe84>
 8004580:	463b      	mov	r3, r7
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	785b      	ldrb	r3, [r3, #1]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d11c      	bne.n	80045c4 <USB_EPStartXfer+0xe84>
 800458a:	1d3b      	adds	r3, r7, #4
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004592:	b29b      	uxth	r3, r3
 8004594:	461a      	mov	r2, r3
 8004596:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800459a:	4413      	add	r3, r2
 800459c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80045a0:	463b      	mov	r3, r7
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	011a      	lsls	r2, r3, #4
 80045a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80045ac:	4413      	add	r3, r2
 80045ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80045b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80045b6:	463b      	mov	r3, r7
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	b29a      	uxth	r2, r3
 80045be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80045c2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80045c4:	463b      	mov	r3, r7
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	69db      	ldr	r3, [r3, #28]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f000 81a4 	beq.w	8004918 <USB_EPStartXfer+0x11d8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80045d0:	1d3b      	adds	r3, r7, #4
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	463b      	mov	r3, r7
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	4413      	add	r3, r2
 80045de:	881b      	ldrh	r3, [r3, #0]
 80045e0:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80045e4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80045e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d005      	beq.n	80045fc <USB_EPStartXfer+0xebc>
 80045f0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80045f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d10d      	bne.n	8004618 <USB_EPStartXfer+0xed8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80045fc:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004600:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004604:	2b00      	cmp	r3, #0
 8004606:	f040 8187 	bne.w	8004918 <USB_EPStartXfer+0x11d8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800460a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800460e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004612:	2b00      	cmp	r3, #0
 8004614:	f040 8180 	bne.w	8004918 <USB_EPStartXfer+0x11d8>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8004618:	1d3b      	adds	r3, r7, #4
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	463b      	mov	r3, r7
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	4413      	add	r3, r2
 8004626:	881b      	ldrh	r3, [r3, #0]
 8004628:	b29b      	uxth	r3, r3
 800462a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800462e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004632:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8004636:	1d3b      	adds	r3, r7, #4
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	463b      	mov	r3, r7
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	441a      	add	r2, r3
 8004644:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8004648:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800464c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004650:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004654:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004658:	b29b      	uxth	r3, r3
 800465a:	8013      	strh	r3, [r2, #0]
 800465c:	e15c      	b.n	8004918 <USB_EPStartXfer+0x11d8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800465e:	463b      	mov	r3, r7
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	78db      	ldrb	r3, [r3, #3]
 8004664:	2b01      	cmp	r3, #1
 8004666:	f040 8155 	bne.w	8004914 <USB_EPStartXfer+0x11d4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800466a:	463b      	mov	r3, r7
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	699a      	ldr	r2, [r3, #24]
 8004670:	463b      	mov	r3, r7
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	429a      	cmp	r2, r3
 8004678:	d90e      	bls.n	8004698 <USB_EPStartXfer+0xf58>
        {
          len = ep->maxpacket;
 800467a:	463b      	mov	r3, r7
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len -= len;
 8004684:	463b      	mov	r3, r7
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	699a      	ldr	r2, [r3, #24]
 800468a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800468e:	1ad2      	subs	r2, r2, r3
 8004690:	463b      	mov	r3, r7
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	619a      	str	r2, [r3, #24]
 8004696:	e008      	b.n	80046aa <USB_EPStartXfer+0xf6a>
        }
        else
        {
          len = ep->xfer_len;
 8004698:	463b      	mov	r3, r7
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
          ep->xfer_len = 0U;
 80046a2:	463b      	mov	r3, r7
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2200      	movs	r2, #0
 80046a8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80046aa:	463b      	mov	r3, r7
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	785b      	ldrb	r3, [r3, #1]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d16f      	bne.n	8004794 <USB_EPStartXfer+0x1054>
 80046b4:	1d3b      	adds	r3, r7, #4
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046bc:	1d3b      	adds	r3, r7, #4
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	461a      	mov	r2, r3
 80046c8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80046cc:	4413      	add	r3, r2
 80046ce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046d2:	463b      	mov	r3, r7
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	011a      	lsls	r2, r3, #4
 80046da:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80046de:	4413      	add	r3, r2
 80046e0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80046e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80046e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d116      	bne.n	800471e <USB_EPStartXfer+0xfde>
 80046f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80046f4:	881b      	ldrh	r3, [r3, #0]
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80046fc:	b29a      	uxth	r2, r3
 80046fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004702:	801a      	strh	r2, [r3, #0]
 8004704:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004708:	881b      	ldrh	r3, [r3, #0]
 800470a:	b29b      	uxth	r3, r3
 800470c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004710:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004714:	b29a      	uxth	r2, r3
 8004716:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800471a:	801a      	strh	r2, [r3, #0]
 800471c:	e05f      	b.n	80047de <USB_EPStartXfer+0x109e>
 800471e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004722:	2b3e      	cmp	r3, #62	; 0x3e
 8004724:	d818      	bhi.n	8004758 <USB_EPStartXfer+0x1018>
 8004726:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800472a:	085b      	lsrs	r3, r3, #1
 800472c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004730:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004734:	f003 0301 	and.w	r3, r3, #1
 8004738:	2b00      	cmp	r3, #0
 800473a:	d004      	beq.n	8004746 <USB_EPStartXfer+0x1006>
 800473c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004740:	3301      	adds	r3, #1
 8004742:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004746:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800474a:	b29b      	uxth	r3, r3
 800474c:	029b      	lsls	r3, r3, #10
 800474e:	b29a      	uxth	r2, r3
 8004750:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004754:	801a      	strh	r2, [r3, #0]
 8004756:	e042      	b.n	80047de <USB_EPStartXfer+0x109e>
 8004758:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800475c:	095b      	lsrs	r3, r3, #5
 800475e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004762:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004766:	f003 031f 	and.w	r3, r3, #31
 800476a:	2b00      	cmp	r3, #0
 800476c:	d104      	bne.n	8004778 <USB_EPStartXfer+0x1038>
 800476e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004772:	3b01      	subs	r3, #1
 8004774:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800477c:	b29b      	uxth	r3, r3
 800477e:	029b      	lsls	r3, r3, #10
 8004780:	b29b      	uxth	r3, r3
 8004782:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004786:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800478a:	b29a      	uxth	r2, r3
 800478c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004790:	801a      	strh	r2, [r3, #0]
 8004792:	e024      	b.n	80047de <USB_EPStartXfer+0x109e>
 8004794:	463b      	mov	r3, r7
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	785b      	ldrb	r3, [r3, #1]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d11f      	bne.n	80047de <USB_EPStartXfer+0x109e>
 800479e:	1d3b      	adds	r3, r7, #4
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80047a6:	1d3b      	adds	r3, r7, #4
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	461a      	mov	r2, r3
 80047b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047b6:	4413      	add	r3, r2
 80047b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80047bc:	463b      	mov	r3, r7
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	011a      	lsls	r2, r3, #4
 80047c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047c8:	4413      	add	r3, r2
 80047ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80047ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80047d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80047dc:	801a      	strh	r2, [r3, #0]
 80047de:	1d3b      	adds	r3, r7, #4
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80047e6:	463b      	mov	r3, r7
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	785b      	ldrb	r3, [r3, #1]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d16f      	bne.n	80048d0 <USB_EPStartXfer+0x1190>
 80047f0:	1d3b      	adds	r3, r7, #4
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80047f8:	1d3b      	adds	r3, r7, #4
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004800:	b29b      	uxth	r3, r3
 8004802:	461a      	mov	r2, r3
 8004804:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004808:	4413      	add	r3, r2
 800480a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800480e:	463b      	mov	r3, r7
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	011a      	lsls	r2, r3, #4
 8004816:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800481a:	4413      	add	r3, r2
 800481c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004820:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004824:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004828:	2b00      	cmp	r3, #0
 800482a:	d116      	bne.n	800485a <USB_EPStartXfer+0x111a>
 800482c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004830:	881b      	ldrh	r3, [r3, #0]
 8004832:	b29b      	uxth	r3, r3
 8004834:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004838:	b29a      	uxth	r2, r3
 800483a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800483e:	801a      	strh	r2, [r3, #0]
 8004840:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004844:	881b      	ldrh	r3, [r3, #0]
 8004846:	b29b      	uxth	r3, r3
 8004848:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800484c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004850:	b29a      	uxth	r2, r3
 8004852:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004856:	801a      	strh	r2, [r3, #0]
 8004858:	e05e      	b.n	8004918 <USB_EPStartXfer+0x11d8>
 800485a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800485e:	2b3e      	cmp	r3, #62	; 0x3e
 8004860:	d818      	bhi.n	8004894 <USB_EPStartXfer+0x1154>
 8004862:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004866:	085b      	lsrs	r3, r3, #1
 8004868:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800486c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004870:	f003 0301 	and.w	r3, r3, #1
 8004874:	2b00      	cmp	r3, #0
 8004876:	d004      	beq.n	8004882 <USB_EPStartXfer+0x1142>
 8004878:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800487c:	3301      	adds	r3, #1
 800487e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004882:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004886:	b29b      	uxth	r3, r3
 8004888:	029b      	lsls	r3, r3, #10
 800488a:	b29a      	uxth	r2, r3
 800488c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004890:	801a      	strh	r2, [r3, #0]
 8004892:	e041      	b.n	8004918 <USB_EPStartXfer+0x11d8>
 8004894:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004898:	095b      	lsrs	r3, r3, #5
 800489a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800489e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048a2:	f003 031f 	and.w	r3, r3, #31
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d104      	bne.n	80048b4 <USB_EPStartXfer+0x1174>
 80048aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048ae:	3b01      	subs	r3, #1
 80048b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80048b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	029b      	lsls	r3, r3, #10
 80048bc:	b29b      	uxth	r3, r3
 80048be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048c6:	b29a      	uxth	r2, r3
 80048c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80048cc:	801a      	strh	r2, [r3, #0]
 80048ce:	e023      	b.n	8004918 <USB_EPStartXfer+0x11d8>
 80048d0:	463b      	mov	r3, r7
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	785b      	ldrb	r3, [r3, #1]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d11e      	bne.n	8004918 <USB_EPStartXfer+0x11d8>
 80048da:	1d3b      	adds	r3, r7, #4
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	461a      	mov	r2, r3
 80048e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80048ea:	4413      	add	r3, r2
 80048ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048f0:	463b      	mov	r3, r7
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	011a      	lsls	r2, r3, #4
 80048f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80048fc:	4413      	add	r3, r2
 80048fe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004902:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004906:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800490a:	b29a      	uxth	r2, r3
 800490c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004910:	801a      	strh	r2, [r3, #0]
 8004912:	e001      	b.n	8004918 <USB_EPStartXfer+0x11d8>
      }
      else
      {
        return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e02e      	b.n	8004976 <USB_EPStartXfer+0x1236>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004918:	1d3b      	adds	r3, r7, #4
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	463b      	mov	r3, r7
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	4413      	add	r3, r2
 8004926:	881b      	ldrh	r3, [r3, #0]
 8004928:	b29b      	uxth	r3, r3
 800492a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800492e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004932:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8004936:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800493a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800493e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8004942:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004946:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800494a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800494e:	1d3b      	adds	r3, r7, #4
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	463b      	mov	r3, r7
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	441a      	add	r2, r3
 800495c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8004960:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004964:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004968:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800496c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004970:	b29b      	uxth	r3, r3
 8004972:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	785b      	ldrb	r3, [r3, #1]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d020      	beq.n	80049d4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	4413      	add	r3, r2
 800499c:	881b      	ldrh	r3, [r3, #0]
 800499e:	b29b      	uxth	r3, r3
 80049a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049a8:	81bb      	strh	r3, [r7, #12]
 80049aa:	89bb      	ldrh	r3, [r7, #12]
 80049ac:	f083 0310 	eor.w	r3, r3, #16
 80049b0:	81bb      	strh	r3, [r7, #12]
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	441a      	add	r2, r3
 80049bc:	89bb      	ldrh	r3, [r7, #12]
 80049be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	8013      	strh	r3, [r2, #0]
 80049d2:	e01f      	b.n	8004a14 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	4413      	add	r3, r2
 80049de:	881b      	ldrh	r3, [r3, #0]
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ea:	81fb      	strh	r3, [r7, #14]
 80049ec:	89fb      	ldrh	r3, [r7, #14]
 80049ee:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80049f2:	81fb      	strh	r3, [r7, #14]
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	441a      	add	r2, r3
 80049fe:	89fb      	ldrh	r3, [r7, #14]
 8004a00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3714      	adds	r7, #20
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bc80      	pop	{r7}
 8004a1e:	4770      	bx	lr

08004a20 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b087      	sub	sp, #28
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	7b1b      	ldrb	r3, [r3, #12]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	f040 809d 	bne.w	8004b6e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	785b      	ldrb	r3, [r3, #1]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d04c      	beq.n	8004ad6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	4413      	add	r3, r2
 8004a46:	881b      	ldrh	r3, [r3, #0]
 8004a48:	823b      	strh	r3, [r7, #16]
 8004a4a:	8a3b      	ldrh	r3, [r7, #16]
 8004a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d01b      	beq.n	8004a8c <USB_EPClearStall+0x6c>
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	4413      	add	r3, r2
 8004a5e:	881b      	ldrh	r3, [r3, #0]
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a6a:	81fb      	strh	r3, [r7, #14]
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	441a      	add	r2, r3
 8004a76:	89fb      	ldrh	r3, [r7, #14]
 8004a78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a84:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	78db      	ldrb	r3, [r3, #3]
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d06c      	beq.n	8004b6e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	4413      	add	r3, r2
 8004a9e:	881b      	ldrh	r3, [r3, #0]
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004aaa:	81bb      	strh	r3, [r7, #12]
 8004aac:	89bb      	ldrh	r3, [r7, #12]
 8004aae:	f083 0320 	eor.w	r3, r3, #32
 8004ab2:	81bb      	strh	r3, [r7, #12]
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	441a      	add	r2, r3
 8004abe:	89bb      	ldrh	r3, [r7, #12]
 8004ac0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ac4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ac8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	8013      	strh	r3, [r2, #0]
 8004ad4:	e04b      	b.n	8004b6e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	4413      	add	r3, r2
 8004ae0:	881b      	ldrh	r3, [r3, #0]
 8004ae2:	82fb      	strh	r3, [r7, #22]
 8004ae4:	8afb      	ldrh	r3, [r7, #22]
 8004ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d01b      	beq.n	8004b26 <USB_EPClearStall+0x106>
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	4413      	add	r3, r2
 8004af8:	881b      	ldrh	r3, [r3, #0]
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b04:	82bb      	strh	r3, [r7, #20]
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	441a      	add	r2, r3
 8004b10:	8abb      	ldrh	r3, [r7, #20]
 8004b12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b22:	b29b      	uxth	r3, r3
 8004b24:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	4413      	add	r3, r2
 8004b30:	881b      	ldrh	r3, [r3, #0]
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b3c:	827b      	strh	r3, [r7, #18]
 8004b3e:	8a7b      	ldrh	r3, [r7, #18]
 8004b40:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004b44:	827b      	strh	r3, [r7, #18]
 8004b46:	8a7b      	ldrh	r3, [r7, #18]
 8004b48:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004b4c:	827b      	strh	r3, [r7, #18]
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	441a      	add	r2, r3
 8004b58:	8a7b      	ldrh	r3, [r7, #18]
 8004b5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	371c      	adds	r7, #28
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bc80      	pop	{r7}
 8004b78:	4770      	bx	lr

08004b7a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b083      	sub	sp, #12
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
 8004b82:	460b      	mov	r3, r1
 8004b84:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004b86:	78fb      	ldrb	r3, [r7, #3]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d103      	bne.n	8004b94 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2280      	movs	r2, #128	; 0x80
 8004b90:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	370c      	adds	r7, #12
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bc80      	pop	{r7}
 8004b9e:	4770      	bx	lr

08004ba0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	370c      	adds	r7, #12
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bc80      	pop	{r7}
 8004bb2:	4770      	bx	lr

08004bb4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	370c      	adds	r7, #12
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bc80      	pop	{r7}
 8004bc6:	4770      	bx	lr

08004bc8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8004bda:	68fb      	ldr	r3, [r7, #12]
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3714      	adds	r7, #20
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bc80      	pop	{r7}
 8004be4:	4770      	bx	lr

08004be6 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8004be6:	b480      	push	{r7}
 8004be8:	b083      	sub	sp, #12
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
 8004bee:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	370c      	adds	r7, #12
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bc80      	pop	{r7}
 8004bfa:	4770      	bx	lr

08004bfc <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b08d      	sub	sp, #52	; 0x34
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	4611      	mov	r1, r2
 8004c08:	461a      	mov	r2, r3
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	80fb      	strh	r3, [r7, #6]
 8004c0e:	4613      	mov	r3, r2
 8004c10:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004c12:	88bb      	ldrh	r3, [r7, #4]
 8004c14:	3301      	adds	r3, #1
 8004c16:	085b      	lsrs	r3, r3, #1
 8004c18:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004c22:	88fb      	ldrh	r3, [r7, #6]
 8004c24:	005a      	lsls	r2, r3, #1
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	4413      	add	r3, r2
 8004c2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c2e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8004c30:	6a3b      	ldr	r3, [r7, #32]
 8004c32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c34:	e01e      	b.n	8004c74 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8004c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8004c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3e:	3301      	adds	r3, #1
 8004c40:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8004c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	021b      	lsls	r3, r3, #8
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	b29a      	uxth	r2, r3
 8004c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8004c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5e:	3302      	adds	r3, #2
 8004c60:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8004c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c64:	3302      	adds	r3, #2
 8004c66:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8004c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8004c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c70:	3b01      	subs	r3, #1
 8004c72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1dd      	bne.n	8004c36 <USB_WritePMA+0x3a>
  }
}
 8004c7a:	bf00      	nop
 8004c7c:	3734      	adds	r7, #52	; 0x34
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bc80      	pop	{r7}
 8004c82:	4770      	bx	lr

08004c84 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b08b      	sub	sp, #44	; 0x2c
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	4611      	mov	r1, r2
 8004c90:	461a      	mov	r2, r3
 8004c92:	460b      	mov	r3, r1
 8004c94:	80fb      	strh	r3, [r7, #6]
 8004c96:	4613      	mov	r3, r2
 8004c98:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004c9a:	88bb      	ldrh	r3, [r7, #4]
 8004c9c:	085b      	lsrs	r3, r3, #1
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004caa:	88fb      	ldrh	r3, [r7, #6]
 8004cac:	005a      	lsls	r2, r3, #1
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cb6:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	627b      	str	r3, [r7, #36]	; 0x24
 8004cbc:	e01b      	b.n	8004cf6 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8004cbe:	6a3b      	ldr	r3, [r7, #32]
 8004cc0:	881b      	ldrh	r3, [r3, #0]
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004cc6:	6a3b      	ldr	r3, [r7, #32]
 8004cc8:	3302      	adds	r3, #2
 8004cca:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	b2da      	uxtb	r2, r3
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	0a1b      	lsrs	r3, r3, #8
 8004cde:	b2da      	uxtb	r2, r3
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8004cea:	6a3b      	ldr	r3, [r7, #32]
 8004cec:	3302      	adds	r3, #2
 8004cee:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	627b      	str	r3, [r7, #36]	; 0x24
 8004cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d1e0      	bne.n	8004cbe <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8004cfc:	88bb      	ldrh	r3, [r7, #4]
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d007      	beq.n	8004d18 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8004d08:	6a3b      	ldr	r3, [r7, #32]
 8004d0a:	881b      	ldrh	r3, [r3, #0]
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	b2da      	uxtb	r2, r3
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	701a      	strb	r2, [r3, #0]
  }
}
 8004d18:	bf00      	nop
 8004d1a:	372c      	adds	r7, #44	; 0x2c
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bc80      	pop	{r7}
 8004d20:	4770      	bx	lr

08004d22 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b084      	sub	sp, #16
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	7c1b      	ldrb	r3, [r3, #16]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d115      	bne.n	8004d66 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004d3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d3e:	2202      	movs	r2, #2
 8004d40:	2181      	movs	r1, #129	; 0x81
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f001 fe7b 	bl	8006a3e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004d4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d52:	2202      	movs	r2, #2
 8004d54:	2101      	movs	r1, #1
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f001 fe71 	bl	8006a3e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8004d64:	e012      	b.n	8004d8c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004d66:	2340      	movs	r3, #64	; 0x40
 8004d68:	2202      	movs	r2, #2
 8004d6a:	2181      	movs	r1, #129	; 0x81
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f001 fe66 	bl	8006a3e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2201      	movs	r2, #1
 8004d76:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004d78:	2340      	movs	r3, #64	; 0x40
 8004d7a:	2202      	movs	r2, #2
 8004d7c:	2101      	movs	r1, #1
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f001 fe5d 	bl	8006a3e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004d8c:	2308      	movs	r3, #8
 8004d8e:	2203      	movs	r2, #3
 8004d90:	2182      	movs	r1, #130	; 0x82
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f001 fe53 	bl	8006a3e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004d9e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004da2:	f001 ff73 	bl	8006c8c <USBD_static_malloc>
 8004da6:	4602      	mov	r2, r0
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d102      	bne.n	8004dbe <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8004db8:	2301      	movs	r3, #1
 8004dba:	73fb      	strb	r3, [r7, #15]
 8004dbc:	e026      	b.n	8004e0c <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dc4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	7c1b      	ldrb	r3, [r3, #16]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d109      	bne.n	8004dfc <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004dee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004df2:	2101      	movs	r1, #1
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f001 ff13 	bl	8006c20 <USBD_LL_PrepareReceive>
 8004dfa:	e007      	b.n	8004e0c <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e02:	2340      	movs	r3, #64	; 0x40
 8004e04:	2101      	movs	r1, #1
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f001 ff0a 	bl	8006c20 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8004e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004e16:	b580      	push	{r7, lr}
 8004e18:	b084      	sub	sp, #16
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
 8004e1e:	460b      	mov	r3, r1
 8004e20:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004e22:	2300      	movs	r3, #0
 8004e24:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004e26:	2181      	movs	r1, #129	; 0x81
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f001 fe2e 	bl	8006a8a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004e34:	2101      	movs	r1, #1
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f001 fe27 	bl	8006a8a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004e44:	2182      	movs	r1, #130	; 0x82
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f001 fe1f 	bl	8006a8a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00e      	beq.n	8004e7a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f001 ff19 	bl	8006ca4 <USBD_static_free>
    pdev->pClassData = NULL;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8004e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3710      	adds	r7, #16
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b086      	sub	sp, #24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e94:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8004e96:	2300      	movs	r3, #0
 8004e98:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d039      	beq.n	8004f22 <USBD_CDC_Setup+0x9e>
 8004eae:	2b20      	cmp	r3, #32
 8004eb0:	d17c      	bne.n	8004fac <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	88db      	ldrh	r3, [r3, #6]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d029      	beq.n	8004f0e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	b25b      	sxtb	r3, r3
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	da11      	bge.n	8004ee8 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	683a      	ldr	r2, [r7, #0]
 8004ece:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8004ed0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004ed2:	683a      	ldr	r2, [r7, #0]
 8004ed4:	88d2      	ldrh	r2, [r2, #6]
 8004ed6:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004ed8:	6939      	ldr	r1, [r7, #16]
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	88db      	ldrh	r3, [r3, #6]
 8004ede:	461a      	mov	r2, r3
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f001 f9f9 	bl	80062d8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8004ee6:	e068      	b.n	8004fba <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	785a      	ldrb	r2, [r3, #1]
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	88db      	ldrh	r3, [r3, #6]
 8004ef6:	b2da      	uxtb	r2, r3
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004efe:	6939      	ldr	r1, [r7, #16]
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	88db      	ldrh	r3, [r3, #6]
 8004f04:	461a      	mov	r2, r3
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f001 fa14 	bl	8006334 <USBD_CtlPrepareRx>
      break;
 8004f0c:	e055      	b.n	8004fba <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	683a      	ldr	r2, [r7, #0]
 8004f18:	7850      	ldrb	r0, [r2, #1]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	6839      	ldr	r1, [r7, #0]
 8004f1e:	4798      	blx	r3
      break;
 8004f20:	e04b      	b.n	8004fba <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	785b      	ldrb	r3, [r3, #1]
 8004f26:	2b0a      	cmp	r3, #10
 8004f28:	d017      	beq.n	8004f5a <USBD_CDC_Setup+0xd6>
 8004f2a:	2b0b      	cmp	r3, #11
 8004f2c:	d029      	beq.n	8004f82 <USBD_CDC_Setup+0xfe>
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d133      	bne.n	8004f9a <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f38:	2b03      	cmp	r3, #3
 8004f3a:	d107      	bne.n	8004f4c <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8004f3c:	f107 030c 	add.w	r3, r7, #12
 8004f40:	2202      	movs	r2, #2
 8004f42:	4619      	mov	r1, r3
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f001 f9c7 	bl	80062d8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004f4a:	e02e      	b.n	8004faa <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004f4c:	6839      	ldr	r1, [r7, #0]
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f001 f958 	bl	8006204 <USBD_CtlError>
            ret = USBD_FAIL;
 8004f54:	2302      	movs	r3, #2
 8004f56:	75fb      	strb	r3, [r7, #23]
          break;
 8004f58:	e027      	b.n	8004faa <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f60:	2b03      	cmp	r3, #3
 8004f62:	d107      	bne.n	8004f74 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8004f64:	f107 030f 	add.w	r3, r7, #15
 8004f68:	2201      	movs	r2, #1
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f001 f9b3 	bl	80062d8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004f72:	e01a      	b.n	8004faa <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8004f74:	6839      	ldr	r1, [r7, #0]
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f001 f944 	bl	8006204 <USBD_CtlError>
            ret = USBD_FAIL;
 8004f7c:	2302      	movs	r3, #2
 8004f7e:	75fb      	strb	r3, [r7, #23]
          break;
 8004f80:	e013      	b.n	8004faa <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f88:	2b03      	cmp	r3, #3
 8004f8a:	d00d      	beq.n	8004fa8 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8004f8c:	6839      	ldr	r1, [r7, #0]
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f001 f938 	bl	8006204 <USBD_CtlError>
            ret = USBD_FAIL;
 8004f94:	2302      	movs	r3, #2
 8004f96:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004f98:	e006      	b.n	8004fa8 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8004f9a:	6839      	ldr	r1, [r7, #0]
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f001 f931 	bl	8006204 <USBD_CtlError>
          ret = USBD_FAIL;
 8004fa2:	2302      	movs	r3, #2
 8004fa4:	75fb      	strb	r3, [r7, #23]
          break;
 8004fa6:	e000      	b.n	8004faa <USBD_CDC_Setup+0x126>
          break;
 8004fa8:	bf00      	nop
      }
      break;
 8004faa:	e006      	b.n	8004fba <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8004fac:	6839      	ldr	r1, [r7, #0]
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f001 f928 	bl	8006204 <USBD_CtlError>
      ret = USBD_FAIL;
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	75fb      	strb	r3, [r7, #23]
      break;
 8004fb8:	bf00      	nop
  }

  return ret;
 8004fba:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3718      	adds	r7, #24
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	460b      	mov	r3, r1
 8004fce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fd6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004fde:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d03a      	beq.n	8005060 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004fea:	78fa      	ldrb	r2, [r7, #3]
 8004fec:	6879      	ldr	r1, [r7, #4]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	4413      	add	r3, r2
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	440b      	add	r3, r1
 8004ff8:	331c      	adds	r3, #28
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d029      	beq.n	8005054 <USBD_CDC_DataIn+0x90>
 8005000:	78fa      	ldrb	r2, [r7, #3]
 8005002:	6879      	ldr	r1, [r7, #4]
 8005004:	4613      	mov	r3, r2
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	4413      	add	r3, r2
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	440b      	add	r3, r1
 800500e:	331c      	adds	r3, #28
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	78f9      	ldrb	r1, [r7, #3]
 8005014:	68b8      	ldr	r0, [r7, #8]
 8005016:	460b      	mov	r3, r1
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	440b      	add	r3, r1
 800501c:	00db      	lsls	r3, r3, #3
 800501e:	4403      	add	r3, r0
 8005020:	3338      	adds	r3, #56	; 0x38
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	fbb2 f1f3 	udiv	r1, r2, r3
 8005028:	fb03 f301 	mul.w	r3, r3, r1
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d110      	bne.n	8005054 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8005032:	78fa      	ldrb	r2, [r7, #3]
 8005034:	6879      	ldr	r1, [r7, #4]
 8005036:	4613      	mov	r3, r2
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	4413      	add	r3, r2
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	440b      	add	r3, r1
 8005040:	331c      	adds	r3, #28
 8005042:	2200      	movs	r2, #0
 8005044:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005046:	78f9      	ldrb	r1, [r7, #3]
 8005048:	2300      	movs	r3, #0
 800504a:	2200      	movs	r2, #0
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f001 fdc4 	bl	8006bda <USBD_LL_Transmit>
 8005052:	e003      	b.n	800505c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2200      	movs	r2, #0
 8005058:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800505c:	2300      	movs	r3, #0
 800505e:	e000      	b.n	8005062 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8005060:	2302      	movs	r3, #2
  }
}
 8005062:	4618      	mov	r0, r3
 8005064:	3710      	adds	r7, #16
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800506a:	b580      	push	{r7, lr}
 800506c:	b084      	sub	sp, #16
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
 8005072:	460b      	mov	r3, r1
 8005074:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800507c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800507e:	78fb      	ldrb	r3, [r7, #3]
 8005080:	4619      	mov	r1, r3
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f001 fdef 	bl	8006c66 <USBD_LL_GetRxDataSize>
 8005088:	4602      	mov	r2, r0
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00d      	beq.n	80050b6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80050ae:	4611      	mov	r1, r2
 80050b0:	4798      	blx	r3

    return USBD_OK;
 80050b2:	2300      	movs	r3, #0
 80050b4:	e000      	b.n	80050b8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80050b6:	2302      	movs	r3, #2
  }
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3710      	adds	r7, #16
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050ce:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d015      	beq.n	8005106 <USBD_CDC_EP0_RxReady+0x46>
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80050e0:	2bff      	cmp	r3, #255	; 0xff
 80050e2:	d010      	beq.n	8005106 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80050f2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80050fa:	b292      	uxth	r2, r2
 80050fc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	22ff      	movs	r2, #255	; 0xff
 8005102:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8005106:	2300      	movs	r3, #0
}
 8005108:	4618      	mov	r0, r3
 800510a:	3710      	adds	r7, #16
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2243      	movs	r2, #67	; 0x43
 800511c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800511e:	4b03      	ldr	r3, [pc, #12]	; (800512c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005120:	4618      	mov	r0, r3
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	bc80      	pop	{r7}
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	200000a4 	.word	0x200000a4

08005130 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2243      	movs	r2, #67	; 0x43
 800513c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800513e:	4b03      	ldr	r3, [pc, #12]	; (800514c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005140:	4618      	mov	r0, r3
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	bc80      	pop	{r7}
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	20000060 	.word	0x20000060

08005150 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2243      	movs	r2, #67	; 0x43
 800515c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800515e:	4b03      	ldr	r3, [pc, #12]	; (800516c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005160:	4618      	mov	r0, r3
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	bc80      	pop	{r7}
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop
 800516c:	200000e8 	.word	0x200000e8

08005170 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	220a      	movs	r2, #10
 800517c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800517e:	4b03      	ldr	r3, [pc, #12]	; (800518c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005180:	4618      	mov	r0, r3
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	bc80      	pop	{r7}
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop
 800518c:	2000001c 	.word	0x2000001c

08005190 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8005190:	b480      	push	{r7}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800519a:	2302      	movs	r3, #2
 800519c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d005      	beq.n	80051b0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	683a      	ldr	r2, [r7, #0]
 80051a8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80051ac:	2300      	movs	r3, #0
 80051ae:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80051b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3714      	adds	r7, #20
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bc80      	pop	{r7}
 80051ba:	4770      	bx	lr

080051bc <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80051bc:	b480      	push	{r7}
 80051be:	b087      	sub	sp, #28
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	4613      	mov	r3, r2
 80051c8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051d0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	68ba      	ldr	r2, [r7, #8]
 80051d6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80051da:	88fa      	ldrh	r2, [r7, #6]
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	371c      	adds	r7, #28
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bc80      	pop	{r7}
 80051ec:	4770      	bx	lr

080051ee <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80051ee:	b480      	push	{r7}
 80051f0:	b085      	sub	sp, #20
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
 80051f6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051fe:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	683a      	ldr	r2, [r7, #0]
 8005204:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	3714      	adds	r7, #20
 800520e:	46bd      	mov	sp, r7
 8005210:	bc80      	pop	{r7}
 8005212:	4770      	bx	lr

08005214 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005222:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800522a:	2b00      	cmp	r3, #0
 800522c:	d01c      	beq.n	8005268 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005234:	2b00      	cmp	r3, #0
 8005236:	d115      	bne.n	8005264 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2201      	movs	r2, #1
 800523c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005256:	b29b      	uxth	r3, r3
 8005258:	2181      	movs	r1, #129	; 0x81
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f001 fcbd 	bl	8006bda <USBD_LL_Transmit>

      return USBD_OK;
 8005260:	2300      	movs	r3, #0
 8005262:	e002      	b.n	800526a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8005264:	2301      	movs	r3, #1
 8005266:	e000      	b.n	800526a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8005268:	2302      	movs	r3, #2
  }
}
 800526a:	4618      	mov	r0, r3
 800526c:	3710      	adds	r7, #16
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}

08005272 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005272:	b580      	push	{r7, lr}
 8005274:	b084      	sub	sp, #16
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005280:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005288:	2b00      	cmp	r3, #0
 800528a:	d017      	beq.n	80052bc <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	7c1b      	ldrb	r3, [r3, #16]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d109      	bne.n	80052a8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800529a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800529e:	2101      	movs	r1, #1
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f001 fcbd 	bl	8006c20 <USBD_LL_PrepareReceive>
 80052a6:	e007      	b.n	80052b8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80052ae:	2340      	movs	r3, #64	; 0x40
 80052b0:	2101      	movs	r1, #1
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f001 fcb4 	bl	8006c20 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80052b8:	2300      	movs	r3, #0
 80052ba:	e000      	b.n	80052be <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80052bc:	2302      	movs	r3, #2
  }
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80052c6:	b580      	push	{r7, lr}
 80052c8:	b084      	sub	sp, #16
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	60f8      	str	r0, [r7, #12]
 80052ce:	60b9      	str	r1, [r7, #8]
 80052d0:	4613      	mov	r3, r2
 80052d2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d101      	bne.n	80052de <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80052da:	2302      	movs	r3, #2
 80052dc:	e01a      	b.n	8005314 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d003      	beq.n	80052f0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d003      	beq.n	80052fe <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	68ba      	ldr	r2, [r7, #8]
 80052fa:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2201      	movs	r2, #1
 8005302:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	79fa      	ldrb	r2, [r7, #7]
 800530a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800530c:	68f8      	ldr	r0, [r7, #12]
 800530e:	f001 fb21 	bl	8006954 <USBD_LL_Init>

  return USBD_OK;
 8005312:	2300      	movs	r3, #0
}
 8005314:	4618      	mov	r0, r3
 8005316:	3710      	adds	r7, #16
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8005326:	2300      	movs	r3, #0
 8005328:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d006      	beq.n	800533e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	683a      	ldr	r2, [r7, #0]
 8005334:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8005338:	2300      	movs	r3, #0
 800533a:	73fb      	strb	r3, [r7, #15]
 800533c:	e001      	b.n	8005342 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800533e:	2302      	movs	r3, #2
 8005340:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005342:	7bfb      	ldrb	r3, [r7, #15]
}
 8005344:	4618      	mov	r0, r3
 8005346:	3714      	adds	r7, #20
 8005348:	46bd      	mov	sp, r7
 800534a:	bc80      	pop	{r7}
 800534c:	4770      	bx	lr

0800534e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800534e:	b580      	push	{r7, lr}
 8005350:	b082      	sub	sp, #8
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f001 fb56 	bl	8006a08 <USBD_LL_Start>

  return USBD_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3708      	adds	r7, #8
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}

08005366 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005366:	b480      	push	{r7}
 8005368:	b083      	sub	sp, #12
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	bc80      	pop	{r7}
 8005378:	4770      	bx	lr

0800537a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800537a:	b580      	push	{r7, lr}
 800537c:	b084      	sub	sp, #16
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
 8005382:	460b      	mov	r3, r1
 8005384:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005386:	2302      	movs	r3, #2
 8005388:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00c      	beq.n	80053ae <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	78fa      	ldrb	r2, [r7, #3]
 800539e:	4611      	mov	r1, r2
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	4798      	blx	r3
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d101      	bne.n	80053ae <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80053aa:	2300      	movs	r3, #0
 80053ac:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80053ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3710      	adds	r7, #16
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	460b      	mov	r3, r1
 80053c2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	78fa      	ldrb	r2, [r7, #3]
 80053ce:	4611      	mov	r1, r2
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	4798      	blx	r3

  return USBD_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3708      	adds	r7, #8
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}

080053de <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80053de:	b580      	push	{r7, lr}
 80053e0:	b082      	sub	sp, #8
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
 80053e6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80053ee:	6839      	ldr	r1, [r7, #0]
 80053f0:	4618      	mov	r0, r3
 80053f2:	f000 fecb 	bl	800618c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2201      	movs	r2, #1
 80053fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005404:	461a      	mov	r2, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005412:	f003 031f 	and.w	r3, r3, #31
 8005416:	2b01      	cmp	r3, #1
 8005418:	d00c      	beq.n	8005434 <USBD_LL_SetupStage+0x56>
 800541a:	2b01      	cmp	r3, #1
 800541c:	d302      	bcc.n	8005424 <USBD_LL_SetupStage+0x46>
 800541e:	2b02      	cmp	r3, #2
 8005420:	d010      	beq.n	8005444 <USBD_LL_SetupStage+0x66>
 8005422:	e017      	b.n	8005454 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800542a:	4619      	mov	r1, r3
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 f9cb 	bl	80057c8 <USBD_StdDevReq>
      break;
 8005432:	e01a      	b.n	800546a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800543a:	4619      	mov	r1, r3
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f000 fa2d 	bl	800589c <USBD_StdItfReq>
      break;
 8005442:	e012      	b.n	800546a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800544a:	4619      	mov	r1, r3
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 fa6b 	bl	8005928 <USBD_StdEPReq>
      break;
 8005452:	e00a      	b.n	800546a <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800545a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800545e:	b2db      	uxtb	r3, r3
 8005460:	4619      	mov	r1, r3
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f001 fb30 	bl	8006ac8 <USBD_LL_StallEP>
      break;
 8005468:	bf00      	nop
  }

  return USBD_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3708      	adds	r7, #8
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b086      	sub	sp, #24
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	460b      	mov	r3, r1
 800547e:	607a      	str	r2, [r7, #4]
 8005480:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005482:	7afb      	ldrb	r3, [r7, #11]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d14b      	bne.n	8005520 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800548e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005496:	2b03      	cmp	r3, #3
 8005498:	d134      	bne.n	8005504 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	68da      	ldr	r2, [r3, #12]
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d919      	bls.n	80054da <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	68da      	ldr	r2, [r3, #12]
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	1ad2      	subs	r2, r2, r3
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	68da      	ldr	r2, [r3, #12]
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80054bc:	429a      	cmp	r2, r3
 80054be:	d203      	bcs.n	80054c8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80054c4:	b29b      	uxth	r3, r3
 80054c6:	e002      	b.n	80054ce <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	461a      	mov	r2, r3
 80054d0:	6879      	ldr	r1, [r7, #4]
 80054d2:	68f8      	ldr	r0, [r7, #12]
 80054d4:	f000 ff4c 	bl	8006370 <USBD_CtlContinueRx>
 80054d8:	e038      	b.n	800554c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00a      	beq.n	80054fc <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80054ec:	2b03      	cmp	r3, #3
 80054ee:	d105      	bne.n	80054fc <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	68f8      	ldr	r0, [r7, #12]
 80054fa:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80054fc:	68f8      	ldr	r0, [r7, #12]
 80054fe:	f000 ff49 	bl	8006394 <USBD_CtlSendStatus>
 8005502:	e023      	b.n	800554c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800550a:	2b05      	cmp	r3, #5
 800550c:	d11e      	bne.n	800554c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8005516:	2100      	movs	r1, #0
 8005518:	68f8      	ldr	r0, [r7, #12]
 800551a:	f001 fad5 	bl	8006ac8 <USBD_LL_StallEP>
 800551e:	e015      	b.n	800554c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d00d      	beq.n	8005548 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005532:	2b03      	cmp	r3, #3
 8005534:	d108      	bne.n	8005548 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	7afa      	ldrb	r2, [r7, #11]
 8005540:	4611      	mov	r1, r2
 8005542:	68f8      	ldr	r0, [r7, #12]
 8005544:	4798      	blx	r3
 8005546:	e001      	b.n	800554c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005548:	2302      	movs	r3, #2
 800554a:	e000      	b.n	800554e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3718      	adds	r7, #24
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}

08005556 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005556:	b580      	push	{r7, lr}
 8005558:	b086      	sub	sp, #24
 800555a:	af00      	add	r7, sp, #0
 800555c:	60f8      	str	r0, [r7, #12]
 800555e:	460b      	mov	r3, r1
 8005560:	607a      	str	r2, [r7, #4]
 8005562:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005564:	7afb      	ldrb	r3, [r7, #11]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d17f      	bne.n	800566a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	3314      	adds	r3, #20
 800556e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005576:	2b02      	cmp	r3, #2
 8005578:	d15c      	bne.n	8005634 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	68da      	ldr	r2, [r3, #12]
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	429a      	cmp	r2, r3
 8005584:	d915      	bls.n	80055b2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	68da      	ldr	r2, [r3, #12]
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	1ad2      	subs	r2, r2, r3
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	b29b      	uxth	r3, r3
 800559a:	461a      	mov	r2, r3
 800559c:	6879      	ldr	r1, [r7, #4]
 800559e:	68f8      	ldr	r0, [r7, #12]
 80055a0:	f000 feb6 	bl	8006310 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80055a4:	2300      	movs	r3, #0
 80055a6:	2200      	movs	r2, #0
 80055a8:	2100      	movs	r1, #0
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f001 fb38 	bl	8006c20 <USBD_LL_PrepareReceive>
 80055b0:	e04e      	b.n	8005650 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	697a      	ldr	r2, [r7, #20]
 80055b8:	6912      	ldr	r2, [r2, #16]
 80055ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80055be:	fb02 f201 	mul.w	r2, r2, r1
 80055c2:	1a9b      	subs	r3, r3, r2
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d11c      	bne.n	8005602 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	689a      	ldr	r2, [r3, #8]
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d316      	bcc.n	8005602 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	689a      	ldr	r2, [r3, #8]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80055de:	429a      	cmp	r2, r3
 80055e0:	d20f      	bcs.n	8005602 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80055e2:	2200      	movs	r2, #0
 80055e4:	2100      	movs	r1, #0
 80055e6:	68f8      	ldr	r0, [r7, #12]
 80055e8:	f000 fe92 	bl	8006310 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80055f4:	2300      	movs	r3, #0
 80055f6:	2200      	movs	r2, #0
 80055f8:	2100      	movs	r1, #0
 80055fa:	68f8      	ldr	r0, [r7, #12]
 80055fc:	f001 fb10 	bl	8006c20 <USBD_LL_PrepareReceive>
 8005600:	e026      	b.n	8005650 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00a      	beq.n	8005624 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005614:	2b03      	cmp	r3, #3
 8005616:	d105      	bne.n	8005624 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8005624:	2180      	movs	r1, #128	; 0x80
 8005626:	68f8      	ldr	r0, [r7, #12]
 8005628:	f001 fa4e 	bl	8006ac8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800562c:	68f8      	ldr	r0, [r7, #12]
 800562e:	f000 fec4 	bl	80063ba <USBD_CtlReceiveStatus>
 8005632:	e00d      	b.n	8005650 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800563a:	2b04      	cmp	r3, #4
 800563c:	d004      	beq.n	8005648 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005644:	2b00      	cmp	r3, #0
 8005646:	d103      	bne.n	8005650 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8005648:	2180      	movs	r1, #128	; 0x80
 800564a:	68f8      	ldr	r0, [r7, #12]
 800564c:	f001 fa3c 	bl	8006ac8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005656:	2b01      	cmp	r3, #1
 8005658:	d11d      	bne.n	8005696 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	f7ff fe83 	bl	8005366 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005668:	e015      	b.n	8005696 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00d      	beq.n	8005692 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800567c:	2b03      	cmp	r3, #3
 800567e:	d108      	bne.n	8005692 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005686:	695b      	ldr	r3, [r3, #20]
 8005688:	7afa      	ldrb	r2, [r7, #11]
 800568a:	4611      	mov	r1, r2
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	4798      	blx	r3
 8005690:	e001      	b.n	8005696 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005692:	2302      	movs	r3, #2
 8005694:	e000      	b.n	8005698 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	3718      	adds	r7, #24
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80056a8:	2340      	movs	r3, #64	; 0x40
 80056aa:	2200      	movs	r2, #0
 80056ac:	2100      	movs	r1, #0
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f001 f9c5 	bl	8006a3e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2240      	movs	r2, #64	; 0x40
 80056c0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80056c4:	2340      	movs	r3, #64	; 0x40
 80056c6:	2200      	movs	r2, #0
 80056c8:	2180      	movs	r1, #128	; 0x80
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f001 f9b7 	bl	8006a3e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2240      	movs	r2, #64	; 0x40
 80056da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005700:	2b00      	cmp	r3, #0
 8005702:	d009      	beq.n	8005718 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	6852      	ldr	r2, [r2, #4]
 8005710:	b2d2      	uxtb	r2, r2
 8005712:	4611      	mov	r1, r2
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	4798      	blx	r3
  }

  return USBD_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3708      	adds	r7, #8
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}

08005722 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005722:	b480      	push	{r7}
 8005724:	b083      	sub	sp, #12
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
 800572a:	460b      	mov	r3, r1
 800572c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	78fa      	ldrb	r2, [r7, #3]
 8005732:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	370c      	adds	r7, #12
 800573a:	46bd      	mov	sp, r7
 800573c:	bc80      	pop	{r7}
 800573e:	4770      	bx	lr

08005740 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2204      	movs	r2, #4
 8005758:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	370c      	adds	r7, #12
 8005762:	46bd      	mov	sp, r7
 8005764:	bc80      	pop	{r7}
 8005766:	4770      	bx	lr

08005768 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005776:	2b04      	cmp	r3, #4
 8005778:	d105      	bne.n	8005786 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	370c      	adds	r7, #12
 800578c:	46bd      	mov	sp, r7
 800578e:	bc80      	pop	{r7}
 8005790:	4770      	bx	lr

08005792 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005792:	b580      	push	{r7, lr}
 8005794:	b082      	sub	sp, #8
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057a0:	2b03      	cmp	r3, #3
 80057a2:	d10b      	bne.n	80057bc <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057aa:	69db      	ldr	r3, [r3, #28]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d005      	beq.n	80057bc <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057b6:	69db      	ldr	r3, [r3, #28]
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80057bc:	2300      	movs	r3, #0
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3708      	adds	r7, #8
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
	...

080057c8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80057d2:	2300      	movs	r3, #0
 80057d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80057de:	2b20      	cmp	r3, #32
 80057e0:	d004      	beq.n	80057ec <USBD_StdDevReq+0x24>
 80057e2:	2b40      	cmp	r3, #64	; 0x40
 80057e4:	d002      	beq.n	80057ec <USBD_StdDevReq+0x24>
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d008      	beq.n	80057fc <USBD_StdDevReq+0x34>
 80057ea:	e04c      	b.n	8005886 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	6839      	ldr	r1, [r7, #0]
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	4798      	blx	r3
      break;
 80057fa:	e049      	b.n	8005890 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	785b      	ldrb	r3, [r3, #1]
 8005800:	2b09      	cmp	r3, #9
 8005802:	d83a      	bhi.n	800587a <USBD_StdDevReq+0xb2>
 8005804:	a201      	add	r2, pc, #4	; (adr r2, 800580c <USBD_StdDevReq+0x44>)
 8005806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800580a:	bf00      	nop
 800580c:	0800585d 	.word	0x0800585d
 8005810:	08005871 	.word	0x08005871
 8005814:	0800587b 	.word	0x0800587b
 8005818:	08005867 	.word	0x08005867
 800581c:	0800587b 	.word	0x0800587b
 8005820:	0800583f 	.word	0x0800583f
 8005824:	08005835 	.word	0x08005835
 8005828:	0800587b 	.word	0x0800587b
 800582c:	08005853 	.word	0x08005853
 8005830:	08005849 	.word	0x08005849
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005834:	6839      	ldr	r1, [r7, #0]
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 f9d4 	bl	8005be4 <USBD_GetDescriptor>
          break;
 800583c:	e022      	b.n	8005884 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800583e:	6839      	ldr	r1, [r7, #0]
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f000 fb37 	bl	8005eb4 <USBD_SetAddress>
          break;
 8005846:	e01d      	b.n	8005884 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8005848:	6839      	ldr	r1, [r7, #0]
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 fb74 	bl	8005f38 <USBD_SetConfig>
          break;
 8005850:	e018      	b.n	8005884 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005852:	6839      	ldr	r1, [r7, #0]
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 fbfd 	bl	8006054 <USBD_GetConfig>
          break;
 800585a:	e013      	b.n	8005884 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800585c:	6839      	ldr	r1, [r7, #0]
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 fc2c 	bl	80060bc <USBD_GetStatus>
          break;
 8005864:	e00e      	b.n	8005884 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005866:	6839      	ldr	r1, [r7, #0]
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f000 fc5a 	bl	8006122 <USBD_SetFeature>
          break;
 800586e:	e009      	b.n	8005884 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005870:	6839      	ldr	r1, [r7, #0]
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 fc69 	bl	800614a <USBD_ClrFeature>
          break;
 8005878:	e004      	b.n	8005884 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800587a:	6839      	ldr	r1, [r7, #0]
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 fcc1 	bl	8006204 <USBD_CtlError>
          break;
 8005882:	bf00      	nop
      }
      break;
 8005884:	e004      	b.n	8005890 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8005886:	6839      	ldr	r1, [r7, #0]
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 fcbb 	bl	8006204 <USBD_CtlError>
      break;
 800588e:	bf00      	nop
  }

  return ret;
 8005890:	7bfb      	ldrb	r3, [r7, #15]
}
 8005892:	4618      	mov	r0, r3
 8005894:	3710      	adds	r7, #16
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop

0800589c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80058a6:	2300      	movs	r3, #0
 80058a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80058b2:	2b20      	cmp	r3, #32
 80058b4:	d003      	beq.n	80058be <USBD_StdItfReq+0x22>
 80058b6:	2b40      	cmp	r3, #64	; 0x40
 80058b8:	d001      	beq.n	80058be <USBD_StdItfReq+0x22>
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d12a      	bne.n	8005914 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058c4:	3b01      	subs	r3, #1
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	d81d      	bhi.n	8005906 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	889b      	ldrh	r3, [r3, #4]
 80058ce:	b2db      	uxtb	r3, r3
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d813      	bhi.n	80058fc <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	6839      	ldr	r1, [r7, #0]
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	4798      	blx	r3
 80058e2:	4603      	mov	r3, r0
 80058e4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	88db      	ldrh	r3, [r3, #6]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d110      	bne.n	8005910 <USBD_StdItfReq+0x74>
 80058ee:	7bfb      	ldrb	r3, [r7, #15]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d10d      	bne.n	8005910 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f000 fd4d 	bl	8006394 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80058fa:	e009      	b.n	8005910 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 80058fc:	6839      	ldr	r1, [r7, #0]
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 fc80 	bl	8006204 <USBD_CtlError>
          break;
 8005904:	e004      	b.n	8005910 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8005906:	6839      	ldr	r1, [r7, #0]
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 fc7b 	bl	8006204 <USBD_CtlError>
          break;
 800590e:	e000      	b.n	8005912 <USBD_StdItfReq+0x76>
          break;
 8005910:	bf00      	nop
      }
      break;
 8005912:	e004      	b.n	800591e <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8005914:	6839      	ldr	r1, [r7, #0]
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 fc74 	bl	8006204 <USBD_CtlError>
      break;
 800591c:	bf00      	nop
  }

  return USBD_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	3710      	adds	r7, #16
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005932:	2300      	movs	r3, #0
 8005934:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	889b      	ldrh	r3, [r3, #4]
 800593a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005944:	2b20      	cmp	r3, #32
 8005946:	d004      	beq.n	8005952 <USBD_StdEPReq+0x2a>
 8005948:	2b40      	cmp	r3, #64	; 0x40
 800594a:	d002      	beq.n	8005952 <USBD_StdEPReq+0x2a>
 800594c:	2b00      	cmp	r3, #0
 800594e:	d008      	beq.n	8005962 <USBD_StdEPReq+0x3a>
 8005950:	e13d      	b.n	8005bce <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	6839      	ldr	r1, [r7, #0]
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	4798      	blx	r3
      break;
 8005960:	e13a      	b.n	8005bd8 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800596a:	2b20      	cmp	r3, #32
 800596c:	d10a      	bne.n	8005984 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	6839      	ldr	r1, [r7, #0]
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	4798      	blx	r3
 800597c:	4603      	mov	r3, r0
 800597e:	73fb      	strb	r3, [r7, #15]

        return ret;
 8005980:	7bfb      	ldrb	r3, [r7, #15]
 8005982:	e12a      	b.n	8005bda <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	785b      	ldrb	r3, [r3, #1]
 8005988:	2b01      	cmp	r3, #1
 800598a:	d03e      	beq.n	8005a0a <USBD_StdEPReq+0xe2>
 800598c:	2b03      	cmp	r3, #3
 800598e:	d002      	beq.n	8005996 <USBD_StdEPReq+0x6e>
 8005990:	2b00      	cmp	r3, #0
 8005992:	d070      	beq.n	8005a76 <USBD_StdEPReq+0x14e>
 8005994:	e115      	b.n	8005bc2 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800599c:	2b02      	cmp	r3, #2
 800599e:	d002      	beq.n	80059a6 <USBD_StdEPReq+0x7e>
 80059a0:	2b03      	cmp	r3, #3
 80059a2:	d015      	beq.n	80059d0 <USBD_StdEPReq+0xa8>
 80059a4:	e02b      	b.n	80059fe <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80059a6:	7bbb      	ldrb	r3, [r7, #14]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d00c      	beq.n	80059c6 <USBD_StdEPReq+0x9e>
 80059ac:	7bbb      	ldrb	r3, [r7, #14]
 80059ae:	2b80      	cmp	r3, #128	; 0x80
 80059b0:	d009      	beq.n	80059c6 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80059b2:	7bbb      	ldrb	r3, [r7, #14]
 80059b4:	4619      	mov	r1, r3
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f001 f886 	bl	8006ac8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80059bc:	2180      	movs	r1, #128	; 0x80
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f001 f882 	bl	8006ac8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80059c4:	e020      	b.n	8005a08 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80059c6:	6839      	ldr	r1, [r7, #0]
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 fc1b 	bl	8006204 <USBD_CtlError>
              break;
 80059ce:	e01b      	b.n	8005a08 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	885b      	ldrh	r3, [r3, #2]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d10e      	bne.n	80059f6 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 80059d8:	7bbb      	ldrb	r3, [r7, #14]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00b      	beq.n	80059f6 <USBD_StdEPReq+0xce>
 80059de:	7bbb      	ldrb	r3, [r7, #14]
 80059e0:	2b80      	cmp	r3, #128	; 0x80
 80059e2:	d008      	beq.n	80059f6 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	88db      	ldrh	r3, [r3, #6]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d104      	bne.n	80059f6 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80059ec:	7bbb      	ldrb	r3, [r7, #14]
 80059ee:	4619      	mov	r1, r3
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f001 f869 	bl	8006ac8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 fccc 	bl	8006394 <USBD_CtlSendStatus>

              break;
 80059fc:	e004      	b.n	8005a08 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 80059fe:	6839      	ldr	r1, [r7, #0]
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 fbff 	bl	8006204 <USBD_CtlError>
              break;
 8005a06:	bf00      	nop
          }
          break;
 8005a08:	e0e0      	b.n	8005bcc <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d002      	beq.n	8005a1a <USBD_StdEPReq+0xf2>
 8005a14:	2b03      	cmp	r3, #3
 8005a16:	d015      	beq.n	8005a44 <USBD_StdEPReq+0x11c>
 8005a18:	e026      	b.n	8005a68 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a1a:	7bbb      	ldrb	r3, [r7, #14]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00c      	beq.n	8005a3a <USBD_StdEPReq+0x112>
 8005a20:	7bbb      	ldrb	r3, [r7, #14]
 8005a22:	2b80      	cmp	r3, #128	; 0x80
 8005a24:	d009      	beq.n	8005a3a <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8005a26:	7bbb      	ldrb	r3, [r7, #14]
 8005a28:	4619      	mov	r1, r3
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f001 f84c 	bl	8006ac8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005a30:	2180      	movs	r1, #128	; 0x80
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f001 f848 	bl	8006ac8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005a38:	e01c      	b.n	8005a74 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8005a3a:	6839      	ldr	r1, [r7, #0]
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 fbe1 	bl	8006204 <USBD_CtlError>
              break;
 8005a42:	e017      	b.n	8005a74 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	885b      	ldrh	r3, [r3, #2]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d112      	bne.n	8005a72 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005a4c:	7bbb      	ldrb	r3, [r7, #14]
 8005a4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d004      	beq.n	8005a60 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005a56:	7bbb      	ldrb	r3, [r7, #14]
 8005a58:	4619      	mov	r1, r3
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f001 f853 	bl	8006b06 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 fc97 	bl	8006394 <USBD_CtlSendStatus>
              }
              break;
 8005a66:	e004      	b.n	8005a72 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8005a68:	6839      	ldr	r1, [r7, #0]
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 fbca 	bl	8006204 <USBD_CtlError>
              break;
 8005a70:	e000      	b.n	8005a74 <USBD_StdEPReq+0x14c>
              break;
 8005a72:	bf00      	nop
          }
          break;
 8005a74:	e0aa      	b.n	8005bcc <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	d002      	beq.n	8005a86 <USBD_StdEPReq+0x15e>
 8005a80:	2b03      	cmp	r3, #3
 8005a82:	d032      	beq.n	8005aea <USBD_StdEPReq+0x1c2>
 8005a84:	e097      	b.n	8005bb6 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a86:	7bbb      	ldrb	r3, [r7, #14]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d007      	beq.n	8005a9c <USBD_StdEPReq+0x174>
 8005a8c:	7bbb      	ldrb	r3, [r7, #14]
 8005a8e:	2b80      	cmp	r3, #128	; 0x80
 8005a90:	d004      	beq.n	8005a9c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8005a92:	6839      	ldr	r1, [r7, #0]
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 fbb5 	bl	8006204 <USBD_CtlError>
                break;
 8005a9a:	e091      	b.n	8005bc0 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	da0b      	bge.n	8005abc <USBD_StdEPReq+0x194>
 8005aa4:	7bbb      	ldrb	r3, [r7, #14]
 8005aa6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005aaa:	4613      	mov	r3, r2
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	4413      	add	r3, r2
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	3310      	adds	r3, #16
 8005ab4:	687a      	ldr	r2, [r7, #4]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	3304      	adds	r3, #4
 8005aba:	e00b      	b.n	8005ad4 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005abc:	7bbb      	ldrb	r3, [r7, #14]
 8005abe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	009b      	lsls	r3, r3, #2
 8005ac6:	4413      	add	r3, r2
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	3304      	adds	r3, #4
 8005ad4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	2202      	movs	r2, #2
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 fbf8 	bl	80062d8 <USBD_CtlSendData>
              break;
 8005ae8:	e06a      	b.n	8005bc0 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005aea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	da11      	bge.n	8005b16 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005af2:	7bbb      	ldrb	r3, [r7, #14]
 8005af4:	f003 020f 	and.w	r2, r3, #15
 8005af8:	6879      	ldr	r1, [r7, #4]
 8005afa:	4613      	mov	r3, r2
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	4413      	add	r3, r2
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	440b      	add	r3, r1
 8005b04:	3318      	adds	r3, #24
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d117      	bne.n	8005b3c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005b0c:	6839      	ldr	r1, [r7, #0]
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 fb78 	bl	8006204 <USBD_CtlError>
                  break;
 8005b14:	e054      	b.n	8005bc0 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005b16:	7bbb      	ldrb	r3, [r7, #14]
 8005b18:	f003 020f 	and.w	r2, r3, #15
 8005b1c:	6879      	ldr	r1, [r7, #4]
 8005b1e:	4613      	mov	r3, r2
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	4413      	add	r3, r2
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	440b      	add	r3, r1
 8005b28:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d104      	bne.n	8005b3c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8005b32:	6839      	ldr	r1, [r7, #0]
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 fb65 	bl	8006204 <USBD_CtlError>
                  break;
 8005b3a:	e041      	b.n	8005bc0 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	da0b      	bge.n	8005b5c <USBD_StdEPReq+0x234>
 8005b44:	7bbb      	ldrb	r3, [r7, #14]
 8005b46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	4413      	add	r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	3310      	adds	r3, #16
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	4413      	add	r3, r2
 8005b58:	3304      	adds	r3, #4
 8005b5a:	e00b      	b.n	8005b74 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005b5c:	7bbb      	ldrb	r3, [r7, #14]
 8005b5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b62:	4613      	mov	r3, r2
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	4413      	add	r3, r2
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	4413      	add	r3, r2
 8005b72:	3304      	adds	r3, #4
 8005b74:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005b76:	7bbb      	ldrb	r3, [r7, #14]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d002      	beq.n	8005b82 <USBD_StdEPReq+0x25a>
 8005b7c:	7bbb      	ldrb	r3, [r7, #14]
 8005b7e:	2b80      	cmp	r3, #128	; 0x80
 8005b80:	d103      	bne.n	8005b8a <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8005b82:	68bb      	ldr	r3, [r7, #8]
 8005b84:	2200      	movs	r2, #0
 8005b86:	601a      	str	r2, [r3, #0]
 8005b88:	e00e      	b.n	8005ba8 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005b8a:	7bbb      	ldrb	r3, [r7, #14]
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 ffd8 	bl	8006b44 <USBD_LL_IsStallEP>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d003      	beq.n	8005ba2 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	601a      	str	r2, [r3, #0]
 8005ba0:	e002      	b.n	8005ba8 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	2202      	movs	r2, #2
 8005bac:	4619      	mov	r1, r3
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 fb92 	bl	80062d8 <USBD_CtlSendData>
              break;
 8005bb4:	e004      	b.n	8005bc0 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8005bb6:	6839      	ldr	r1, [r7, #0]
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 fb23 	bl	8006204 <USBD_CtlError>
              break;
 8005bbe:	bf00      	nop
          }
          break;
 8005bc0:	e004      	b.n	8005bcc <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8005bc2:	6839      	ldr	r1, [r7, #0]
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 fb1d 	bl	8006204 <USBD_CtlError>
          break;
 8005bca:	bf00      	nop
      }
      break;
 8005bcc:	e004      	b.n	8005bd8 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8005bce:	6839      	ldr	r1, [r7, #0]
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 fb17 	bl	8006204 <USBD_CtlError>
      break;
 8005bd6:	bf00      	nop
  }

  return ret;
 8005bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3710      	adds	r7, #16
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
	...

08005be4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	885b      	ldrh	r3, [r3, #2]
 8005bfe:	0a1b      	lsrs	r3, r3, #8
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	3b01      	subs	r3, #1
 8005c04:	2b06      	cmp	r3, #6
 8005c06:	f200 8128 	bhi.w	8005e5a <USBD_GetDescriptor+0x276>
 8005c0a:	a201      	add	r2, pc, #4	; (adr r2, 8005c10 <USBD_GetDescriptor+0x2c>)
 8005c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c10:	08005c2d 	.word	0x08005c2d
 8005c14:	08005c45 	.word	0x08005c45
 8005c18:	08005c85 	.word	0x08005c85
 8005c1c:	08005e5b 	.word	0x08005e5b
 8005c20:	08005e5b 	.word	0x08005e5b
 8005c24:	08005dfb 	.word	0x08005dfb
 8005c28:	08005e27 	.word	0x08005e27
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	7c12      	ldrb	r2, [r2, #16]
 8005c38:	f107 0108 	add.w	r1, r7, #8
 8005c3c:	4610      	mov	r0, r2
 8005c3e:	4798      	blx	r3
 8005c40:	60f8      	str	r0, [r7, #12]
      break;
 8005c42:	e112      	b.n	8005e6a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	7c1b      	ldrb	r3, [r3, #16]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d10d      	bne.n	8005c68 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c54:	f107 0208 	add.w	r2, r7, #8
 8005c58:	4610      	mov	r0, r2
 8005c5a:	4798      	blx	r3
 8005c5c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	3301      	adds	r3, #1
 8005c62:	2202      	movs	r2, #2
 8005c64:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005c66:	e100      	b.n	8005e6a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c70:	f107 0208 	add.w	r2, r7, #8
 8005c74:	4610      	mov	r0, r2
 8005c76:	4798      	blx	r3
 8005c78:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	2202      	movs	r2, #2
 8005c80:	701a      	strb	r2, [r3, #0]
      break;
 8005c82:	e0f2      	b.n	8005e6a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	885b      	ldrh	r3, [r3, #2]
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	2b05      	cmp	r3, #5
 8005c8c:	f200 80ac 	bhi.w	8005de8 <USBD_GetDescriptor+0x204>
 8005c90:	a201      	add	r2, pc, #4	; (adr r2, 8005c98 <USBD_GetDescriptor+0xb4>)
 8005c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c96:	bf00      	nop
 8005c98:	08005cb1 	.word	0x08005cb1
 8005c9c:	08005ce5 	.word	0x08005ce5
 8005ca0:	08005d19 	.word	0x08005d19
 8005ca4:	08005d4d 	.word	0x08005d4d
 8005ca8:	08005d81 	.word	0x08005d81
 8005cac:	08005db5 	.word	0x08005db5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d00b      	beq.n	8005cd4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	7c12      	ldrb	r2, [r2, #16]
 8005cc8:	f107 0108 	add.w	r1, r7, #8
 8005ccc:	4610      	mov	r0, r2
 8005cce:	4798      	blx	r3
 8005cd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005cd2:	e091      	b.n	8005df8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005cd4:	6839      	ldr	r1, [r7, #0]
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 fa94 	bl	8006204 <USBD_CtlError>
            err++;
 8005cdc:	7afb      	ldrb	r3, [r7, #11]
 8005cde:	3301      	adds	r3, #1
 8005ce0:	72fb      	strb	r3, [r7, #11]
          break;
 8005ce2:	e089      	b.n	8005df8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d00b      	beq.n	8005d08 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	7c12      	ldrb	r2, [r2, #16]
 8005cfc:	f107 0108 	add.w	r1, r7, #8
 8005d00:	4610      	mov	r0, r2
 8005d02:	4798      	blx	r3
 8005d04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d06:	e077      	b.n	8005df8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d08:	6839      	ldr	r1, [r7, #0]
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 fa7a 	bl	8006204 <USBD_CtlError>
            err++;
 8005d10:	7afb      	ldrb	r3, [r7, #11]
 8005d12:	3301      	adds	r3, #1
 8005d14:	72fb      	strb	r3, [r7, #11]
          break;
 8005d16:	e06f      	b.n	8005df8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d00b      	beq.n	8005d3c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	7c12      	ldrb	r2, [r2, #16]
 8005d30:	f107 0108 	add.w	r1, r7, #8
 8005d34:	4610      	mov	r0, r2
 8005d36:	4798      	blx	r3
 8005d38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d3a:	e05d      	b.n	8005df8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d3c:	6839      	ldr	r1, [r7, #0]
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 fa60 	bl	8006204 <USBD_CtlError>
            err++;
 8005d44:	7afb      	ldrb	r3, [r7, #11]
 8005d46:	3301      	adds	r3, #1
 8005d48:	72fb      	strb	r3, [r7, #11]
          break;
 8005d4a:	e055      	b.n	8005df8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d00b      	beq.n	8005d70 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	7c12      	ldrb	r2, [r2, #16]
 8005d64:	f107 0108 	add.w	r1, r7, #8
 8005d68:	4610      	mov	r0, r2
 8005d6a:	4798      	blx	r3
 8005d6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d6e:	e043      	b.n	8005df8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d70:	6839      	ldr	r1, [r7, #0]
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 fa46 	bl	8006204 <USBD_CtlError>
            err++;
 8005d78:	7afb      	ldrb	r3, [r7, #11]
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	72fb      	strb	r3, [r7, #11]
          break;
 8005d7e:	e03b      	b.n	8005df8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d86:	695b      	ldr	r3, [r3, #20]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00b      	beq.n	8005da4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005d92:	695b      	ldr	r3, [r3, #20]
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	7c12      	ldrb	r2, [r2, #16]
 8005d98:	f107 0108 	add.w	r1, r7, #8
 8005d9c:	4610      	mov	r0, r2
 8005d9e:	4798      	blx	r3
 8005da0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005da2:	e029      	b.n	8005df8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005da4:	6839      	ldr	r1, [r7, #0]
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 fa2c 	bl	8006204 <USBD_CtlError>
            err++;
 8005dac:	7afb      	ldrb	r3, [r7, #11]
 8005dae:	3301      	adds	r3, #1
 8005db0:	72fb      	strb	r3, [r7, #11]
          break;
 8005db2:	e021      	b.n	8005df8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005dba:	699b      	ldr	r3, [r3, #24]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d00b      	beq.n	8005dd8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005dc6:	699b      	ldr	r3, [r3, #24]
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	7c12      	ldrb	r2, [r2, #16]
 8005dcc:	f107 0108 	add.w	r1, r7, #8
 8005dd0:	4610      	mov	r0, r2
 8005dd2:	4798      	blx	r3
 8005dd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005dd6:	e00f      	b.n	8005df8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005dd8:	6839      	ldr	r1, [r7, #0]
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 fa12 	bl	8006204 <USBD_CtlError>
            err++;
 8005de0:	7afb      	ldrb	r3, [r7, #11]
 8005de2:	3301      	adds	r3, #1
 8005de4:	72fb      	strb	r3, [r7, #11]
          break;
 8005de6:	e007      	b.n	8005df8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8005de8:	6839      	ldr	r1, [r7, #0]
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 fa0a 	bl	8006204 <USBD_CtlError>
          err++;
 8005df0:	7afb      	ldrb	r3, [r7, #11]
 8005df2:	3301      	adds	r3, #1
 8005df4:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8005df6:	e038      	b.n	8005e6a <USBD_GetDescriptor+0x286>
 8005df8:	e037      	b.n	8005e6a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	7c1b      	ldrb	r3, [r3, #16]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d109      	bne.n	8005e16 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e0a:	f107 0208 	add.w	r2, r7, #8
 8005e0e:	4610      	mov	r0, r2
 8005e10:	4798      	blx	r3
 8005e12:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005e14:	e029      	b.n	8005e6a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005e16:	6839      	ldr	r1, [r7, #0]
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 f9f3 	bl	8006204 <USBD_CtlError>
        err++;
 8005e1e:	7afb      	ldrb	r3, [r7, #11]
 8005e20:	3301      	adds	r3, #1
 8005e22:	72fb      	strb	r3, [r7, #11]
      break;
 8005e24:	e021      	b.n	8005e6a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	7c1b      	ldrb	r3, [r3, #16]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d10d      	bne.n	8005e4a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e36:	f107 0208 	add.w	r2, r7, #8
 8005e3a:	4610      	mov	r0, r2
 8005e3c:	4798      	blx	r3
 8005e3e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	3301      	adds	r3, #1
 8005e44:	2207      	movs	r2, #7
 8005e46:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005e48:	e00f      	b.n	8005e6a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005e4a:	6839      	ldr	r1, [r7, #0]
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 f9d9 	bl	8006204 <USBD_CtlError>
        err++;
 8005e52:	7afb      	ldrb	r3, [r7, #11]
 8005e54:	3301      	adds	r3, #1
 8005e56:	72fb      	strb	r3, [r7, #11]
      break;
 8005e58:	e007      	b.n	8005e6a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005e5a:	6839      	ldr	r1, [r7, #0]
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 f9d1 	bl	8006204 <USBD_CtlError>
      err++;
 8005e62:	7afb      	ldrb	r3, [r7, #11]
 8005e64:	3301      	adds	r3, #1
 8005e66:	72fb      	strb	r3, [r7, #11]
      break;
 8005e68:	bf00      	nop
  }

  if (err != 0U)
 8005e6a:	7afb      	ldrb	r3, [r7, #11]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d11c      	bne.n	8005eaa <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8005e70:	893b      	ldrh	r3, [r7, #8]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d011      	beq.n	8005e9a <USBD_GetDescriptor+0x2b6>
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	88db      	ldrh	r3, [r3, #6]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00d      	beq.n	8005e9a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	88da      	ldrh	r2, [r3, #6]
 8005e82:	893b      	ldrh	r3, [r7, #8]
 8005e84:	4293      	cmp	r3, r2
 8005e86:	bf28      	it	cs
 8005e88:	4613      	movcs	r3, r2
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005e8e:	893b      	ldrh	r3, [r7, #8]
 8005e90:	461a      	mov	r2, r3
 8005e92:	68f9      	ldr	r1, [r7, #12]
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 fa1f 	bl	80062d8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	88db      	ldrh	r3, [r3, #6]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d104      	bne.n	8005eac <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 fa76 	bl	8006394 <USBD_CtlSendStatus>
 8005ea8:	e000      	b.n	8005eac <USBD_GetDescriptor+0x2c8>
    return;
 8005eaa:	bf00      	nop
    }
  }
}
 8005eac:	3710      	adds	r7, #16
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
 8005eb2:	bf00      	nop

08005eb4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	889b      	ldrh	r3, [r3, #4]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d130      	bne.n	8005f28 <USBD_SetAddress+0x74>
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	88db      	ldrh	r3, [r3, #6]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d12c      	bne.n	8005f28 <USBD_SetAddress+0x74>
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	885b      	ldrh	r3, [r3, #2]
 8005ed2:	2b7f      	cmp	r3, #127	; 0x7f
 8005ed4:	d828      	bhi.n	8005f28 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	885b      	ldrh	r3, [r3, #2]
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ee0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ee8:	2b03      	cmp	r3, #3
 8005eea:	d104      	bne.n	8005ef6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005eec:	6839      	ldr	r1, [r7, #0]
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 f988 	bl	8006204 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ef4:	e01c      	b.n	8005f30 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	7bfa      	ldrb	r2, [r7, #15]
 8005efa:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005efe:	7bfb      	ldrb	r3, [r7, #15]
 8005f00:	4619      	mov	r1, r3
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 fe4a 	bl	8006b9c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 fa43 	bl	8006394 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005f0e:	7bfb      	ldrb	r3, [r7, #15]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d004      	beq.n	8005f1e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2202      	movs	r2, #2
 8005f18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f1c:	e008      	b.n	8005f30 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2201      	movs	r2, #1
 8005f22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f26:	e003      	b.n	8005f30 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005f28:	6839      	ldr	r1, [r7, #0]
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 f96a 	bl	8006204 <USBD_CtlError>
  }
}
 8005f30:	bf00      	nop
 8005f32:	3710      	adds	r7, #16
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b082      	sub	sp, #8
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
 8005f40:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	885b      	ldrh	r3, [r3, #2]
 8005f46:	b2da      	uxtb	r2, r3
 8005f48:	4b41      	ldr	r3, [pc, #260]	; (8006050 <USBD_SetConfig+0x118>)
 8005f4a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005f4c:	4b40      	ldr	r3, [pc, #256]	; (8006050 <USBD_SetConfig+0x118>)
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d904      	bls.n	8005f5e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8005f54:	6839      	ldr	r1, [r7, #0]
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 f954 	bl	8006204 <USBD_CtlError>
 8005f5c:	e075      	b.n	800604a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f64:	2b02      	cmp	r3, #2
 8005f66:	d002      	beq.n	8005f6e <USBD_SetConfig+0x36>
 8005f68:	2b03      	cmp	r3, #3
 8005f6a:	d023      	beq.n	8005fb4 <USBD_SetConfig+0x7c>
 8005f6c:	e062      	b.n	8006034 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8005f6e:	4b38      	ldr	r3, [pc, #224]	; (8006050 <USBD_SetConfig+0x118>)
 8005f70:	781b      	ldrb	r3, [r3, #0]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d01a      	beq.n	8005fac <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8005f76:	4b36      	ldr	r3, [pc, #216]	; (8006050 <USBD_SetConfig+0x118>)
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2203      	movs	r2, #3
 8005f84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005f88:	4b31      	ldr	r3, [pc, #196]	; (8006050 <USBD_SetConfig+0x118>)
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f7ff f9f3 	bl	800537a <USBD_SetClassConfig>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d104      	bne.n	8005fa4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8005f9a:	6839      	ldr	r1, [r7, #0]
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 f931 	bl	8006204 <USBD_CtlError>
            return;
 8005fa2:	e052      	b.n	800604a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 f9f5 	bl	8006394 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005faa:	e04e      	b.n	800604a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 f9f1 	bl	8006394 <USBD_CtlSendStatus>
        break;
 8005fb2:	e04a      	b.n	800604a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8005fb4:	4b26      	ldr	r3, [pc, #152]	; (8006050 <USBD_SetConfig+0x118>)
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d112      	bne.n	8005fe2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2202      	movs	r2, #2
 8005fc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8005fc4:	4b22      	ldr	r3, [pc, #136]	; (8006050 <USBD_SetConfig+0x118>)
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	461a      	mov	r2, r3
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8005fce:	4b20      	ldr	r3, [pc, #128]	; (8006050 <USBD_SetConfig+0x118>)
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f7ff f9ef 	bl	80053b8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 f9da 	bl	8006394 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8005fe0:	e033      	b.n	800604a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8005fe2:	4b1b      	ldr	r3, [pc, #108]	; (8006050 <USBD_SetConfig+0x118>)
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d01d      	beq.n	800602c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f7ff f9dd 	bl	80053b8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8005ffe:	4b14      	ldr	r3, [pc, #80]	; (8006050 <USBD_SetConfig+0x118>)
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	461a      	mov	r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8006008:	4b11      	ldr	r3, [pc, #68]	; (8006050 <USBD_SetConfig+0x118>)
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	4619      	mov	r1, r3
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f7ff f9b3 	bl	800537a <USBD_SetClassConfig>
 8006014:	4603      	mov	r3, r0
 8006016:	2b02      	cmp	r3, #2
 8006018:	d104      	bne.n	8006024 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800601a:	6839      	ldr	r1, [r7, #0]
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f000 f8f1 	bl	8006204 <USBD_CtlError>
            return;
 8006022:	e012      	b.n	800604a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 f9b5 	bl	8006394 <USBD_CtlSendStatus>
        break;
 800602a:	e00e      	b.n	800604a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 f9b1 	bl	8006394 <USBD_CtlSendStatus>
        break;
 8006032:	e00a      	b.n	800604a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8006034:	6839      	ldr	r1, [r7, #0]
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 f8e4 	bl	8006204 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800603c:	4b04      	ldr	r3, [pc, #16]	; (8006050 <USBD_SetConfig+0x118>)
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	4619      	mov	r1, r3
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f7ff f9b8 	bl	80053b8 <USBD_ClrClassConfig>
        break;
 8006048:	bf00      	nop
    }
  }
}
 800604a:	3708      	adds	r7, #8
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}
 8006050:	200001a9 	.word	0x200001a9

08006054 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b082      	sub	sp, #8
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	88db      	ldrh	r3, [r3, #6]
 8006062:	2b01      	cmp	r3, #1
 8006064:	d004      	beq.n	8006070 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006066:	6839      	ldr	r1, [r7, #0]
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 f8cb 	bl	8006204 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800606e:	e021      	b.n	80060b4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006076:	2b01      	cmp	r3, #1
 8006078:	db17      	blt.n	80060aa <USBD_GetConfig+0x56>
 800607a:	2b02      	cmp	r3, #2
 800607c:	dd02      	ble.n	8006084 <USBD_GetConfig+0x30>
 800607e:	2b03      	cmp	r3, #3
 8006080:	d00b      	beq.n	800609a <USBD_GetConfig+0x46>
 8006082:	e012      	b.n	80060aa <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	3308      	adds	r3, #8
 800608e:	2201      	movs	r2, #1
 8006090:	4619      	mov	r1, r3
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 f920 	bl	80062d8 <USBD_CtlSendData>
        break;
 8006098:	e00c      	b.n	80060b4 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	3304      	adds	r3, #4
 800609e:	2201      	movs	r2, #1
 80060a0:	4619      	mov	r1, r3
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 f918 	bl	80062d8 <USBD_CtlSendData>
        break;
 80060a8:	e004      	b.n	80060b4 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80060aa:	6839      	ldr	r1, [r7, #0]
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f000 f8a9 	bl	8006204 <USBD_CtlError>
        break;
 80060b2:	bf00      	nop
}
 80060b4:	bf00      	nop
 80060b6:	3708      	adds	r7, #8
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b082      	sub	sp, #8
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060cc:	3b01      	subs	r3, #1
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d81e      	bhi.n	8006110 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	88db      	ldrh	r3, [r3, #6]
 80060d6:	2b02      	cmp	r3, #2
 80060d8:	d004      	beq.n	80060e4 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80060da:	6839      	ldr	r1, [r7, #0]
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f000 f891 	bl	8006204 <USBD_CtlError>
        break;
 80060e2:	e01a      	b.n	800611a <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2201      	movs	r2, #1
 80060e8:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d005      	beq.n	8006100 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	f043 0202 	orr.w	r2, r3, #2
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	330c      	adds	r3, #12
 8006104:	2202      	movs	r2, #2
 8006106:	4619      	mov	r1, r3
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f000 f8e5 	bl	80062d8 <USBD_CtlSendData>
      break;
 800610e:	e004      	b.n	800611a <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8006110:	6839      	ldr	r1, [r7, #0]
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 f876 	bl	8006204 <USBD_CtlError>
      break;
 8006118:	bf00      	nop
  }
}
 800611a:	bf00      	nop
 800611c:	3708      	adds	r7, #8
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8006122:	b580      	push	{r7, lr}
 8006124:	b082      	sub	sp, #8
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
 800612a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	885b      	ldrh	r3, [r3, #2]
 8006130:	2b01      	cmp	r3, #1
 8006132:	d106      	bne.n	8006142 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 f929 	bl	8006394 <USBD_CtlSendStatus>
  }
}
 8006142:	bf00      	nop
 8006144:	3708      	adds	r7, #8
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}

0800614a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800614a:	b580      	push	{r7, lr}
 800614c:	b082      	sub	sp, #8
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
 8006152:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800615a:	3b01      	subs	r3, #1
 800615c:	2b02      	cmp	r3, #2
 800615e:	d80b      	bhi.n	8006178 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	885b      	ldrh	r3, [r3, #2]
 8006164:	2b01      	cmp	r3, #1
 8006166:	d10c      	bne.n	8006182 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 f90f 	bl	8006394 <USBD_CtlSendStatus>
      }
      break;
 8006176:	e004      	b.n	8006182 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006178:	6839      	ldr	r1, [r7, #0]
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 f842 	bl	8006204 <USBD_CtlError>
      break;
 8006180:	e000      	b.n	8006184 <USBD_ClrFeature+0x3a>
      break;
 8006182:	bf00      	nop
  }
}
 8006184:	bf00      	nop
 8006186:	3708      	adds	r7, #8
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	781a      	ldrb	r2, [r3, #0]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	785a      	ldrb	r2, [r3, #1]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	3302      	adds	r3, #2
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	b29a      	uxth	r2, r3
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	3303      	adds	r3, #3
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	021b      	lsls	r3, r3, #8
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	4413      	add	r3, r2
 80061bc:	b29a      	uxth	r2, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	3304      	adds	r3, #4
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	b29a      	uxth	r2, r3
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	3305      	adds	r3, #5
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	021b      	lsls	r3, r3, #8
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	4413      	add	r3, r2
 80061d8:	b29a      	uxth	r2, r3
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	3306      	adds	r3, #6
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	b29a      	uxth	r2, r3
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	3307      	adds	r3, #7
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	021b      	lsls	r3, r3, #8
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	4413      	add	r3, r2
 80061f4:	b29a      	uxth	r2, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	80da      	strh	r2, [r3, #6]

}
 80061fa:	bf00      	nop
 80061fc:	370c      	adds	r7, #12
 80061fe:	46bd      	mov	sp, r7
 8006200:	bc80      	pop	{r7}
 8006202:	4770      	bx	lr

08006204 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800620e:	2180      	movs	r1, #128	; 0x80
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 fc59 	bl	8006ac8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8006216:	2100      	movs	r1, #0
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 fc55 	bl	8006ac8 <USBD_LL_StallEP>
}
 800621e:	bf00      	nop
 8006220:	3708      	adds	r7, #8
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006226:	b580      	push	{r7, lr}
 8006228:	b086      	sub	sp, #24
 800622a:	af00      	add	r7, sp, #0
 800622c:	60f8      	str	r0, [r7, #12]
 800622e:	60b9      	str	r1, [r7, #8]
 8006230:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006232:	2300      	movs	r3, #0
 8006234:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d032      	beq.n	80062a2 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f000 f834 	bl	80062aa <USBD_GetLen>
 8006242:	4603      	mov	r3, r0
 8006244:	3301      	adds	r3, #1
 8006246:	b29b      	uxth	r3, r3
 8006248:	005b      	lsls	r3, r3, #1
 800624a:	b29a      	uxth	r2, r3
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8006250:	7dfb      	ldrb	r3, [r7, #23]
 8006252:	1c5a      	adds	r2, r3, #1
 8006254:	75fa      	strb	r2, [r7, #23]
 8006256:	461a      	mov	r2, r3
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	4413      	add	r3, r2
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	7812      	ldrb	r2, [r2, #0]
 8006260:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8006262:	7dfb      	ldrb	r3, [r7, #23]
 8006264:	1c5a      	adds	r2, r3, #1
 8006266:	75fa      	strb	r2, [r7, #23]
 8006268:	461a      	mov	r2, r3
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	4413      	add	r3, r2
 800626e:	2203      	movs	r2, #3
 8006270:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8006272:	e012      	b.n	800629a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	1c5a      	adds	r2, r3, #1
 8006278:	60fa      	str	r2, [r7, #12]
 800627a:	7dfa      	ldrb	r2, [r7, #23]
 800627c:	1c51      	adds	r1, r2, #1
 800627e:	75f9      	strb	r1, [r7, #23]
 8006280:	4611      	mov	r1, r2
 8006282:	68ba      	ldr	r2, [r7, #8]
 8006284:	440a      	add	r2, r1
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800628a:	7dfb      	ldrb	r3, [r7, #23]
 800628c:	1c5a      	adds	r2, r3, #1
 800628e:	75fa      	strb	r2, [r7, #23]
 8006290:	461a      	mov	r2, r3
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	4413      	add	r3, r2
 8006296:	2200      	movs	r2, #0
 8006298:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d1e8      	bne.n	8006274 <USBD_GetString+0x4e>
    }
  }
}
 80062a2:	bf00      	nop
 80062a4:	3718      	adds	r7, #24
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}

080062aa <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80062aa:	b480      	push	{r7}
 80062ac:	b085      	sub	sp, #20
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80062b2:	2300      	movs	r3, #0
 80062b4:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80062b6:	e005      	b.n	80062c4 <USBD_GetLen+0x1a>
  {
    len++;
 80062b8:	7bfb      	ldrb	r3, [r7, #15]
 80062ba:	3301      	adds	r3, #1
 80062bc:	73fb      	strb	r3, [r7, #15]
    buf++;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	3301      	adds	r3, #1
 80062c2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d1f5      	bne.n	80062b8 <USBD_GetLen+0xe>
  }

  return len;
 80062cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3714      	adds	r7, #20
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bc80      	pop	{r7}
 80062d6:	4770      	bx	lr

080062d8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b084      	sub	sp, #16
 80062dc:	af00      	add	r7, sp, #0
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	60b9      	str	r1, [r7, #8]
 80062e2:	4613      	mov	r3, r2
 80062e4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2202      	movs	r2, #2
 80062ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80062ee:	88fa      	ldrh	r2, [r7, #6]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80062f4:	88fa      	ldrh	r2, [r7, #6]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80062fa:	88fb      	ldrh	r3, [r7, #6]
 80062fc:	68ba      	ldr	r2, [r7, #8]
 80062fe:	2100      	movs	r1, #0
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	f000 fc6a 	bl	8006bda <USBD_LL_Transmit>

  return USBD_OK;
 8006306:	2300      	movs	r3, #0
}
 8006308:	4618      	mov	r0, r3
 800630a:	3710      	adds	r7, #16
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	4613      	mov	r3, r2
 800631c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800631e:	88fb      	ldrh	r3, [r7, #6]
 8006320:	68ba      	ldr	r2, [r7, #8]
 8006322:	2100      	movs	r1, #0
 8006324:	68f8      	ldr	r0, [r7, #12]
 8006326:	f000 fc58 	bl	8006bda <USBD_LL_Transmit>

  return USBD_OK;
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	3710      	adds	r7, #16
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	4613      	mov	r3, r2
 8006340:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2203      	movs	r2, #3
 8006346:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800634a:	88fa      	ldrh	r2, [r7, #6]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8006352:	88fa      	ldrh	r2, [r7, #6]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800635a:	88fb      	ldrh	r3, [r7, #6]
 800635c:	68ba      	ldr	r2, [r7, #8]
 800635e:	2100      	movs	r1, #0
 8006360:	68f8      	ldr	r0, [r7, #12]
 8006362:	f000 fc5d 	bl	8006c20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006366:	2300      	movs	r3, #0
}
 8006368:	4618      	mov	r0, r3
 800636a:	3710      	adds	r7, #16
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	60b9      	str	r1, [r7, #8]
 800637a:	4613      	mov	r3, r2
 800637c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800637e:	88fb      	ldrh	r3, [r7, #6]
 8006380:	68ba      	ldr	r2, [r7, #8]
 8006382:	2100      	movs	r1, #0
 8006384:	68f8      	ldr	r0, [r7, #12]
 8006386:	f000 fc4b 	bl	8006c20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800638a:	2300      	movs	r3, #0
}
 800638c:	4618      	mov	r0, r3
 800638e:	3710      	adds	r7, #16
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2204      	movs	r2, #4
 80063a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80063a4:	2300      	movs	r3, #0
 80063a6:	2200      	movs	r2, #0
 80063a8:	2100      	movs	r1, #0
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 fc15 	bl	8006bda <USBD_LL_Transmit>

  return USBD_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3708      	adds	r7, #8
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}

080063ba <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80063ba:	b580      	push	{r7, lr}
 80063bc:	b082      	sub	sp, #8
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2205      	movs	r2, #5
 80063c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80063ca:	2300      	movs	r3, #0
 80063cc:	2200      	movs	r2, #0
 80063ce:	2100      	movs	r1, #0
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f000 fc25 	bl	8006c20 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80063d6:	2300      	movs	r3, #0
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3708      	adds	r7, #8
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80063e4:	2200      	movs	r2, #0
 80063e6:	4912      	ldr	r1, [pc, #72]	; (8006430 <MX_USB_DEVICE_Init+0x50>)
 80063e8:	4812      	ldr	r0, [pc, #72]	; (8006434 <MX_USB_DEVICE_Init+0x54>)
 80063ea:	f7fe ff6c 	bl	80052c6 <USBD_Init>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d001      	beq.n	80063f8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80063f4:	f7f9 ffd6 	bl	80003a4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80063f8:	490f      	ldr	r1, [pc, #60]	; (8006438 <MX_USB_DEVICE_Init+0x58>)
 80063fa:	480e      	ldr	r0, [pc, #56]	; (8006434 <MX_USB_DEVICE_Init+0x54>)
 80063fc:	f7fe ff8e 	bl	800531c <USBD_RegisterClass>
 8006400:	4603      	mov	r3, r0
 8006402:	2b00      	cmp	r3, #0
 8006404:	d001      	beq.n	800640a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006406:	f7f9 ffcd 	bl	80003a4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800640a:	490c      	ldr	r1, [pc, #48]	; (800643c <MX_USB_DEVICE_Init+0x5c>)
 800640c:	4809      	ldr	r0, [pc, #36]	; (8006434 <MX_USB_DEVICE_Init+0x54>)
 800640e:	f7fe febf 	bl	8005190 <USBD_CDC_RegisterInterface>
 8006412:	4603      	mov	r3, r0
 8006414:	2b00      	cmp	r3, #0
 8006416:	d001      	beq.n	800641c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006418:	f7f9 ffc4 	bl	80003a4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800641c:	4805      	ldr	r0, [pc, #20]	; (8006434 <MX_USB_DEVICE_Init+0x54>)
 800641e:	f7fe ff96 	bl	800534e <USBD_Start>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d001      	beq.n	800642c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006428:	f7f9 ffbc 	bl	80003a4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800642c:	bf00      	nop
 800642e:	bd80      	pop	{r7, pc}
 8006430:	2000013c 	.word	0x2000013c
 8006434:	200003d0 	.word	0x200003d0
 8006438:	20000028 	.word	0x20000028
 800643c:	2000012c 	.word	0x2000012c

08006440 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006444:	2200      	movs	r2, #0
 8006446:	4905      	ldr	r1, [pc, #20]	; (800645c <CDC_Init_FS+0x1c>)
 8006448:	4805      	ldr	r0, [pc, #20]	; (8006460 <CDC_Init_FS+0x20>)
 800644a:	f7fe feb7 	bl	80051bc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800644e:	4905      	ldr	r1, [pc, #20]	; (8006464 <CDC_Init_FS+0x24>)
 8006450:	4803      	ldr	r0, [pc, #12]	; (8006460 <CDC_Init_FS+0x20>)
 8006452:	f7fe fecc 	bl	80051ee <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006456:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006458:	4618      	mov	r0, r3
 800645a:	bd80      	pop	{r7, pc}
 800645c:	20000794 	.word	0x20000794
 8006460:	200003d0 	.word	0x200003d0
 8006464:	20000694 	.word	0x20000694

08006468 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006468:	b480      	push	{r7}
 800646a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800646c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800646e:	4618      	mov	r0, r3
 8006470:	46bd      	mov	sp, r7
 8006472:	bc80      	pop	{r7}
 8006474:	4770      	bx	lr
	...

08006478 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	4603      	mov	r3, r0
 8006480:	6039      	str	r1, [r7, #0]
 8006482:	71fb      	strb	r3, [r7, #7]
 8006484:	4613      	mov	r3, r2
 8006486:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006488:	79fb      	ldrb	r3, [r7, #7]
 800648a:	2b23      	cmp	r3, #35	; 0x23
 800648c:	d84a      	bhi.n	8006524 <CDC_Control_FS+0xac>
 800648e:	a201      	add	r2, pc, #4	; (adr r2, 8006494 <CDC_Control_FS+0x1c>)
 8006490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006494:	08006525 	.word	0x08006525
 8006498:	08006525 	.word	0x08006525
 800649c:	08006525 	.word	0x08006525
 80064a0:	08006525 	.word	0x08006525
 80064a4:	08006525 	.word	0x08006525
 80064a8:	08006525 	.word	0x08006525
 80064ac:	08006525 	.word	0x08006525
 80064b0:	08006525 	.word	0x08006525
 80064b4:	08006525 	.word	0x08006525
 80064b8:	08006525 	.word	0x08006525
 80064bc:	08006525 	.word	0x08006525
 80064c0:	08006525 	.word	0x08006525
 80064c4:	08006525 	.word	0x08006525
 80064c8:	08006525 	.word	0x08006525
 80064cc:	08006525 	.word	0x08006525
 80064d0:	08006525 	.word	0x08006525
 80064d4:	08006525 	.word	0x08006525
 80064d8:	08006525 	.word	0x08006525
 80064dc:	08006525 	.word	0x08006525
 80064e0:	08006525 	.word	0x08006525
 80064e4:	08006525 	.word	0x08006525
 80064e8:	08006525 	.word	0x08006525
 80064ec:	08006525 	.word	0x08006525
 80064f0:	08006525 	.word	0x08006525
 80064f4:	08006525 	.word	0x08006525
 80064f8:	08006525 	.word	0x08006525
 80064fc:	08006525 	.word	0x08006525
 8006500:	08006525 	.word	0x08006525
 8006504:	08006525 	.word	0x08006525
 8006508:	08006525 	.word	0x08006525
 800650c:	08006525 	.word	0x08006525
 8006510:	08006525 	.word	0x08006525
 8006514:	08006525 	.word	0x08006525
 8006518:	08006525 	.word	0x08006525
 800651c:	08006525 	.word	0x08006525
 8006520:	08006525 	.word	0x08006525
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006524:	bf00      	nop
  }

  return (USBD_OK);
 8006526:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006528:	4618      	mov	r0, r3
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	bc80      	pop	{r7}
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop

08006534 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b082      	sub	sp, #8
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800653e:	6879      	ldr	r1, [r7, #4]
 8006540:	4808      	ldr	r0, [pc, #32]	; (8006564 <CDC_Receive_FS+0x30>)
 8006542:	f7fe fe54 	bl	80051ee <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006546:	4807      	ldr	r0, [pc, #28]	; (8006564 <CDC_Receive_FS+0x30>)
 8006548:	f7fe fe93 	bl	8005272 <USBD_CDC_ReceivePacket>
  // echo back
  CDC_Transmit_FS( &Buf[0], *Len);
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	b29b      	uxth	r3, r3
 8006552:	4619      	mov	r1, r3
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 f807 	bl	8006568 <CDC_Transmit_FS>

  return (USBD_OK);
 800655a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800655c:	4618      	mov	r0, r3
 800655e:	3708      	adds	r7, #8
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	200003d0 	.word	0x200003d0

08006568 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	460b      	mov	r3, r1
 8006572:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006574:	2300      	movs	r3, #0
 8006576:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006578:	4b0d      	ldr	r3, [pc, #52]	; (80065b0 <CDC_Transmit_FS+0x48>)
 800657a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800657e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006586:	2b00      	cmp	r3, #0
 8006588:	d001      	beq.n	800658e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800658a:	2301      	movs	r3, #1
 800658c:	e00b      	b.n	80065a6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800658e:	887b      	ldrh	r3, [r7, #2]
 8006590:	461a      	mov	r2, r3
 8006592:	6879      	ldr	r1, [r7, #4]
 8006594:	4806      	ldr	r0, [pc, #24]	; (80065b0 <CDC_Transmit_FS+0x48>)
 8006596:	f7fe fe11 	bl	80051bc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800659a:	4805      	ldr	r0, [pc, #20]	; (80065b0 <CDC_Transmit_FS+0x48>)
 800659c:	f7fe fe3a 	bl	8005214 <USBD_CDC_TransmitPacket>
 80065a0:	4603      	mov	r3, r0
 80065a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80065a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3710      	adds	r7, #16
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	200003d0 	.word	0x200003d0

080065b4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	4603      	mov	r3, r0
 80065bc:	6039      	str	r1, [r7, #0]
 80065be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	2212      	movs	r2, #18
 80065c4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80065c6:	4b03      	ldr	r3, [pc, #12]	; (80065d4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	370c      	adds	r7, #12
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bc80      	pop	{r7}
 80065d0:	4770      	bx	lr
 80065d2:	bf00      	nop
 80065d4:	20000158 	.word	0x20000158

080065d8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	4603      	mov	r3, r0
 80065e0:	6039      	str	r1, [r7, #0]
 80065e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	2204      	movs	r2, #4
 80065e8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80065ea:	4b03      	ldr	r3, [pc, #12]	; (80065f8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	370c      	adds	r7, #12
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bc80      	pop	{r7}
 80065f4:	4770      	bx	lr
 80065f6:	bf00      	nop
 80065f8:	2000016c 	.word	0x2000016c

080065fc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
 8006602:	4603      	mov	r3, r0
 8006604:	6039      	str	r1, [r7, #0]
 8006606:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006608:	79fb      	ldrb	r3, [r7, #7]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d105      	bne.n	800661a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800660e:	683a      	ldr	r2, [r7, #0]
 8006610:	4907      	ldr	r1, [pc, #28]	; (8006630 <USBD_FS_ProductStrDescriptor+0x34>)
 8006612:	4808      	ldr	r0, [pc, #32]	; (8006634 <USBD_FS_ProductStrDescriptor+0x38>)
 8006614:	f7ff fe07 	bl	8006226 <USBD_GetString>
 8006618:	e004      	b.n	8006624 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800661a:	683a      	ldr	r2, [r7, #0]
 800661c:	4904      	ldr	r1, [pc, #16]	; (8006630 <USBD_FS_ProductStrDescriptor+0x34>)
 800661e:	4805      	ldr	r0, [pc, #20]	; (8006634 <USBD_FS_ProductStrDescriptor+0x38>)
 8006620:	f7ff fe01 	bl	8006226 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006624:	4b02      	ldr	r3, [pc, #8]	; (8006630 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006626:	4618      	mov	r0, r3
 8006628:	3708      	adds	r7, #8
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	20000894 	.word	0x20000894
 8006634:	08006e2c 	.word	0x08006e2c

08006638 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
 800663e:	4603      	mov	r3, r0
 8006640:	6039      	str	r1, [r7, #0]
 8006642:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006644:	683a      	ldr	r2, [r7, #0]
 8006646:	4904      	ldr	r1, [pc, #16]	; (8006658 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006648:	4804      	ldr	r0, [pc, #16]	; (800665c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800664a:	f7ff fdec 	bl	8006226 <USBD_GetString>
  return USBD_StrDesc;
 800664e:	4b02      	ldr	r3, [pc, #8]	; (8006658 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006650:	4618      	mov	r0, r3
 8006652:	3708      	adds	r7, #8
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}
 8006658:	20000894 	.word	0x20000894
 800665c:	08006e3c 	.word	0x08006e3c

08006660 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b082      	sub	sp, #8
 8006664:	af00      	add	r7, sp, #0
 8006666:	4603      	mov	r3, r0
 8006668:	6039      	str	r1, [r7, #0]
 800666a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	221a      	movs	r2, #26
 8006670:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006672:	f000 f843 	bl	80066fc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006676:	4b02      	ldr	r3, [pc, #8]	; (8006680 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006678:	4618      	mov	r0, r3
 800667a:	3708      	adds	r7, #8
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}
 8006680:	20000170 	.word	0x20000170

08006684 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b082      	sub	sp, #8
 8006688:	af00      	add	r7, sp, #0
 800668a:	4603      	mov	r3, r0
 800668c:	6039      	str	r1, [r7, #0]
 800668e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006690:	79fb      	ldrb	r3, [r7, #7]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d105      	bne.n	80066a2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006696:	683a      	ldr	r2, [r7, #0]
 8006698:	4907      	ldr	r1, [pc, #28]	; (80066b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800669a:	4808      	ldr	r0, [pc, #32]	; (80066bc <USBD_FS_ConfigStrDescriptor+0x38>)
 800669c:	f7ff fdc3 	bl	8006226 <USBD_GetString>
 80066a0:	e004      	b.n	80066ac <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80066a2:	683a      	ldr	r2, [r7, #0]
 80066a4:	4904      	ldr	r1, [pc, #16]	; (80066b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80066a6:	4805      	ldr	r0, [pc, #20]	; (80066bc <USBD_FS_ConfigStrDescriptor+0x38>)
 80066a8:	f7ff fdbd 	bl	8006226 <USBD_GetString>
  }
  return USBD_StrDesc;
 80066ac:	4b02      	ldr	r3, [pc, #8]	; (80066b8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3708      	adds	r7, #8
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	20000894 	.word	0x20000894
 80066bc:	08006e50 	.word	0x08006e50

080066c0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b082      	sub	sp, #8
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	4603      	mov	r3, r0
 80066c8:	6039      	str	r1, [r7, #0]
 80066ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80066cc:	79fb      	ldrb	r3, [r7, #7]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d105      	bne.n	80066de <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80066d2:	683a      	ldr	r2, [r7, #0]
 80066d4:	4907      	ldr	r1, [pc, #28]	; (80066f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80066d6:	4808      	ldr	r0, [pc, #32]	; (80066f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80066d8:	f7ff fda5 	bl	8006226 <USBD_GetString>
 80066dc:	e004      	b.n	80066e8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80066de:	683a      	ldr	r2, [r7, #0]
 80066e0:	4904      	ldr	r1, [pc, #16]	; (80066f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80066e2:	4805      	ldr	r0, [pc, #20]	; (80066f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80066e4:	f7ff fd9f 	bl	8006226 <USBD_GetString>
  }
  return USBD_StrDesc;
 80066e8:	4b02      	ldr	r3, [pc, #8]	; (80066f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3708      	adds	r7, #8
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop
 80066f4:	20000894 	.word	0x20000894
 80066f8:	08006e5c 	.word	0x08006e5c

080066fc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b084      	sub	sp, #16
 8006700:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006702:	4b0f      	ldr	r3, [pc, #60]	; (8006740 <Get_SerialNum+0x44>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006708:	4b0e      	ldr	r3, [pc, #56]	; (8006744 <Get_SerialNum+0x48>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800670e:	4b0e      	ldr	r3, [pc, #56]	; (8006748 <Get_SerialNum+0x4c>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006714:	68fa      	ldr	r2, [r7, #12]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4413      	add	r3, r2
 800671a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d009      	beq.n	8006736 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006722:	2208      	movs	r2, #8
 8006724:	4909      	ldr	r1, [pc, #36]	; (800674c <Get_SerialNum+0x50>)
 8006726:	68f8      	ldr	r0, [r7, #12]
 8006728:	f000 f814 	bl	8006754 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800672c:	2204      	movs	r2, #4
 800672e:	4908      	ldr	r1, [pc, #32]	; (8006750 <Get_SerialNum+0x54>)
 8006730:	68b8      	ldr	r0, [r7, #8]
 8006732:	f000 f80f 	bl	8006754 <IntToUnicode>
  }
}
 8006736:	bf00      	nop
 8006738:	3710      	adds	r7, #16
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	1ffff7e8 	.word	0x1ffff7e8
 8006744:	1ffff7ec 	.word	0x1ffff7ec
 8006748:	1ffff7f0 	.word	0x1ffff7f0
 800674c:	20000172 	.word	0x20000172
 8006750:	20000182 	.word	0x20000182

08006754 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006754:	b480      	push	{r7}
 8006756:	b087      	sub	sp, #28
 8006758:	af00      	add	r7, sp, #0
 800675a:	60f8      	str	r0, [r7, #12]
 800675c:	60b9      	str	r1, [r7, #8]
 800675e:	4613      	mov	r3, r2
 8006760:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006762:	2300      	movs	r3, #0
 8006764:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006766:	2300      	movs	r3, #0
 8006768:	75fb      	strb	r3, [r7, #23]
 800676a:	e027      	b.n	80067bc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	0f1b      	lsrs	r3, r3, #28
 8006770:	2b09      	cmp	r3, #9
 8006772:	d80b      	bhi.n	800678c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	0f1b      	lsrs	r3, r3, #28
 8006778:	b2da      	uxtb	r2, r3
 800677a:	7dfb      	ldrb	r3, [r7, #23]
 800677c:	005b      	lsls	r3, r3, #1
 800677e:	4619      	mov	r1, r3
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	440b      	add	r3, r1
 8006784:	3230      	adds	r2, #48	; 0x30
 8006786:	b2d2      	uxtb	r2, r2
 8006788:	701a      	strb	r2, [r3, #0]
 800678a:	e00a      	b.n	80067a2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	0f1b      	lsrs	r3, r3, #28
 8006790:	b2da      	uxtb	r2, r3
 8006792:	7dfb      	ldrb	r3, [r7, #23]
 8006794:	005b      	lsls	r3, r3, #1
 8006796:	4619      	mov	r1, r3
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	440b      	add	r3, r1
 800679c:	3237      	adds	r2, #55	; 0x37
 800679e:	b2d2      	uxtb	r2, r2
 80067a0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	011b      	lsls	r3, r3, #4
 80067a6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80067a8:	7dfb      	ldrb	r3, [r7, #23]
 80067aa:	005b      	lsls	r3, r3, #1
 80067ac:	3301      	adds	r3, #1
 80067ae:	68ba      	ldr	r2, [r7, #8]
 80067b0:	4413      	add	r3, r2
 80067b2:	2200      	movs	r2, #0
 80067b4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80067b6:	7dfb      	ldrb	r3, [r7, #23]
 80067b8:	3301      	adds	r3, #1
 80067ba:	75fb      	strb	r3, [r7, #23]
 80067bc:	7dfa      	ldrb	r2, [r7, #23]
 80067be:	79fb      	ldrb	r3, [r7, #7]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d3d3      	bcc.n	800676c <IntToUnicode+0x18>
  }
}
 80067c4:	bf00      	nop
 80067c6:	371c      	adds	r7, #28
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bc80      	pop	{r7}
 80067cc:	4770      	bx	lr
	...

080067d0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a0d      	ldr	r2, [pc, #52]	; (8006814 <HAL_PCD_MspInit+0x44>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d113      	bne.n	800680a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80067e2:	4b0d      	ldr	r3, [pc, #52]	; (8006818 <HAL_PCD_MspInit+0x48>)
 80067e4:	69db      	ldr	r3, [r3, #28]
 80067e6:	4a0c      	ldr	r2, [pc, #48]	; (8006818 <HAL_PCD_MspInit+0x48>)
 80067e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80067ec:	61d3      	str	r3, [r2, #28]
 80067ee:	4b0a      	ldr	r3, [pc, #40]	; (8006818 <HAL_PCD_MspInit+0x48>)
 80067f0:	69db      	ldr	r3, [r3, #28]
 80067f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067f6:	60fb      	str	r3, [r7, #12]
 80067f8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80067fa:	2200      	movs	r2, #0
 80067fc:	2100      	movs	r1, #0
 80067fe:	2014      	movs	r0, #20
 8006800:	f7f9 ffd3 	bl	80007aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8006804:	2014      	movs	r0, #20
 8006806:	f7f9 ffec 	bl	80007e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800680a:	bf00      	nop
 800680c:	3710      	adds	r7, #16
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	40005c00 	.word	0x40005c00
 8006818:	40021000 	.word	0x40021000

0800681c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b082      	sub	sp, #8
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8006830:	4619      	mov	r1, r3
 8006832:	4610      	mov	r0, r2
 8006834:	f7fe fdd3 	bl	80053de <USBD_LL_SetupStage>
}
 8006838:	bf00      	nop
 800683a:	3708      	adds	r7, #8
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	460b      	mov	r3, r1
 800684a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8006852:	78fa      	ldrb	r2, [r7, #3]
 8006854:	6879      	ldr	r1, [r7, #4]
 8006856:	4613      	mov	r3, r2
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	4413      	add	r3, r2
 800685c:	00db      	lsls	r3, r3, #3
 800685e:	440b      	add	r3, r1
 8006860:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	78fb      	ldrb	r3, [r7, #3]
 8006868:	4619      	mov	r1, r3
 800686a:	f7fe fe03 	bl	8005474 <USBD_LL_DataOutStage>
}
 800686e:	bf00      	nop
 8006870:	3708      	adds	r7, #8
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}

08006876 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006876:	b580      	push	{r7, lr}
 8006878:	b082      	sub	sp, #8
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
 800687e:	460b      	mov	r3, r1
 8006880:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8006888:	78fa      	ldrb	r2, [r7, #3]
 800688a:	6879      	ldr	r1, [r7, #4]
 800688c:	4613      	mov	r3, r2
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	4413      	add	r3, r2
 8006892:	00db      	lsls	r3, r3, #3
 8006894:	440b      	add	r3, r1
 8006896:	333c      	adds	r3, #60	; 0x3c
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	78fb      	ldrb	r3, [r7, #3]
 800689c:	4619      	mov	r1, r3
 800689e:	f7fe fe5a 	bl	8005556 <USBD_LL_DataInStage>
}
 80068a2:	bf00      	nop
 80068a4:	3708      	adds	r7, #8
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}

080068aa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068aa:	b580      	push	{r7, lr}
 80068ac:	b082      	sub	sp, #8
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80068b8:	4618      	mov	r0, r3
 80068ba:	f7fe ff6a 	bl	8005792 <USBD_LL_SOF>
}
 80068be:	bf00      	nop
 80068c0:	3708      	adds	r7, #8
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}

080068c6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068c6:	b580      	push	{r7, lr}
 80068c8:	b084      	sub	sp, #16
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80068ce:	2301      	movs	r3, #1
 80068d0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	2b02      	cmp	r3, #2
 80068d8:	d001      	beq.n	80068de <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80068da:	f7f9 fd63 	bl	80003a4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80068e4:	7bfa      	ldrb	r2, [r7, #15]
 80068e6:	4611      	mov	r1, r2
 80068e8:	4618      	mov	r0, r3
 80068ea:	f7fe ff1a 	bl	8005722 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80068f4:	4618      	mov	r0, r3
 80068f6:	f7fe fed3 	bl	80056a0 <USBD_LL_Reset>
}
 80068fa:	bf00      	nop
 80068fc:	3710      	adds	r7, #16
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
	...

08006904 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8006912:	4618      	mov	r0, r3
 8006914:	f7fe ff14 	bl	8005740 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	699b      	ldr	r3, [r3, #24]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d005      	beq.n	800692c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006920:	4b04      	ldr	r3, [pc, #16]	; (8006934 <HAL_PCD_SuspendCallback+0x30>)
 8006922:	691b      	ldr	r3, [r3, #16]
 8006924:	4a03      	ldr	r2, [pc, #12]	; (8006934 <HAL_PCD_SuspendCallback+0x30>)
 8006926:	f043 0306 	orr.w	r3, r3, #6
 800692a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800692c:	bf00      	nop
 800692e:	3708      	adds	r7, #8
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}
 8006934:	e000ed00 	.word	0xe000ed00

08006938 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8006946:	4618      	mov	r0, r3
 8006948:	f7fe ff0e 	bl	8005768 <USBD_LL_Resume>
}
 800694c:	bf00      	nop
 800694e:	3708      	adds	r7, #8
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800695c:	4a28      	ldr	r2, [pc, #160]	; (8006a00 <USBD_LL_Init+0xac>)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	4a26      	ldr	r2, [pc, #152]	; (8006a00 <USBD_LL_Init+0xac>)
 8006968:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800696c:	4b24      	ldr	r3, [pc, #144]	; (8006a00 <USBD_LL_Init+0xac>)
 800696e:	4a25      	ldr	r2, [pc, #148]	; (8006a04 <USBD_LL_Init+0xb0>)
 8006970:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006972:	4b23      	ldr	r3, [pc, #140]	; (8006a00 <USBD_LL_Init+0xac>)
 8006974:	2208      	movs	r2, #8
 8006976:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006978:	4b21      	ldr	r3, [pc, #132]	; (8006a00 <USBD_LL_Init+0xac>)
 800697a:	2202      	movs	r2, #2
 800697c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800697e:	4b20      	ldr	r3, [pc, #128]	; (8006a00 <USBD_LL_Init+0xac>)
 8006980:	2200      	movs	r2, #0
 8006982:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006984:	4b1e      	ldr	r3, [pc, #120]	; (8006a00 <USBD_LL_Init+0xac>)
 8006986:	2200      	movs	r2, #0
 8006988:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800698a:	4b1d      	ldr	r3, [pc, #116]	; (8006a00 <USBD_LL_Init+0xac>)
 800698c:	2200      	movs	r2, #0
 800698e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8006990:	481b      	ldr	r0, [pc, #108]	; (8006a00 <USBD_LL_Init+0xac>)
 8006992:	f7fa f8ef 	bl	8000b74 <HAL_PCD_Init>
 8006996:	4603      	mov	r3, r0
 8006998:	2b00      	cmp	r3, #0
 800699a:	d001      	beq.n	80069a0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800699c:	f7f9 fd02 	bl	80003a4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80069a6:	2318      	movs	r3, #24
 80069a8:	2200      	movs	r2, #0
 80069aa:	2100      	movs	r1, #0
 80069ac:	f7fb fc23 	bl	80021f6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80069b6:	2358      	movs	r3, #88	; 0x58
 80069b8:	2200      	movs	r2, #0
 80069ba:	2180      	movs	r1, #128	; 0x80
 80069bc:	f7fb fc1b 	bl	80021f6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80069c6:	23c0      	movs	r3, #192	; 0xc0
 80069c8:	2200      	movs	r2, #0
 80069ca:	2181      	movs	r1, #129	; 0x81
 80069cc:	f7fb fc13 	bl	80021f6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80069d6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80069da:	2200      	movs	r2, #0
 80069dc:	2101      	movs	r1, #1
 80069de:	f7fb fc0a 	bl	80021f6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80069e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069ec:	2200      	movs	r2, #0
 80069ee:	2182      	movs	r1, #130	; 0x82
 80069f0:	f7fb fc01 	bl	80021f6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3708      	adds	r7, #8
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop
 8006a00:	20000a94 	.word	0x20000a94
 8006a04:	40005c00 	.word	0x40005c00

08006a08 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a10:	2300      	movs	r3, #0
 8006a12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a14:	2300      	movs	r3, #0
 8006a16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f7fa f9b3 	bl	8000d8a <HAL_PCD_Start>
 8006a24:	4603      	mov	r3, r0
 8006a26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a28:	7bfb      	ldrb	r3, [r7, #15]
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f000 f94e 	bl	8006ccc <USBD_Get_USB_Status>
 8006a30:	4603      	mov	r3, r0
 8006a32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a34:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}

08006a3e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006a3e:	b580      	push	{r7, lr}
 8006a40:	b084      	sub	sp, #16
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
 8006a46:	4608      	mov	r0, r1
 8006a48:	4611      	mov	r1, r2
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	70fb      	strb	r3, [r7, #3]
 8006a50:	460b      	mov	r3, r1
 8006a52:	70bb      	strb	r3, [r7, #2]
 8006a54:	4613      	mov	r3, r2
 8006a56:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006a66:	78bb      	ldrb	r3, [r7, #2]
 8006a68:	883a      	ldrh	r2, [r7, #0]
 8006a6a:	78f9      	ldrb	r1, [r7, #3]
 8006a6c:	f7fa fb2d 	bl	80010ca <HAL_PCD_EP_Open>
 8006a70:	4603      	mov	r3, r0
 8006a72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a74:	7bfb      	ldrb	r3, [r7, #15]
 8006a76:	4618      	mov	r0, r3
 8006a78:	f000 f928 	bl	8006ccc <USBD_Get_USB_Status>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006a80:	7bbb      	ldrb	r3, [r7, #14]
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3710      	adds	r7, #16
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}

08006a8a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b084      	sub	sp, #16
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
 8006a92:	460b      	mov	r3, r1
 8006a94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006a96:	2300      	movs	r3, #0
 8006a98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006aa4:	78fa      	ldrb	r2, [r7, #3]
 8006aa6:	4611      	mov	r1, r2
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f7fa fb74 	bl	8001196 <HAL_PCD_EP_Close>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ab2:	7bfb      	ldrb	r3, [r7, #15]
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	f000 f909 	bl	8006ccc <USBD_Get_USB_Status>
 8006aba:	4603      	mov	r3, r0
 8006abc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006abe:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3710      	adds	r7, #16
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ae2:	78fa      	ldrb	r2, [r7, #3]
 8006ae4:	4611      	mov	r1, r2
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f7fa fc34 	bl	8001354 <HAL_PCD_EP_SetStall>
 8006aec:	4603      	mov	r3, r0
 8006aee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006af0:	7bfb      	ldrb	r3, [r7, #15]
 8006af2:	4618      	mov	r0, r3
 8006af4:	f000 f8ea 	bl	8006ccc <USBD_Get_USB_Status>
 8006af8:	4603      	mov	r3, r0
 8006afa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006afc:	7bbb      	ldrb	r3, [r7, #14]
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3710      	adds	r7, #16
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}

08006b06 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b084      	sub	sp, #16
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
 8006b0e:	460b      	mov	r3, r1
 8006b10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b12:	2300      	movs	r3, #0
 8006b14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b16:	2300      	movs	r3, #0
 8006b18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b20:	78fa      	ldrb	r2, [r7, #3]
 8006b22:	4611      	mov	r1, r2
 8006b24:	4618      	mov	r0, r3
 8006b26:	f7fa fc75 	bl	8001414 <HAL_PCD_EP_ClrStall>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b2e:	7bfb      	ldrb	r3, [r7, #15]
 8006b30:	4618      	mov	r0, r3
 8006b32:	f000 f8cb 	bl	8006ccc <USBD_Get_USB_Status>
 8006b36:	4603      	mov	r3, r0
 8006b38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3710      	adds	r7, #16
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b085      	sub	sp, #20
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	460b      	mov	r3, r1
 8006b4e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b56:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006b58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	da0c      	bge.n	8006b7a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006b60:	78fb      	ldrb	r3, [r7, #3]
 8006b62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b66:	68f9      	ldr	r1, [r7, #12]
 8006b68:	1c5a      	adds	r2, r3, #1
 8006b6a:	4613      	mov	r3, r2
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	4413      	add	r3, r2
 8006b70:	00db      	lsls	r3, r3, #3
 8006b72:	440b      	add	r3, r1
 8006b74:	3302      	adds	r3, #2
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	e00b      	b.n	8006b92 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006b7a:	78fb      	ldrb	r3, [r7, #3]
 8006b7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b80:	68f9      	ldr	r1, [r7, #12]
 8006b82:	4613      	mov	r3, r2
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	4413      	add	r3, r2
 8006b88:	00db      	lsls	r3, r3, #3
 8006b8a:	440b      	add	r3, r1
 8006b8c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8006b90:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3714      	adds	r7, #20
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bc80      	pop	{r7}
 8006b9a:	4770      	bx	lr

08006b9c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006bac:	2300      	movs	r3, #0
 8006bae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006bb6:	78fa      	ldrb	r2, [r7, #3]
 8006bb8:	4611      	mov	r1, r2
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f7fa fa60 	bl	8001080 <HAL_PCD_SetAddress>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006bc4:	7bfb      	ldrb	r3, [r7, #15]
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f000 f880 	bl	8006ccc <USBD_Get_USB_Status>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006bd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3710      	adds	r7, #16
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}

08006bda <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b086      	sub	sp, #24
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	60f8      	str	r0, [r7, #12]
 8006be2:	607a      	str	r2, [r7, #4]
 8006be4:	461a      	mov	r2, r3
 8006be6:	460b      	mov	r3, r1
 8006be8:	72fb      	strb	r3, [r7, #11]
 8006bea:	4613      	mov	r3, r2
 8006bec:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006bfc:	893b      	ldrh	r3, [r7, #8]
 8006bfe:	7af9      	ldrb	r1, [r7, #11]
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	f7fa fb64 	bl	80012ce <HAL_PCD_EP_Transmit>
 8006c06:	4603      	mov	r3, r0
 8006c08:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c0a:	7dfb      	ldrb	r3, [r7, #23]
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f000 f85d 	bl	8006ccc <USBD_Get_USB_Status>
 8006c12:	4603      	mov	r3, r0
 8006c14:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006c16:	7dbb      	ldrb	r3, [r7, #22]
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3718      	adds	r7, #24
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b086      	sub	sp, #24
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	607a      	str	r2, [r7, #4]
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	72fb      	strb	r3, [r7, #11]
 8006c30:	4613      	mov	r3, r2
 8006c32:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c34:	2300      	movs	r3, #0
 8006c36:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006c42:	893b      	ldrh	r3, [r7, #8]
 8006c44:	7af9      	ldrb	r1, [r7, #11]
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	f7fa faed 	bl	8001226 <HAL_PCD_EP_Receive>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c50:	7dfb      	ldrb	r3, [r7, #23]
 8006c52:	4618      	mov	r0, r3
 8006c54:	f000 f83a 	bl	8006ccc <USBD_Get_USB_Status>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006c5c:	7dbb      	ldrb	r3, [r7, #22]
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3718      	adds	r7, #24
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}

08006c66 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c66:	b580      	push	{r7, lr}
 8006c68:	b082      	sub	sp, #8
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
 8006c6e:	460b      	mov	r3, r1
 8006c70:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c78:	78fa      	ldrb	r2, [r7, #3]
 8006c7a:	4611      	mov	r1, r2
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f7fa fb0f 	bl	80012a0 <HAL_PCD_EP_GetRxCount>
 8006c82:	4603      	mov	r3, r0
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3708      	adds	r7, #8
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006c94:	4b02      	ldr	r3, [pc, #8]	; (8006ca0 <USBD_static_malloc+0x14>)
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	370c      	adds	r7, #12
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bc80      	pop	{r7}
 8006c9e:	4770      	bx	lr
 8006ca0:	200001ac 	.word	0x200001ac

08006ca4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b083      	sub	sp, #12
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]

}
 8006cac:	bf00      	nop
 8006cae:	370c      	adds	r7, #12
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bc80      	pop	{r7}
 8006cb4:	4770      	bx	lr

08006cb6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006cb6:	b480      	push	{r7}
 8006cb8:	b083      	sub	sp, #12
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
 8006cbe:	460b      	mov	r3, r1
 8006cc0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8006cc2:	bf00      	nop
 8006cc4:	370c      	adds	r7, #12
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bc80      	pop	{r7}
 8006cca:	4770      	bx	lr

08006ccc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b085      	sub	sp, #20
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006cda:	79fb      	ldrb	r3, [r7, #7]
 8006cdc:	2b03      	cmp	r3, #3
 8006cde:	d817      	bhi.n	8006d10 <USBD_Get_USB_Status+0x44>
 8006ce0:	a201      	add	r2, pc, #4	; (adr r2, 8006ce8 <USBD_Get_USB_Status+0x1c>)
 8006ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ce6:	bf00      	nop
 8006ce8:	08006cf9 	.word	0x08006cf9
 8006cec:	08006cff 	.word	0x08006cff
 8006cf0:	08006d05 	.word	0x08006d05
 8006cf4:	08006d0b 	.word	0x08006d0b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	73fb      	strb	r3, [r7, #15]
    break;
 8006cfc:	e00b      	b.n	8006d16 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006cfe:	2302      	movs	r3, #2
 8006d00:	73fb      	strb	r3, [r7, #15]
    break;
 8006d02:	e008      	b.n	8006d16 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006d04:	2301      	movs	r3, #1
 8006d06:	73fb      	strb	r3, [r7, #15]
    break;
 8006d08:	e005      	b.n	8006d16 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006d0a:	2302      	movs	r3, #2
 8006d0c:	73fb      	strb	r3, [r7, #15]
    break;
 8006d0e:	e002      	b.n	8006d16 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006d10:	2302      	movs	r3, #2
 8006d12:	73fb      	strb	r3, [r7, #15]
    break;
 8006d14:	bf00      	nop
  }
  return usb_status;
 8006d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3714      	adds	r7, #20
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bc80      	pop	{r7}
 8006d20:	4770      	bx	lr
 8006d22:	bf00      	nop

08006d24 <__libc_init_array>:
 8006d24:	b570      	push	{r4, r5, r6, lr}
 8006d26:	2500      	movs	r5, #0
 8006d28:	4e0c      	ldr	r6, [pc, #48]	; (8006d5c <__libc_init_array+0x38>)
 8006d2a:	4c0d      	ldr	r4, [pc, #52]	; (8006d60 <__libc_init_array+0x3c>)
 8006d2c:	1ba4      	subs	r4, r4, r6
 8006d2e:	10a4      	asrs	r4, r4, #2
 8006d30:	42a5      	cmp	r5, r4
 8006d32:	d109      	bne.n	8006d48 <__libc_init_array+0x24>
 8006d34:	f000 f822 	bl	8006d7c <_init>
 8006d38:	2500      	movs	r5, #0
 8006d3a:	4e0a      	ldr	r6, [pc, #40]	; (8006d64 <__libc_init_array+0x40>)
 8006d3c:	4c0a      	ldr	r4, [pc, #40]	; (8006d68 <__libc_init_array+0x44>)
 8006d3e:	1ba4      	subs	r4, r4, r6
 8006d40:	10a4      	asrs	r4, r4, #2
 8006d42:	42a5      	cmp	r5, r4
 8006d44:	d105      	bne.n	8006d52 <__libc_init_array+0x2e>
 8006d46:	bd70      	pop	{r4, r5, r6, pc}
 8006d48:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d4c:	4798      	blx	r3
 8006d4e:	3501      	adds	r5, #1
 8006d50:	e7ee      	b.n	8006d30 <__libc_init_array+0xc>
 8006d52:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006d56:	4798      	blx	r3
 8006d58:	3501      	adds	r5, #1
 8006d5a:	e7f2      	b.n	8006d42 <__libc_init_array+0x1e>
 8006d5c:	08006e7c 	.word	0x08006e7c
 8006d60:	08006e7c 	.word	0x08006e7c
 8006d64:	08006e7c 	.word	0x08006e7c
 8006d68:	08006e80 	.word	0x08006e80

08006d6c <memset>:
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	4402      	add	r2, r0
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d100      	bne.n	8006d76 <memset+0xa>
 8006d74:	4770      	bx	lr
 8006d76:	f803 1b01 	strb.w	r1, [r3], #1
 8006d7a:	e7f9      	b.n	8006d70 <memset+0x4>

08006d7c <_init>:
 8006d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d7e:	bf00      	nop
 8006d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d82:	bc08      	pop	{r3}
 8006d84:	469e      	mov	lr, r3
 8006d86:	4770      	bx	lr

08006d88 <_fini>:
 8006d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d8a:	bf00      	nop
 8006d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d8e:	bc08      	pop	{r3}
 8006d90:	469e      	mov	lr, r3
 8006d92:	4770      	bx	lr
